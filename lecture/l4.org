#+TITLE: 数组

* 文档
** 注释
   注释由半角的“#”引出，多行注释用多个“#”：
   #+NAME: 70e65a46-9e12-4c4d-b122-dc42590a25ae
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    # 高精度整数举例
    #
    2**1000
   #+end_src

   #+RESULTS: 70e65a46-9e12-4c4d-b122-dc42590a25ae
   : 10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376

   要让程序易于被人理解，一方面应提升和打磨代码风格，让程序本身的逻辑易懂，另一方面，对不明显的程序段落，通过注释来解释。
** 函数的文档
   函数是代码复用的单元，这意味着我们经常会用到别人创作的函数，以节省精力，站在巨人或者一群小矮人的肩膀上。函数定义后紧接的字符串是它的文档，它被特殊对待，由 =help()= 读取输出：
   #+NAME: d28f616f-8011-4581-b76f-2a4e1201ff8e
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     def spherical_harmonic_fitter(grid, order):
         "求球谐函数拟合的系数"
    
         # 具体实现省略
         pass

     help(spherical_harmonic_fitter)
   #+end_src

   #+RESULTS: d28f616f-8011-4581-b76f-2a4e1201ff8e
   : Help on function spherical_harmonic_fitter in module __main__:
   : 
   : spherical_harmonic_fitter(grid, order)
   :     求球谐函数拟合的系数
   : 
   帮助告诉我们，在 “__main__” 模块（程序默认环境）的名字空间里，有这个函数。

   一行的帮助有些单薄。函数的文档，由他人使用，文档写得越详细越好。对复杂的函数而言，函数的帮助需要长篇大论。Python 的多行字符串，正好胜任这一点。多行字符串以三个引号开始，三个引号结束，单引号双引号皆可。三引号设计恰好不与人类语言冲突。
   #+NAME: 1a8eb1cc-c051-47f1-b3cf-142b12da0378
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     def spherical_harmonic_fitter(grid, order):
         '''
         求球谐函数拟合的系数
    
         输入
         ~~~
         grid: 球面上连续函数在固定格点上的取值
         order: 拟合时球谐函数近似截断的阶数
    
         输出
         ~~~
         拟合系数矩阵
         '''
    
         # 具体实现省略
         pass

     help(spherical_harmonic_fitter)
   #+end_src

   #+RESULTS: 1a8eb1cc-c051-47f1-b3cf-142b12da0378
   #+begin_example
   Help on function spherical_harmonic_fitter in module __main__:

   spherical_harmonic_fitter(grid, order)
       求球谐函数拟合的系数

       输入
       ~~~
       grid: 球面上连续函数在固定格点上的取值
       order: 拟合时球谐函数近似截断的阶数

       输出
       ~~~
       拟合系数矩阵

   #+end_example
   这个例子里，我们把文档写得更加详细。不仅有标题，还详细注明了输入和输出的含义。调用函数的人——可能是队友也可能是未来的自己——应当在不阅读的原代码的前提下，顺利使用它们。

   在固定格点上的取值
然后我要定一下
order是什么意思
就是拟合的时候
球谐函数近似的时候
截断的
阶数
那么输出就是说输出的系数
这是一个简单的例子
当我们写一个函数的时候
一般来说要写这样一个文档
会非常地有用
虽然说在我们写的时候
感觉一切都是显然的
为什么还要写
但我们自己觉得
显然的
他人不一定觉得是显然的
那么我们看
对于这样的一个函数定义
如果我们用help来查询它的文档
这个文档
就是我们刚才定义的多行的
可以就是说原样的输出出来
那么在python里边
其实它是非常重视文档
很多时候文档 函数的文档
还有各种类型的文档
还有各种
各种各样的语言结构的文档
它都是这样直接写在语言里面
直接写在语言里
它其实有一个好处
也就是说
它其实体现了
类似的这种一次的原则
也就是说
假如说我们想开发一个函数
我们把这个函数写得非常漂亮
然后我们再又另外的写了一个
文档
放在另一个地方
描述一下我们这个函数
有多么强大的功能
但是
可能我发现了函数的一个bug
然后我就把这函数改
然后或者是又过了一段时间
我又改了函数的参数
我觉得现在的船
这个参数不是很科学
我就把这个参数的格式改了
那么就很有可能
在我改了这个函数的参数之后
我就忘记更新这个文档
如果这个文档
不在这个函数旁边
这个函数旁边的话
那么后来的人
其他人过来之后
一般来说是先看这个文档
说这个函数怎么用
结果他一用发现就出错了
这就显得非常的糟糕
但是这个对于普通的开发者来说
如果这个信息
不是保留在一个地方
而是在两个地方
两次出现
就很容易发生这种问题
而且
很容易发生这种问题
所以说把函数的文档就写在函数
里面
马上就写在函数里
是一个非常具有长远性的一个
习惯
它也体现了一次性原则
那么我们来看一下
比如说python里边其他的
其他的功能
或者是数据类型
我们之前都
之前都接触过
但是还没有看过帮助
我只举了一个None
片子里面
为什么举None
因为其他的
帮助都特别的详细
肯定一张片子是放不下的
只有None
最简单的
这个功能才能够放得下
比如说我们看一下
其他的帮助
比如说我们看整数
比如说整型是什么
我看到整型
它会说
它可以把什么转化成整型
如果不能转化就什么样
然后整型里边
都可以进行什么样的运算
比如说取绝对值
然后这个是按位的进行与
看起来整型
它其实有很多的
比如说我们看一下其他的
比如说help
就是说我们在实际使用的时候
甚至不需要找另外的一个
参考资料
但是参考资料仍然需要
因为参考资料一般来说
可以系统地把全局给我们讲一下
但是如果我们要想查一个工具书
的话
其实它的在线的帮助
也可以是
其实是非常的好用
而且在用的时候
我们可以体会到
一个供人使用的
这个工具
为用户服务的时候
有这样比较及时的文档
出现是一件多么美好的事情
好
那么有了这样的基础之后
其实我们就可以
学习很多
自学很多python的功能
我们可以自己去探索
比如说
我们 
导入这个math模块
是与数学相关的
然后我们看一下
然后打点
然后一直按Tab建
发现math里面有
acos  
acosh
然后 gcd
是最大公约数
还是共产党
那么我们
我们来
我们来查一下看看
发现这个其实是
greatest common divisor
是吧
所以说有时候英文缩写
它有很多歧义
我们看一下它有
就可以很快的知道是什么
但是如果在网上搜索
你说搜索GCB然后可能出来是
别的
不一定是我们要找的东西
所以说这个功能
就可以让我们自由自在地去探索
这是所谓的可发现性
也就是说这个工具
它就都摆在那
我们不用费太大的精力
就是太高的学习曲线
你就可以发现它
这是一个非常好的语言特性
这也是python一直在演化过程中
所吸收的
工具设计中非常好的思想
接下来我们讲一下
函数
不是函数这个模块
我们来把它调回来
模块系统
这函数
是用来实现代码复用的目的
它是践行了一次性的原则
那么模块
如果我们用直观来理解
它就是把相关的函数集合起来
放在一个一个大的
这个名字空间里边
那么它就相当于一个
整合的
很多函数的集合
那模块既可以用Python来
实现
也可以用C或者其他编译语言来
实现
这也就是说最开始我们讲过
说python它其实是一种胶水语言
它可以调用很多
我们
从60年代以来
人类科学发展进程中
所积累下来的
很多优秀的程序
那么这些优秀程序
其实
它被python调用的时候
一般是以这种模块的形式
来
调用
调用进来
使得我们从python可以使用
这些外接的工具库
比如说
我们在以math数学的系统为例
那么记得第一次 Python
课程
我们使用了阶乘的函数
那么我们其实可以看一下
阶乘的函数
有什么样的帮助
我们看阶乘的函数是一个
在math这个模块里边
定义的函数
那么这函数是什么样的呢
那么这个函数是取x那么它将
返回x的阶乘
x的阶乘
返回这个值是一个整数
然后x不能是负值
不能是非整数
比如说我们看了
帮助文档之后
我们就知道我们math
foctorial(10)
就可以这样来使用
所以说
在帮助系统的提示下
我们就可以比较
比较一步一步的
渐进地学习来探索
这个模块系统
那么加载模块的时候
也可以自定义名称
比如说我打了math
我把它拿回来
比如说我打了mice
我要是每次都打这个mice
打错了吗
factorial
我每次都打这个
我觉得
我要打4个字母
太累了
是吧
有些模块
假如说有十几个字母
我每次都这样打
我就觉得不是很方便
这个时候
其实我可以把这个模块也赋值
比如说我就让这个模块叫做
z 那么我进行
z.factorial 也可以调用 math
同样的其实我可以在
导入这个模块的时候
就把它的名字改了
因为它只是一个
一个代号
我可以把它改成
m 那么m也是math的缩写
看这个
什么
这些函数呢
都是一样的
都是一样
所以说
加载模块的时候
可以自定义名称
这样可以使我们的程序
进一步简化
有些模块它其实非常的复杂
它不是一个模块
下面所有的函数都在那里
可能把这个函数也进行归类
这样它这个模块
可能分成好几层
就是说
它的名字空间下面
可能有下一级的名字空间
然后下一级名字空间里面
才有
这个函数的
集合
比如说 os
os这个模块
我们如果 import os 的话
os 是python跟操作系统
进行通信的
模块
比如说 os
它的意义就是 
operating system
操作系统的缩写
比如说我想知道 os
 path
这是一个目录
abspath
我想找一个
我当前路径的绝对路径
这个点是代表当前路径
对
然后我发现这个路径是
这个样子
是我在我本地的
机器上的路径
但是我这样打
我还是感觉非常的难受
我要打
os.path.abspath
而且感觉
感觉我一直在自我重复
所以我不是很高兴
我可以怎么办
比如说
我可以用这样的语法
from
os.path
import abspath
如果把它引入进来了
那么这个abspath
就到了我现在的
最大的默认的名字空间里面
所以我就可以直接执行 abspath
我们来试一下
来直接执行
from os.path import abspath
我看 abspath
就直接在本地了
那么
这个函数和 os.path.abspath
是不是
同一个函数
我们可以问
它是不是 abspath
我看到它确实是同一个函数
它只是我们在这个环境里面
给它的不同的名称而已
可以简写的形式
那么from和
刚才这个import as其实可以一起
使用
刚才我from的时候
我觉得
abspath7个字母
我打的感觉也很多
我可以把它叫做就叫ap
那么比如说ap
我看是不是还是原来的函数
我们发现
所以说
有这样灵活的
这个模块系统
就可以比较方便的
读入各种各样的
工具库里边的函数
使得我们的程序
能够使用先人已经完成的
完成的算法
以及或者是团队里面
其他同学完成算法
或者是我们自己过去
完成的程序
这样就可以
非常好的重复使用这个代码
接下来再提一点
是关于程序的测试
那么相信同学们
在写作业的时候
完成作业的过程中
我们先把它切回来
完成作业的过程中
我觉得肯定同学们会
有几个问题
我们到底如何保证
这个程序是对的呢
是靠眼睛一直盯着它
然后多看几遍它就对了
那么随着我们要完成的任务
越来越复杂
那么程序它就会越来越长
那么是不是程序越来越长
就越容易出错呢
因为我们到底要怎么防止
那么还有一个问题
假如说
我事先已经完成了一个功能
然后我想对它进行修改
我修改的时候
突然想到了一个更加美妙的方法
然后我就迫不及待的
实现了
更加美妙的方法
那么我做了改动之后
原来已经能用的部分
会不会被我不小心改坏了
我到底怎么知道
我是改坏了还是没改坏
那么是不是
我对这个程序修改的越多
它引入新问题的概率
出错的几率就越大
不知道同学们
有没有思考过这些问题
在完成作业的过程中
有没有哪位同学有
在完成作业的过程中
有一些心得
想跟大家分享一下
你到底是如何保证
这个程序是对的
你是如何保证这个程序
能够在作业里边拿到
所有的分数
我就print一下
然后看一下你到底给它写的
它给出输出来什么
也就是因为
print之后
我发现
它读我的那个玩意儿
就干脆给它读了一堆
应该是就一堆字符串
然后应该读这个东西
让我发现那时候读出来的是
一些乱七八糟的数字
然后我就可以去print
然后看哪有问题
我觉得print是最好的
好
感觉
你的声音比较洪亮
大家都已经听到过了不用重复了
那么有一种方法呢
就是
把中间的结果
把它输出出来
然后让我们能够理解中间的结果
到底这个程序在干什么
其实这是这个透明性原则的一种
应用
但是你这个方法
其实有一个问题
那么我每次修改程序之后
我都要再重新print一下
然后再检查一遍吗
我都会先写一个print
然后我就一次一次的
然后最后
修改完之后
我还得再运行一下
我运行的时候我是可以看到
你在交作业之前
是不是把这些print删掉了
我可能注释掉
也可能删掉
好
谢谢
分享
有没有同学有一些其他的
保证程序是正确的方法
特别是我们上周最后一个作业
稍微复杂一点
我相信同学们肯定不是
一下子就把它写完了
然后运行发现全过了
肯定是要经历了很多次
挣扎和试错才实现的
那么大家在这个过程中
有没有发现什么
技巧
有不同意的观点吗
首先当然还是应该
稍微调试一下
调试
一步一步走
调试的意思是说
让这个程序一步一步走
有一种调试
比如说可以用大脑调试
然后就是我们看一看这一步
那么我知道这个变量变成什么了
我在纸上记一下
然后再走下一步
然后我知道这样
就这样
如果用大脑运行一下程序
基本上可以把这个程序
调试得非常好
但是如果程序非常的大
可能
我们需要用工具来借助调试
让它一步一步运行
然后在运行的中间阶段
我们看这些中间变量是什么样的
其实我想问的一个问题就是说
当我们要做print和调试的时候
有没有办法
让这些东西都自动地进行
因为我们想一下
如果这个程序写好了之后
然后我又过了几天
做了一个更改
我可能要重新调试一下
或者重新print一下
看看它是否有变化
那么是否有出错
可能今后因为可能我写的程序
非常好
大家都在用
然后我一直在对它进行修改
我可能要一直要重复这个步骤
那么是否我能够把这个步骤
自动化进行
那么我今天简单给大家介绍一下
这个问题
比如说用git
会对它有一些帮助
是在于当我们
进行修改的时候
我们比较有信心
就是即使我改错了
我还能退回去
所以说会比较大胆地修改你的
你的程序
那么
那么除了git
其实还需要什么呢
那么我们还需要的一个东西
在每次进行一个更新之后
要有一套
比如说检查
可以自动检查的东西
看它到底对不对
比如说我们在作业里边
给大家提供了一个
grade.py这样一个程序
每次你做了修改之后
你可以运行一遍
这个grade看一下
之前输出正确的结果
还是不是正确的
那么这就是一个例子
它就是一个所谓的测试器
它能够测试出来
我们写的程序
它到底是不是正常
我们可以想象
如果这个测试器
写得很复杂的话
如果包括了所有的可能的话
那么即使我们不用眼睛
去读这个程序
那么如果它通过测试器的所有
测试
其实我们也可以有信心
说这个程序
是好的
那么有测试器的好处
相对于手动的调试
有什么样的优点
那也就是说
比如说我自己
我和另一个人合作
我只要把测试器写好就行
你不管写什么程序
一定要通过我的测试器
你如果通过了
那么你就
咱们两个就比较合作愉快
是吧
那么
所以说咱们
就相当于它给我们的那个grade
就是相当于测试器吗
那么当然在今后
我们实际的生活
还有工作中
肯定没有一个助教一直
跟着我
是吧
所以我们就可以自己做自己的
助教
那么自己做自己的助教就可以
比如说我们可以根据需求
用已知的输入输出检查
我们的程序是否正确
比如说这里边
我大概有两个层次
比如说单元测试
对于一个函数
我们写出了一个函数
我们已经定义出来
它的输入是什么
输出是什么
那么其实在设计函数中
我们脑子里面
已经有一个大概的印象
也就是说
如果我给这样的输入
它肯定会出这样的输出
那么如果不是这样的输出
那肯定是这个函数写错了
我们就可以把它作为一个测试的
例子
那么或者是我们还要测试
它在大规模数据上是什么样的
我可以几个大规模的输入
然后当它是否会坏掉
那么还有集成测试
如果那个单元测试都通过了
各个函数都可以用的话
我们还要测试
比如说函数之间的
通信的这些接口
是否能够完整的组合起来
无缝的完成一个统一设计的功能
那么如果我们做了自己的助教
其实是测试和功能
是可以这样进行
首先比如说我们
可以把这个测试写出来啊
那么我们其实就做了一个计划
这函数也有我们的功能要干什么
然后我们再完成这个功能
为了让功能通过测试
来完成这个功能
之后可能我们发现
这个测试比较简陋
那么我们可以把这个测试
做得再复杂一点
或者再高级一点
或者是说有更加丰富的功能在
里面
那么我们在经过这个测试
可以在功能的基础上
我们发现
多了一些测试的点它又通不过了
因为我们有新的测试之后
再放出新的功能
那么我们不仅可以一个人来这样
做
也可以两个团队
一个团队
负责测试一个团队
负责功能
或者我们内心的两半
一般负责设计 一般负责实现
那么在这个过程中
我们看到
这些随着时间点
每次都有一部分是不变的
比如说我在写测试的时候
这个功能部分是不变的
我在完成功能的时候
这个测试已经被定下来了
那么这两方面是相辅相成
相对偶的
两个部分一样
它其实可以连续的进行
向前推进
当我们来进行
比较复杂的
这种功能的时候
就显得非常的有用
所以说我们在完成作业的时候
不仅是完成作业
为了通过测试的这些设计
我们要体会在这个过程中
对我们今后组织协作
或者是保证我们程序正确性
这个方法
那么想必同学们
今后进到实验室里面
都会
大概率会
发现一个现象
就是实验室里面经常会出现
一些没有人敢动的祖传代码
可能是10年前的
某个师兄写的一个工具
它可能是一个什么画图工具
或者拟合工具
或者是某个显微镜的控制程序
然后因为太久远了前辈
可能也毕业了
不知道到去哪里
那么这个代码只用人去读
又读不懂
那么做了一点改动
它可能就会坏
那么就会变成谁也不敢改
那么只要一动
它可能就会就会坏
而且动一下
即使似乎还能够用
我们也不知道
它这个结果是否和之前还一样
是否引入了新的问题
所以这是
我们日常生活中
经常出现的反例
如果有完整的测试机制的话
那么我们遇到了
这样一段祖传代码
其实我们可以做一点点修改
那么修改之后
我们看
如果之前的测试的例子
这个都自动测试的例子都过了
那么就说明
我们这个改动是有效的
反过来
如果我们前辈之前留下了测试
程序
那么我们在对功能进行改进的
时候
其实也就会更加有信心了
就能够很有效的避免这种祖传
代码的出现
好
我们下课休息一会
下节课我们会讲numpy和数组
我们评分的 grade
也是一种测试的实践
那么这个测试
其实是最简单的测试情况
我们python里边
其实还有很多其他的
更加完善的测试框架
能够让我们这个更简单地定义
比如说输入输出
然后它会对这些结果
进行自动的测试
那么这些框架
我们课上暂时先不涉及
有兴趣的同学
可以去深入了解
一些测试框架
那么现在我们有了这些基础
我们知道如何来
读入模块
如何来查看帮助我们
就可以开始
使用python里边的numpy
所谓numpy这样一个模块
那么numpy最开始是
在python的早先其实就开始
因为Python它是一个
胶水语言
它其实可以调用很多的
其他函数的库
那么
其中在科学的发展历程中
在从60年代到2000年
这一段的过程中
应该说计算
所有的数值计算来说
fortran是主流中的
主流
那么要让
当时很多的有兴趣的开发者
是希望把让 Python能够
无缝地
调用
这些fortran的工具
那么最开始他们完成了一个
从fortran向python翻译的一个接口
然后这个接口慢慢的发展
其实又在上面
架设了很多
高层的更加高级的函数
那么慢慢的项目就发展成了
numpy
num 它其实就是代表着
Numerical
比如说数值
py就是python的缩写
比如说
它是python数值计算的
基础库
那么现在库
已经发展得非常的完善
也非常的流行
它已经成为Python科学
计算的
基石
那么所有不管什么样的新出现的
新的科学计算工具
不管它是比如说
要把它跑放在显卡上面
运行
还是放在
非常强的加速硬件上运行
他在Python里面模拟的
接口
都是numpy
比如说numpy已经
基本上成为一个
pythno必备的标准
它是我们目前
用python
进行数值计算的
最佳工具
然后有些同学的系统里面
可能现在没有numpy
我们需要安装一下
那么对于大多数同学的系统
可以通过sudo
apt install
python3
-numpy
来把它安装上
这里是以apt为例
如果用mac的同学
可能有其他的方法
有其他的安装工具
那么你就改一下命令
然后如果ssh
到科协服务器的同学
那么科学服务器上
应该已经装好了这个工具
所以不用做任何操作都可以
装好了吗
也有可能没装好
那么
还是让同学来装
那么在科协的服务器的同学
也可以用sudo
apt install python3-numpy
来
来进行安装
那么怎么看
是否安装
好了
我们来测试一下
python3
我们 import numpy
如果我们import numpy之后
没有什么特别的异常出现
就说明numpy已经装好了
有没有无法使用numpy的同学
好
非常好看起来
这个安装还是很简单
好像有一个同学出现了问题
我们稍微等一分钟
看起来不仅有一个同学
这个numpy没有装上
所以说我稍微再等一会
这个大家不要
大家不要害羞
因为一旦你没有装上
接下来你可能就没有办法跟着走
那么就会有同学掉队
这是我非常不想看到的情况
所以希望每一个同学
都能够运行numpy
我来等大家5分钟
我看一下
大家都
不能够在命令外面
就打numpy
这样import numpy是不对的
因为numpy是python里边的一个
模块
它在python外面
是不能使用的
我们要先进到python里面
然后再import numpy
这样才能使用
可以主动一点
还有同学刚才没注意
不知道该怎么安装
怎么安装
是
安装是这样
打sudo apt
install
然后 python3-numpy
这样对于大多数环境
我们在座的百分之90以上的
同学
都可以这样安装
我们来演示一下
我们打sudo
注重是取得管理员权限
apt install
python3-numpy
我已经装上
演示就没有那么代表性
我先把它删掉
大家不要跟我一起做
好
删掉了
那么我来把它安装上
对
这个跟我一起做啊
sudo apt install
python3-numpy
它下载了
下载之后
只后是最重要的
这个 Preparing to unpack
然后Unpacking
然后 Setting up
如果我们看到这句话
就说明安装成功了
那么我们可以看一下
为什么
我们来看一下
好好好
这个同学的兴趣
让我非常的感动啊
但这个不要做
我把它藏起来
好
同学们都可以运行numpy了吗
这样python3
然后import numpy
那就好了
好了
希望同学们
在出现问题的时候打断我
你们刚才问了几遍
然后还没有同学说话
我差点就要继续了
但是下去走一圈发现
还是有很多同学遇到了问题
现在有没有人import numpy
不成功的
还有
现在所有同学都可以这个import
有没有不能import的
还有一个同学
好
我们
稍微再等一会
刚才收到了一个同学的意见
说我们作业比我们讲的超前
今天上课之前留的作业
我还没有正式的开始留
然后有些同学已经开始做了
那么他就难免的会超前
主要是提前留下来
是给同学看一下
然后如果大家能够带着问题去做
作业
就这个上课
带着问题去上课
可能会效果更好一点
我就是尝试一下
然后如果我上完课之后
作业依旧不知道
你就不知道怎么做的话
我们可以我再仔细的这个调整
一下内容和进度
都好了
这个已经装好的同学
可以先做一下作业
做任何事情都可以
都可以是吧
好
好好
我们重新开始
大家都有numpy了
我们要进入numpy的
神奇世界了
然后我们来
第一步
我觉得每次打5个字
感觉特别累
所以我一般都把它叫做np
我们看
好像大家都觉得numpy特别累
所以一般上
网络上的教程
甚至是numpy
官方的
样例
都是把它叫做np所以说
这个
名字现在已经变得比较显然了
看一下numpy的数组
这个数组
我们只要把它放进去一个列表
它就可以帮我们
转换成一个数组
比如说我放进去一个这样的列表
这个列表是
我们上一周遇到过
就是这样一个列表
然后我们调一个函数叫做
numpy.array
要我们先看一下
array
让我们创建一个array
然后这里边
第一个参数是object
后边还有dtype 有copy
有order
有这个subok
我们看
array它的函数
其实还挺复杂的
我们看到
一定要有的参数是 object
其他的参数
它都有一个默认值
比如说dtype默认值就是None
copy默认值是True
就是说最简单的调用这个函数的
方法
就是只用 object
我看 object
array_like 
这样
后边解释的dtype是什么
我这个屏幕分辨率比较小
看起来比较难受
可能大家的屏幕上
会看起来比较舒服
那么 subok
return
还有这种交叉引用
看起来是非常不错的文档
还有给我们example
你看他自己的一个example
它也叫做bp 就是说np
已经是一个比较标准的
缩写
各种各样的array
其实和我们讲是一样的
我们看一下
刚才我们是进行了这样一个操作
就是nv等于这样的
把一个列表转换成了array
那我们看一下
数组
array
它的内容和这个列表是一样的
好
这是一个最简单的操作
那么大家可能会有疑问
说既然我已经有列表
那么这个列表也是一列
还要这个数据干啥呢
那么
而且输入的时候
也是通过列表来创建一个数据
似乎这个里面重复的东西比较多
为什么还要有一个数组
首先它们是确实非常相似
很多操作的语法
跟列表两者是非常相似的
另外数组
它和列表之间不一样的地方
主要是分为两点
那么第一点数组是要求元素的
数据类型
都是预设好
而且是一样的
但是列表就没有这个要求
比如说列表
对于列表
我们可以进行
把什么样的数据放在一起
都没问题
比如说 1 "a" None
放在一起都没事
这是一个列表
那么这样一个
但是我们应该是没有办法
把这个列表转化成
这都能转化
好
这应该是一个新的功能
但是它的类型
就变成了一个非常一般的类型
那么这样非常一般的类型的数组
跟比较普通的
numpy数组
传统的numpy数组是不一样的
因为一般类型
我们很多运算
都没有办法进行
比如说
这样的运算是不行的
比如说我把它装成1
这是它返回的是None
那么我看到在这个时候
它没有办法
通过一个类型来反映
在元素里面所有类型
所以它变成了一个
最抽象的最一般的类型
那么这个类型
其实没有太大的
用途 就是
体现不出来数组的优势
而且我们在使用它的时候
一般来说需要把
 object
转化成相应的类型
那么第二点
数组的存储它是
占用一段连续的空间
但列表一般来说不是的
我们占用一段连续的内存空间
我们就可以对它进行一些
很优化的操作
因为我们可以假设
这个数组里边的元素是紧挨着的
那么如果有这样的假设
在计算机内部运行的时候
如果是使用速度
比如说内存的读取
数据的交换
就会更加的有效率
所以基于以上两点
使得在这个数值计算中
数组的效率会比这个普通的列表
要高很多
一方面的效率是
它的有数据类型是被定义的
另一方面的效率
是它在内存里面的
内部的存储方式不一样
所以说当我们要遇到一个
规模比较大的问题的时候
把列表转换成数字
会有性能
会有比较大的提升
那么数组跟列表
其实它的索引方式都非常一样
刚才我已经
因为举这个例子
比如 0 1 2
我们回头用一个比较常用的数据
刚才我们打的是
我们刚才就定义这个变量是nv
那么我们看nv[0]就是
第一个元素
之前
对这个列表
有各种各样的操作
比如说这个是从
第二个元素开始
去取这个内容
我们看它依旧是一个数组
比如说
我每隔一个
这个
我每隔一个再取一个
这是我们应该是第一次遇到的
就是说
默认的来讲
我们取整个的数组
都是一个一个取
那么这个2就是每两个取
对
我们看把其中的奇数数部分取出来
那么想如果我
每-1个取一个
会是什么样的状况呢
那么它就是把这个数组
倒过来
我这个例子不好
正过来倒过来差不多
但是我们看到
我这个例子是开始
是1结尾是2
它其实开始是2 结尾是1
我们来找一个更好的例子
我们用arange
我们用的range
arange是
numpy里边的range
它可以直接生成一个数组
比如说arange(10)
可以把它叫做ar
然后看ar
它就是arange生成的
从0~9
如果我对它进行每走-1
取一个数的话
那么它就这样倒了过来
这是一些常用的操作
那么二维数组
其实可以来用来表示矩阵
二维数组其实
并没有太多本质上的区别
比如数组默认来说是一维的
那么二维的也就是说
先把行写完
然后再按列写
那么以此类推
n维的数组
那就可以是第一个维度先写完
然后再写第二个维度
再第三个维度
相信同学们
在学线性代数的时候
或者高等代数的时候
都有很深的体会
比如说我们
来做一个二维的数据
这里边我做了一个单位阵
比如说单位矩阵
单位矩阵要怎么写呢
numpy.array
二维数组
所以就有两个维度
两个维度用
用这个列表来写
那么这个维度内是它的行
维度外是它的列
我们来仔细看一下
如果我要写一个这样
二维的单位阵的话
先把这个行写出来
看一下
先把行写出来
第一行是10
那么我就这样写一个列表
[1, 0]这样写出来
第二行是[0, 1]
然后这两个行
我们再把它看成一个单元
再组成一个列表
这样就是两个列
我们来实际的写一下
比如说
numpy.array
现在就是列
然后往里面添行
第一行是[1, 0]
第二行是[0, 1]
这样的一个二维数组
创造出来了
它叫m matrix
它就是单位矩阵
matrix取下标的时候
我们二维的数组
所以就有
二维的下标
这个下标
我们也可以先取
这样
先取第一维
然后再取第二维
这样写
把它当做是
两层的一维数组
那么简写我们可以这样写
就先写
先写第一维
然后再写第二维
它是一样的
我们看一下是不是一样的
不是一样的
那我们来试一下
然后
可能是遇到了我知识的盲区
我们把它改成3
好
看起来这个经过版本更新
它的内部存储有一些改变
但是我们可以通过等号来判断
它可能不完全是一样的
等号判断是可以的
那么在这个矩阵里边
我们可以看矩阵的类型
比如说我们看
刚才我们造这个单位阵
这个类型是说叫做
numpy.ndarray
n dimensional array 的
缩写
那么m它还有一个比较重要的
参数是它的shape
是
代表它是2×2的一个矩阵
那么数组我们刚才看到
要把它创建起来
特别是二维的时候
其实挺麻烦的
我们要想它行是什么
然后把行里边的数据都给写出来
然后再写第二行
再写第三行
这种写法
还是很繁琐的
有很多常用的
数组 numpy里边
它默认给出来的
比如说
所有都是1的数组啊
所有都是0的数组
都可以给出来
比如说我们
然后来试验一下
我来打 np.ones
所有为1的数据就是说
3×4的矩阵
这里是需要一个
需要是一个列表
或者是 tuple
我看这是三行四列的矩阵
里边都堆满了1
那么如果是zeros
这里边就堆满了0
那么单位阵叫eye
因为单位阵都是方的
所以说不需要写两个参数
这是
5维的
就是这个样子
我们可以看一下eye的帮助
返回一个二维的
二维的数组
它符合单位阵的定义
它默认只要一个参数就行了
其他的时候
还有一些其他的参数
同学们可以有兴趣
可以仔细实验一下
比如说它可以这样定义整型的
单位这样
也可以让k=1变成了一个
上三角矩阵
这些都可以
看来默认是k=0
k=0的时候是
这个参数k=0的时候
它是一个单位阵
k=2
它就变成了
距离对角线有两个单位
这样的一个上三角矩阵
这样的功能还有非常的丰富
同学们可以在这里
比如说np. tab
发现有这么多
有这么多函数
这么多
还有
还有
我们可以一点点
大家可能看到感兴趣的
对
可以来
仔细看一下它的帮助文档
对于我来说
其实我也不知道
这里面所有的定义
一般来说是用到的时候
想一下
如果我是numpy的作者
我会不会实现这样的函数呢
如果大概率会
我就在这里找一下
一般来说是能找到的
旁边就是
我们看刚才我介绍了
我又提前介绍
那么arange
之前我们循环的时候
使用的range的一个
numpy的对应物
arange
如果是这个样子的话
我可以对它
这样进行倒过来
然后也可以进行
隔一个
取一个这样的
那么隔两个取一个就是3
就是每次会跳三步
那么我就取出了3的倍数
如果这样就取出了2的倍数
如果这样的就取出了5的倍数
我看如果我们进行
 arange这样
取1000的话
发生了什么
我多打了一个r
那取1000的话就有1000个
我们看一下
所有17的倍数是什么样的
一个是17
我们看17 34 51 68
用我们心算一下
然后发现都是17的倍数
然后
肯定是没问题的
那么还有一些更复杂的索引方法
也就是说numpy它的基本功能
就是大家能够让
把很多的数字
用这个一定的规律
组成各种各样的方阵
或者是二维的方阵
三维的方阵
多维的方阵
然后以各种各样的方式
来变换方阵
以及方阵之间的运算
这就是numpy的基本功能
我们想象一下
如果这些数
让我们自己来做的话
其实还是很繁琐的一些功能
比如说现在这个图
是我从我们的参考资料
就是我们第二个参考书
上面拿到的这个图
给了我们一个这样的例子
比如说这个图是一个
6×6
6×6的这样一个二维数组
那么每个开头
每一行开头
它都是行数
比如说是0~50
然后每一列
都是它的个位数0~5
那么这样六维数组
我们看
如果对它进行索引
从a 0 那就是第0行
那么3~5
3~5那我要记得这是左闭右开的
区间
那么3~5
就是取到了这两个元素
那么[4:, 4:]
第4个
第4行开始要从第4页开始
我们从这边数
第4个就是这样
从第4行开始
也就是这段部分
第4列开始
所以[4:, 4:]就取了方阵的右下角
注意后面冒号表示是从
4开始
那么单独一个冒号
它意味着是说
把整个的维度全取下来
比如说
这样2
那也就是说
取所有行
但是每一行里边
都只取
第三列
我们已经看到了
人类语言跟计算机语言的区别
发生了什么
太可怕了
我们看到[:, 2]代表的是第三列
要注意
因为是从0开始数数
对不对
大家可以试验一下
一会儿我们来试验一下
那么还有一个是
比如说2
这个行数是从2开始
每隔一行会再取一行
就是每数两个数取一个
那么从2开始
从第3行开始
那么隔一个取一个
那么恰好是取了
这一行
或者这一行
我还是使用计算机的函数
我就把它叫做第2列
这个叫做第0列
要不然
我必须得来回转换
我觉得肯定会说错的
我看列也是从
第0列开始
每两个取
那么从第0列到第2列到第4列
然后就取下来
我看一共有6个数
这6个数就拿到了
这个是numpy最强大的地方
我们来做一个练习
比如说我们arange(100)
把这个叫做s
它是一个从0~99的
然后我们把它转换成
二维数组
我们把它的shape
我们看一下
现在它的shape是100
也就是说它是一维数组
比较容易
我们应该可以通过改shape
把它变成一个二维数组
让它变成10和10
看一下是否能够成功
然后是成功的
我慢一点
刚才我们用了arange
这样就得到了一个
从0~99的
这样一个数组
然后下一步我看了一下数组的
形状
这个形状叫做100
它的意思就是说
它是有100个元素的一维数据
然后我改善它的形状
我让它的形状变成
10和10
变成一个10×10的二维数组
你看一下
看它变成了一个二维数组
排的非常的整齐
非常的喜欢
那么s 我们可以

* 数组
  我们可以试一下
刚才所学到的东西
比如说我取
把所有行都取过来
但是我只取第0列
我们看
确实是第0列
0 10 20 30 40 50
它取下来变成了一个数组
比如说我可以说
在这一行
行上呢只取3
那么这个行只是3的倍数
才可以
然后列只能是5的倍数
嗯我看一下
那么它就得到了
第0行
第3行
第6行
第9行
然后列就只有第0列和第5列
那么比如说
我希望把列给它倒过来
这样
把这个列给它倒过来
我看到
我一共取了3的倍数的行比如说
第0 第3 第6 第9
然后所有的都是倒过来
这个操作
非常的强大
同学们多练习一下
好
我们暂时先下课
刚才下课的时候有同学
提了一个问题
这个问题还是非常本质
我再做一下刚才做过的操作
我最开始是生成了一个一维的
数组
一维数组有100个元素
就是从0数到99
然后看一下这个数组的
我看一下这个数组的形状
它是100个元素没什么问题
然后我做了一件事情
我做一件事情
我说它既然是100个元素的
我想要一个
二维的数组
我就把它直接变成了
让它的shape
强行的把这个的shape
摁成了
10×10
它就变成了一个二维数组
这件事情看起来
很奇怪
奇怪之处是在于
一般我们认为一个数组的shape应该
是一个描述性的东西
是吧
我们说这里有一个矩阵
我问这个矩阵有多少行多少列
那么这个矩阵已经存在了
我才能问它是多少号多少列
我如果有一个
有一个向量
我问这个向量是多少维的
那么这个向量也有了
我才能问它多少维的
那么为什么我可以强行说这个
向量
就是多少维的
然后它就变了
这看起来是一个很奇怪的问题
虽然说一开始
我们觉得这个操作挺方便的
但是仔细越想越觉得
比较困惑
那么我们
我们其实可以再做这几件事
比如说10还可以分成2和5
我们可以把它变成
三个方向的一个
一个立体的阵
就可以这样
然后它就变成了这个样子
比如说
每一行都是5个元素
然后一共分成
每一列都是5个元素分成两行
两行之后
它就形成了一个小的方阵
2×5的方阵
2×5的方阵
在另一个维度
在10个上排列
就变成了
这样的
这样的三维数组
看一下它的shape
这样三维的数组
这看起来比较神奇
这里边是有原因的
有没有同学已经猜到了它的原因
有没有同学猜到他的原因
它其实跟计算机内部的数据存储
是有关系的
比如说计算机内部内存
从内存来说
内存就是0地址啊能存一个数
1这个地址能存一个数
然后内存比如说有8G
大概80亿个
而80亿个这样的单位
能存80亿个数
这80亿个数
它所在的地址基本上就是从0
一直排到80亿
那么实际上
我们的内存 用这种眼光来看
它本质上就是一个一维的数组
那么我们怎么把二维的数组
放在天然的一维的里边
其实实现的方法
就是通过改这些索引
帮我改了一些索引
比如说
我们把它退回到二维的数组
二维数组
是这样的
我们本来就是个二维数组
有两个维度没有办法放到内存
里边
因为我们可以说
既然每一行
我每走一行
那么列都要过10个
那么我们可以让他
比如说它的行是row
我们可以让row乘以10加上列
列是column
比如说我们可以这样
让每一个行乘以10
加上一个column
这样它就变成了一维数组
是吧
然后一维数组
给它在进行整除再取余
它就会变成二维数组
如果用另一种方法
整除区域
说不定就变成三维数组
所以说本质上来讲
二维数组
从0~99
和刚才的一维数组
从0~99
100个元素的一维数组
它们在内存里面
在计算机内部的存储单元里面
都是一样的
都是从1数到100
数过来
那么只是说
对于存储的这一个100个元素
它的解释方式不一样
在这种解释方式下
我让它shape
是10×10的这种解释方式下
numpy就会约定
当这个地方
10个之后
相对于内存里面的绝对位置
它每次都会增长1
那么这一个索引
它每次增长1在内存里边
都增长10
只要做了约定
那么就拿到了一个二维数组
到内存空间的
类似一维数组的一一映射
所以说这是一个
这是一个实现起来的细节问题
但是这个细节问题
体现出来
一点
这一点也是
说明了
为什么我刚才说
上一节课讲的部分
是整个numpy的核心
那么整个numpy
又是python里面
科学计算的核心
所以这个部分是最核心的部分
那么也就是说
numpy它的所有实现
并没有什么特别的
本质的不一样
都还是用内存
它的非常巧妙的地方
是把内存
以不同的方式进行解释
只要不同方式进行解释
就可以变换出
千差万别的
这些多维的
高维的数组
我们看到在这种方法下
只要我们定义了
某一个索引加一
到底在内存里边
过多少的话
只要把它定义出来
那么根本不局限于
二维数组
甚至100维数据也都没问题
那么也就是说
也就是说在numpy里面
我们如果进行张量运算
都是没问题
希望大家能够理解到这一点
感谢同学提这个问题
这个问题非常的本质
大家有什么疑问吗
就这个解释
可以满意吗
好
我们复习一下
刚才的精华的部分
现在我们通过改
它的解释方式
把它解释成了一个二维数组
那么这个二维数组
我们可以从第一个维度
比如说隔两行
每两行取1行
然后第2列每3行取1行
这样我们看0 20 40 60 80
0 3 6 9
没问题
或者是我
每一列人能倒过来
这可以倒过来
或者我取
第二行
或者取第3列
对
第3列就是23
我们第5行第3列
那就53
那么第5行倒数第3列
还有什么样的操作来着
比如说从第二行开始
每3行
取一行
然后它的第3列
第3列到第5列
从2开始
所有10位数是除以3余2的
2 5 8
从3到5就是3到4
比如说这样的一些变化
我们看到这样一些变化
可以节省我们非常
可以非常大的
大量的节省时间
而对于我们来说
这是一种非常自然的思维方式
因为大家都学过了
高等代数和线性代数
对于矩阵来说
简直是我们的自然语言一样
所以说我们写起来
也会心里边非常的舒服
对于我们来说
这就是我们的自然语言
所以说可以看到
pyhton对于
它的实现方式和自然语言描述是
非常接近的
那么有了这些
有了这些非常漂亮的
这种索引方式
我们可以对数组进行运算
我只举几个非常简单的例子
比如说刚才我们
拿到的一直到100
拿过来
比如说
这样一个二维的速度
我想把所有的元素都取平方
然后这样直接这样取平方
这个看起来分辨率有点不是很好
但是我们也可以看到
每个元素都可以取的平方
想象一下
如果我们要写循环
来算的话
要怎么算
可能
循环可能要先循环每行
我来尝试写一下
但这样写会非常麻烦
然后在每列的每行里边
然后我让它平方
然后再让它不换行
输出一个空格
然后
每一行输完之后
再让它回车一下
换行
我们看到是如果按照循环来写
我就只能这么想
虽然我已经用了python的
循环的比较
比较自然的语法
首先我让二维数组里边
对于每个行进行循环
然后对于每个行内
要对于每个列进行循环
循环之后
对每个列举的元素
我都把它平方
平方之后
对于每个列
我都在后面打一个空格
这样把它能够分隔开
分割开之后
如果每一行循环完之后
我再让它再换个行
这样我就打出来
我想在这个过程中
其实我已经想了很多事情
才能把这几个字母写出来
如果对比
这样一个操作
可见numpy是
可以让线性代数的这些操作
变得非常的简洁
也非常符合我们的直觉
因为我们的直觉
说把矩阵元素的平方一下
而且它输出的又比较漂亮
你看这些
0 1 100
这都是对齐的
而对于我来说
而我打的
比较初始的代码还不对齐
那么看起来还比较难看
所以说
大家要体会这一点
要善于使用
目前的最佳的工具
那么numpy对于我们来说
进行矩阵运算
线性代数运算
就是说目前我们手里边
最佳的工具
这也是我们学习numpy的原因
然后刚才 s我们可以
让它都倒过来
倒过来之后
就是变成
从99往前数
数到0
比如说
我可以让这两个矩阵加起来
加起来都等于99
因为我先正过来
再倒过来再加起来
你看这个过程中
就跟一个
我们写的语句
就跟一个数的运算是一样
单个一个数的运算是一样的
同学们在使用的过程中
会越用越感到
这个部分是特别的方便
那么如果大家在理解了
内存的存储其实很多
通过看一些文档
看一些其他的操作
其实可以把numpy组合出来
非常非常高级
非常惊为天人的
简洁的程序
希望同学们能够有意识的探索
我们想一下
刚才我是这样写了两个循环
那么如果不写两个循环
写一个所谓的
用list
写一个压缩版的循环
其实也要这样写
这样写我们看到
在这样一个例子里面
一维的从0到10 从0到9
这样10个元素的数组
这样一个规模的问题来讲
我们看还是要多写好几个字母
对于我们这样的
学物理的
学物理的人来说
多写一个字母都是很不开心的
所以说能够少写就少写
当然注释要多一些
然后这些基本操作
其实加减乘除都可以
比如说刚才是加法
我可以做减法
我看做减法就减出了
很多的我的奇数
然后我们还可以做什么
做乘法
做乘法就比较
做乘法也可以
做除法也可以
做除法就很不容易看
我们还是做乘法
那么
不仅可以进行按位的运算
也可以
对这样的数组
进行总结性运算
什么是总结性运算
本来它有100个数
我希望把这100个数
汇集成一个数
都有什么汇集方法
比如说求一个平均数
0~99的平均数
0到99的平均数
就是49.5
然后求一个中位数
求一个中位数
中位数也是49.5
我们可以求和
求和4950
那么再加100
就是5050
这是一些
常见的总结性的运算
我们还可以这样
比如说
求和我让它
只求一个维度的和
那我们看一下求和的函数
有没有什么值得看的地方
我们看到第二个参数
非常的有戏
因为它叫axis 它是说
从哪一个方向来进行求和
然后 axes along which a sum is performed
到底在哪个方向
进行求和
我们就可以进行
比如说
对它求和 axis=0
这是在哪个方向进行的求和
axis是0 就是把0压缩掉了
把这个行都给压缩掉了
行都没有了
剩下的都是这些列相同的
列都被求和
是吧
这一点我在学习高等代数的时候
就经常转不过来
到底哪个是行
哪个是列
我不知道同学们
有没有跟我同样的感受
在大一的时候
我就经常转不过来
每次都试一下
比如说按
也会这样的求
求均值
也可以这样去解决
对均值来说肯定是
这样求了均值之后
肯定每两列之间都差一
因为对于每一行它都差1
每个元素都差异
是吧
同学们都跟上了吗
有没有什么疑问
如果是一个三维数据
会不会有变化
就三个axis
来我们试一下
给我们来个三维数组
三维数组
这样
这是一个4×4×4的数组
我们看
当然我的屏幕只是二维的
所以没办法显示出三维的东西
那么我们可以比如说对它的
axis=0
代表把第0维的维度
加起来
这样还剩两个维
是吧
然后把第一维的维度加起来
或者是把第二位的维度加起来
这样就我们可以想象
4x4x4
这有一个
有一个像魔方一样的
三维的数组啊
我们可以朝投影的方向
进行求和
或者朝投影方向进行
或者朝那个方向进行
我们应该也可以
对两个投影的方向进行求和
看一下可不可以这样
我也不确定可不可以
我猜是可以的
可以
比如说把第一个维度
4×4
都求和
把第二个维度都求和
不第一个第0个维度
我们看一下是不是
刚才的0和1求没了
两个维度求和
但具体是哪两个维度
我们想这有一个方块
是这两个维度
应该说
每次我想的时候
都需要仔细想一想
而且一想就会想错
一般的时候
我会多试一下
同学们如果有这样
线性空间的思考技巧
可以传授给我
我一直很困惑
经常说第几行
第几列还是第几列第几行
我就会把这个对
搞错了
所以每次都要试试几次才行
欢迎大家传授给我技巧
好
大家还有什么疑问吗
没得
这是中位数的定义
是吧
你说找三个数把357返回
我们看一下
这个问题我也不知道
看起来是不行的
说不定可以用percentile
我们来看一下
percentile只输出一个
刚才的问题是说
median中位数
我们只能取出来一个数
能不能多取几个
比如说中位数旁边的
左边一个右边一个
左边两个
右边两个
怎么取
看起来没有现成的工具
可能比较适合做一个作业
那么我现在想象的呢
比如说可以先把array进行排序
排序完之后
我们选一下
到底是从百分之多少
到百分之多少把它取下来
就是我设想
说不定有更快的方法
说不定有更快的方法
大家还有什么别的问题吗
让我来做个练习
做一些矩阵运算
比如说我们
想用一用三个世界上
最有名的三个矩阵
Pauli矩阵
我们怎么做Pauli矩阵
我们先取一个空的列表
然后我们加上第一个pauli阵
比如说array
第一个pauli是
第一行是[0, 1], [1, 0]
我这个矩阵我能写出来
就是带虚数的矩阵
可以
马上就到虚数了
我们问题总是很超前
我们看这有一个pauli的第一个
矩阵
我们看第二个矩阵
第二矩阵是
哪个在上面
哪个在下面
-i在上面
这里面我们顺便介绍一下
python里面的虚数，是用j来表示的
比如说1J 我们平时说的i
1j进行平方
我们看到这就是-1
我们把第二个pauli阵加进去
第二个pauli是
[0, -1j] 和 [1j, 0]
刚才的问题
刚才同学问题是说j是
numpy定义
还是就是python定义
跟numpy没关系
好
我们来验证一下
对
跟numpy没关系
好
现在有两个pauli阵了
看起来有点别扭
好
这是第二个pauli阵
第三个pauli阵
我们把它加进去
我打错了
第三个pauli阵是
[1, 0], [0, -1]
好
pauli矩阵最
最重要的
性质是什么
有同学说平方
我们来看一下平方
这里边的平方
就不是每个元素的平方
而是矩阵乘法是吧
矩阵乘法
我们来看矩阵乘法
它是点乘
它其实是用的是点乘
我看pauli阵的自相乘
这里用dot
看一下dot
Dot product of two arrays
它其实就是矩阵乘法的意思
我们看到第一个
不是第2个pauli矩阵
乘起来也是单位阵
虽然它是有负数的
表示
但是它的虚部
都是0
那么第一个pauli矩阵
我们把它两矩阵相乘
是吧
那么刚才我还听到同学说
最重要的性质是它的对易关系
咱们就定义一个函数
这个函数就是在
在这里
我们看我们定一个对应关系
这个函数的名叫commute 这个函数的
函数的文档是说commutation operator
ab-ba 那么我们如果要
定义
它
就是a和b矩阵相乘
减去b和a矩阵相乘
commute(a, b) 这个文档我就不打了
先a乘b 减去 b乘a
这函数我就定义出来
然后我们看commute
pauli
和第1个阵
来进行对易
看这是一个
2i
这是一个 -2i
我看第三个pauli阵
第三个pauli阵是1和-1
所以说我们看到对易关系
2i
乘以
pauli阵
第二个
我们看都是对的
每每一个
每一个元素都是一样的
所以说它们都是一样的
这里边我们可以说
它们所有都相等
我要非常随意的
又引入了一个新的命令
希望大家能够适应
因为numpy里边命令实在是太多了
如果大家忘了
如果大家不知道
这个all是啥意思
我们来看一下
所有的数组元素
都是True
我们看后边还是有参数的
可以接某一个维度
也可以接一些其他的参数
有兴趣
你也可以仔细看一下
如果心里边有数的话
遇到相应的时候
我们就可以一下子
就找到需要的工具
可以瞬间地把问题解决掉
好
我们刚才看到的是哪来着
好
这里
对吧
我们看了他的对易关系
那么对易关系
如果我交换这两个对易子
我们就看到它变成了负的
是吧
交换两个对易子
第二个pauli矩阵
跟第一个pauli矩阵对易的话
那么所有的pauli矩阵之间
都可以进行对易运算
1和2
下标
太混乱了
第二个和第三个进行对易的话
那么就会得到第0个乘以2j
好
希望同学们
能够通过pauli矩阵的练习
能够熟练numpy的
一些基本的运算
和比较一些操作
还有函数
那么有了这些操作之后
大家就可以比较得心应手地用
用一些很简单的
很精炼的程序写法
做一些复杂的矩阵运算
我们来总结一下
做作业之前
我们总结一下
numpy的数组功能是
非常的丰富
大家可以参考一下讲义的这个
地方
那么做更多的练习
这个讲义是参考资料二
它是由numpy的
作者写的书
这个讲义是非常的友好
也非常的权威
那么课上
我是碰到了什么函数
就给大家介绍了
如果忘了就打一下help
对于同学们也是一样的
大家可以猜一下
哪个函数可以完成一个矩阵
矩阵运算
或者是
向量运算的一些功能
那么当大家想找的时候
就可以试一下
打一下help就可以
知道这个函数怎么用了
就工具怎么用啊
所以说
今天讲的numpy
虽然讲了精华部分
但是今后还有很多的功能
我们会在实际的使用中
会遇到了就跟大家介绍一下
那么这也是我们一般来说
学习一门计算机语言
或者是接受一个新的工具的
一般的思路
我们先理解它的思想
numpy的思想是什么
numpy的思想就是
把一串内存空间
把它重新编号
编完号编成什么
它就是一个什么样的
线性代数的一个对象
那么在这个基础上
我们理解它的基本的思想之后
其实我们可以在用的时候
现学现卖
这都没有问题
在用的时候随时查阅帮助
随时地参考一些资料
其实就可以把程序写出来
那么这样我们是带着问题
来实现程序
那么实际上我们学到的东西
都会马上地用上
这样你用的越多
那么对它的印象就越深
而且留下印象的都是有用的
不会学到没用的东西
因为这个工具实在是太多了
这个永远有无穷无尽的工具
比如说在python的仓库里
仓库里边
至少有10万种工具
没有办法
所有东西
都了解到
在各取所需的过程中
我们学会看文档
学会能够找到工具
这是我希望同学们
学习到的核心的技能
好
大家还有什么疑问吗
没有什么疑问
我突然想起来
刚才忘说了一件事
就是pauli矩阵的特征值
我们举这个例子
还是不要跳过
然后pauli矩阵
特征值是这样一个 linalg
这是 linear algebra 的缩写
在讲义里面我写了
我是在这里写的
 eigvals 
第一个pauli矩阵的eigvals
这个就是算它的eigvals
我们看
eigvals就是0和-1
这就是pauli矩阵的特征
这也是0和-1
特别的巧
那么第三个pauli矩阵的
特征值也是0和-1
好
接下来咱们做一个作业
我看
上课之前
有很多同学已经开始做了
那么非常
同学们的热情
令我非常的振奋
依旧希望大家通过GitHub来完成
作业
那么没有网络食堂的同学
我把
我把贴到微信的群里
非常好
谢谢
这个作业是求
给定的一个N以内的素数
这个作业
看起来是比较简单的
但是它其实有时间限制
有时间限制
那也就是说
你的程序的效率是要有的
如果效率比较差的话
比如说我给你一个1亿
那么你可能这个程序就算不完了
如果默认的通过循环来做呢啊
也是可以的
比如说
我来做一个最弱的做法
其实可以用我们今天讲的numpy
它的某些很好的特性
可以找出某些数的倍数
然后另外还有一个工具叫做sympy
sympy
希望同学们能够举一反三
sympy它是一个符号计算的工具
可以把它理解成
python里边的mathematica
或者是
可能大家不知道
mathematica
那么刚才大家还记得怎么安装的numpy
对
在讲义的这一页
教大家如何安装numpy
那么其实你用同样的方法
安装sympy
然后sympy
因为它是一个
符号计算
也就是说它可以进行公式推导
那么它里边
说不定会有
求某一个数之内的
质数的函数
如果大家找到了
也可以使用
如果你找到了
numpy
和sympy之外的工具
可以一下子就找到素数
或者是
你需要找素数的时候
需要这些工具
你可以跟教学团队提一下
因为我们的测试环境
可能会没有
这些工具
你只要提一下
那么numpy的使用方法
上课的时候会讲
sympy不同的要求
同学们可以自己探索一下
接下来我就
争取能快速的
和同学们一起做一下
也很简单
作业已经下来了
我们来做这个作业
先下课
我在课间把这个作业做一下
下节课我们会总结一下上周的
作业
我想出了一个可能的
正确的
但是效率最烂的方法
然后事实证明
这个应该是对的
但是它的效率很低
同学们可以想一下
怎么来提升它的效率
基本的思想就是说
所有小于
小于 N的数
那么我们对小于n的数
进行一次循环
先假设它是素数
然后把所有小于它的数
再进行一次循环
如果有能整除它的
它就不是素数
非常好
比如说这个地方
到i 这样就多测了很多
比如说这里可以到根号i那么就
可以少测不少
那么如果经过这一个大循环之后
没有任何比他小的数
可以整除它的时候
除了1之外
那么它就是prime 
那么我就可以把它输出了
逻辑很简单
那么
比如说我打1万
1万还是可以的
但是10万就有点爆炸
看我的 CPU
应该是在疯狂的运算
是的
只有一个单线程
在疯狂的运算
这说明我的程序写的效率特别低
大家一定不要学习
但是算法大概是这样
我们留三分钟时间
给同学思考一下这个作业
然后三分钟之后
我们请陈晟祺同学总结一下
上周周末留的作业
GPA作业
然后我就来讲课
第一周作业的情况
先回顾一下
大家应该都知道
作业是什么就是
然后我就简单讲一讲
按照
按照顺序来输出
然后有简单的文件读写
还有一个非常简单的命令行参数
这些上课也都讲过
最后保留两位小数输出
黑盒测试上
我给大家一个非常简单的样例
然后我这里自己有两个
corner case
大家应该都看到了
我的数据
一个
一个其实也不是
corner case
对里面有比较多的
没有学分的项目
没有
叫做不算GPA的学期
有几个不算GPA的学生学期
然后第二个case是
他连续的挂一门课
好几回那种
然后我随机地生成了
完全uniform生成了
8个数据规模
分别从10~1万
最后的测试上呢
然后每个点上
我是按行比较
先检查位数
然后再检查
允许最后差一个小数
每个点限时是两秒
然后白盒测试上
分三个部分
代码风格
git还有实验报告
我待会都会讲
这是我新鲜出炉的评分情况
昨天评了一晚上
今天又评了一早上
大家就这样
5个人没交
然后我暂时不接受
补交
就是补交了
我也不算你分
但是最好还是交一交
说不定在期末的时候有用
就一个人还挺欣慰的
还好是交上了
然后有15个人
100分这个大于100分
我不是投着吗
我从这边我看一下
好
 OK超过100分
是因为白盒这部分
可以超过原来预定的20分
只要你写的够对
我就会给你持续的加分
然后有30个20个人
在分数字面上及格了
平均的白盒分数20.13分
所以大家的白盒分
应该都不用
太担心了
然后黑盒分就
看起来不是一个太好看的分布
就是满分的人比较多
然后0分的人也比较多
中间零零散散的都有些分布
总分的话呃还可以
看起来还可以
不过大家不用担心
这个不是最终的作业
这个作业成绩
最终不会直接这样折算到
我怎么卡住了
OK然后说怎么写
我就不讲了
大家都写过了
几乎
就算你没有过全部的点的话
你应该大概也知道怎么写
也知道自己犯了什么错
所以我就不详细的讲
这个题目要怎么写
如果要有什么学习
更简洁或更快的写法的话
于是可以看我们三个助教的标程
当然标程也不是最快的
但是
往往比大家考虑的情况多一些
或者说更简洁一些
或者咨询一下小助教
因为可以看到小助教
有6个人
5个人都是满分
还有1个人出了一些锅
我看他写的代码还是挺好的
然后大家也可以互相学习
因为有些人还是用了
比较高级的语言用法
包括我们课上
没有讲到的内容
然后黑盒问题
有那么三四个人
把GPA的对应写错了
你可能是因为太着急了
也可能是因为
比如我的测试里面
没有挂的科
对吧
所以你在你写错了也不知道
所以这就凸显出了
你自己测试的重要性
然后我就没有办法了
还有一些人假设学习的格式
就假设学习都是
2018分量的格式
但是我明确的写的
不一定
对吧
所以我特意卡掉
到了你这样只能得20分
就是我
我那两个看起来是对的格式
还有复杂度较高
长度较大
就是怎么说呢
有些人的写法本身
这语义上是对的
但是做了非常多不必要的操作
导致他的复杂度到了
N方
就是说它会对学期条数
每次插入一条的时候
都要在前面再做一次遍历
然后到1万的时候
你肯定是过不了的
常数较大的话
就有些人的操作会比较迷
他会对着一个字符串
反复的做一些奇怪的操作
导致数目比较大的时候
你还是过不了这个的话
建议咨询一下旁边的同学
特别如果你只有两个点
不过的话
一定要问一下旁边的同学
大家有什么更好的写法
输出格式不对
我们要背锅
今天不是有人在群
也不是这回事
今天上午
杰哥突然对我说
有些人输出
虽然只有3.7这样子
但我一想这不对
我要说保留2位小数
对吧
然后我想我就改了
重新卡掉了4个人
有一位同学从100分被我卡
到了0分
但是我后来发现
因为我发下来的grade
我实际上没有检查这件事情
所以
所以的确是
我们有一部分责任在这里面
因为大家可能看不出来
因为运行了一遍就pass了
对吧
但实际上你们输出还是不对
对
但是鉴于我确实在实验报告里
用粗体写的至少两遍
这样的话就是保留两位小数
我认为你们还是有责任
要遵守这件事情
其实我的grade是不对的
所以我们还会再商量一下
这些事
这个事情首先分肯定会被扣掉
一些
但是你也不会得零分
然后等我们商量以后
这件事情再确定
然后这也告诉大家
一定要认真看文档
不要太相信所谓的
然后这代码风格
占5分
占白盒里面的5分
也就是整个作业的5分
一个是没有空行上附近
这个就是我打开看起来
我又不用干
我vscode显示在
一块色块在那
我肯定要
扣分了
完全没有注释
也是
下面变量命名
我当时说了很重要
对吧
有位同学用了abcde5个数组
我确实不知道是什么
但是确确实实是100分
对吧
当然我也不能扣你黑盒那我扣你白盒
还有用总来当变量里面不止1个人
我至少数到5个人
我知道我
我看了也挺想笑的
然后下面一个我也扣了一分
为什么
就是有些是Python的
比如内置的函数
或者内置的保留字
或者关键词
虽然它可以用来当变量名
但是你不要这样做
包括有很多人用了
类似给我扣了一分
确实你可以用
但是这样的话
那内置的list函数
接下来就再也没法被调用
所以大家要写的时候要谨慎
如果你用现在的IDE
或者vscode
它都会提醒你
这个东西是一个
你要注意解决这个问题
还有很普遍的情况是
中间有个split
split完之后会出来
一个数组对吧
大家就对着数组
就疯狂的开始
这个数组的123456
开始疯狂的操作
然后有人写了整整四五十行
然后里面全都是数组加下标
首先我怀疑你接下来才改的话
你还知道那是什么
你还得看你
然后我也看不懂
其实就是这个的话
可以建议大家
用split出来之后
你先把它附上
一个正确的名字
然后你自己也写的也方便一点
加分项的话
就是有些人做得比较好
比如做了一些错误处理
虽然我没有给错误的数据
然后还有一些人用的
Python3.7的一些
新的特性
像 fstring
或者我不太记得了
对吧
然后还有一些人用上了numpy
我觉得也挺好的
虽然它用numpy
还比大家慢了一些
还有两位同学
两位上海交通大学同学
用了pandas
显着的变慢
就是没有必要杀鸡用牛刀
因为pandas内部数据表示比较
复杂
不是用来
做这么简单的事情
其实
然后git
我上次也说了
一个肯定会被扣分
对吧
还有确实有人用了
upload
homework这样的
有可能是时间来不及
也可能是没有考虑那么多
但是肯定要扣分
数数的人还是有那么几个
当然这次数数比较高级一点
以前数数123453
first second third
那个会用序数词了
但是还是没有任何的信息量
所以还是要扣分
然后有一个我没有扣分的事
就是有人写了merge1
:
merge2:什么
就是这个也不用写
因为确实没有必要这样写
对吧
因为你也不是在发布什么
windows
没有必要这么正式
还有我上次提到的
顺便提一下
我上次提到的
一般是用在正式的软件开发流程
里面
然后如果只有你一个人在写呢
一般是不用加的
当然你加上我也不会说你错
对吧
但是就显得比较长一点
可以不用加这个
OK
然后加分的话
凡是格式比较统一的
这样我都有加一分
然后还有人用.gitignore
隐藏忽略掉了一些
不必要的文件
也有加分
值得一提的是
有同学把
文件交上来了
有同学把python的
上来了
有同学把python的 pycache是交上来
还有同学把自己
造了一个很大的数据交上来
而且这些都没有必要
就是交文件的时候
只需要交有用的就可以了
可以避免污染仓库
只有你自己用到的文件
或者临时的文件
都不需要交上来
OK
算法思路没什么好说的
就是说清楚
我简单的扫一眼
能明白你在干什么就好
然后几乎所有人都能满分
有些人是4分或者3分
4分就是写的比较短 3分的可能的确是
太短了
或者你根本就没有写完的
大家都是这样
正确性测试也是5分
然后这是最后一个必选部分
大家看见自己的分数
对吧
然后有一位同学是6分
其他人都小于5分
应该是没有5分的人
你提到我就给你一分
当然如果你下面隐含了这个信息
我也会给你这一分
但是下面两点是必须的
一个是你要覆盖这么多情况
比如我的
你没有F没有F 你自己得
造一个对吧
你再看一看
对不对
这样你就得覆盖掉
所有可能出现的情况
这是很重要的
接下来的话
有大概4位同学
就生成了随机的数据
我觉得这个非常好
因为我们的数据也是随机生成的
如果你能过你自己的随机数据
我们数据应该就是不重的了
对吧
但是有同学把样例复制了20万份
我觉得不太有用
因为你样例算多少份
还是那些样例
对吧
然后还有很多同学
就是详细地讲讲
遇到了什么bug
怎么痛苦的
Debug
调两天调了三天
我看到你们非常辛苦的份上
这个也是能给分的
对吧
OK
然后还有不得分的
其实同学也很多
是因为程序很简单
我的代码逻辑又很清晰
所以我写的一定是对的
但是你黑盒为什么只有10分呢
虽然很
但是自信不能给你带来分数
所以这个是不给分的
然后我写正确性测试
希望大家意识到
这样一件事情
重要性
你写的程序之后
虽然说我不要求大家写正规的
比如单元测试
或者做回归测试
这样严谨的软件功能测试
但对你写的这样一个程序
因为你要面临你未知的输入
所以你应该做
比你拿的能得到的
样例输入更多的测试
来保证你的正确性
比如凡是的生成的
随机测试的同学
肯定都是100分
然后测试的比较多的
比如
我想想比如有位同学
用认识的很多人的成绩单测了
一下
所以我不知道这是怎么样的
当然是
但是我觉得这个也很好
因为他也是满分
对吧
他是这样写的同学
一般分数就不是很高
所以这个也能看出一点关系
对吧
虽然没有因果关系
但是有些统计上的相关性
OK
复杂度分析是一个加分项
所以不要求大家都掌握
大家可以简单的听一听
首先需要定量
就是说你不能说
你不能说这个数据越多
我程序跑得越慢
这句话相当于是没说
然后很多同学
会用一些记号
打得也不错
但是需要注意
需要用标准的记号
你应该用O
或者Ω 我们应该这样记好
然后有很多同学用o
因为小o和大O的含义是不一样的
然后大家可以注意一下
接下来我们就说
比如有n条成绩 m个学期的话
时间复杂度
说为什么说
因为对于每一条成绩
我们都要做一些操作 字典的操作
每一条都是O(1)的
然后其他的操作也都是常数的
所以你就认为
他是一个O(n)的
复杂度的话
为什么
因为这个m是不一定
我生成的数据里面
虽然学期只有那么多个
但是我可以生成了有多个学期
对吧
然后如果你是
学习数量一定的话
算作O(n)的
肯定也没有什么问题
同学说了
为什么是O(n)的呢
我只有那么多
但你最早的时候
读文件的时候
如果你直接把它readline
你全部read进来的话
那显然它就数据有多大
你就用多大内存
所以有这么大的内存占用
如果你采用的方法是
for line in file
这样的读法的话
你就没有 n在哪里
你python是一行一行
主要不是一次全部读进来
所以这有一个简单的区别在这里
OK
然后还有同学实现不同
有些同学
所以他黑盒没过
但他白盒
指出了自己写的
这里我还可以给他加一分
因为他分析的很对
但是我还是希望
他能改的快一些
因为没有必要这样写
还有同学指出
空间复杂度是O(1)的
你只要能解释的通
比如你说我学期只有那么多个
对吧
说是O(1)也没有什么大问题
所以
所以也可以
OK
然后还有同学做了很多测试
然后画了图
或者列出了一张表
或者带上系数做常数分析
我觉得是非常好的一个做法
然后都有相应的加分
浮点误差
大家应该有交流
就都知道浮点误差
所以写了浮点误差的
我给了1分
或者有些人只写了误差
两个字
我肯定就没给分了
因为这道题明显是误差
反正是什么
然后有很多人提到整数
就说我一旦乘10用整数之后
就不存在精度问题
当然如果大家用python的话
整数是无限精度的
我认为这些计划没有问题
所以没有扣分
但是大家意识到整数
你如果整数来算
不一定是无限精度
因为其他语言的指数
或者说对于机器意义上的整数
总是有一个范围的
你一旦溢出的话
就没有什么精度可言
所以要可以说的明确一些
然后乘10之后
用整数算
不是减小误差
它是没有误差的
你整数来做累加
这一部分是没有误差的
有的同学说
能够减少一部分误差
那么剩下的一部分去哪里了呢
然后接下来是另外一个问题
就是就算你用整数
最后0.01还是要加的
就是说就算你用整数
我们最后还是得放宽了0.01
不然你们还是会错
这个其实是误差
不是来源于浮点运算过程中
大家如果了解一些浮点数的话
我不会具体讲
给大家简单听一听
就是还有那么几个来源
一个是你把整数
No
你把一个整数转换成浮点数的
时候
通常不会有误差
但是如果是特别的整数除外
但是如果你把一个小数
转换成浮点数的时候
一般就会产生舍入误差
有几位同学给我证明一条定理
说
舍入误差就是
一个小数能够被精确表示为
浮点数的必要条件
是
它最后一位是5
对吧
这件事情
这件事情是对的
但是其实就我们
不会用到这样结论
但是你只要能明白
就是说小数转化成浮点数
会有误差
误差称为规格化
误差
或者表示误差
然后在你过规格化之后
浮点数的加减乘除
都是有误差的
就是运算的误差
最后你要把浮点数打印出来
你一定会把它变成更短的
然后这里是存在一个
使用
或者截断的误差
如果你不使用整数
算
全程使用浮点数的话
上面三个误差你都会遇到
然后你如果只使用整数算的话
你就只会遇到两个误差
实际上运算误差
只剩一部分
就是除法的误差
但是在浮点数里面
前面两个误差是非常小的
它的相对误差
可以小到2的-5次方
所以说几乎可以忽略不计
其实我们这次的误差
更多的是一个舍入误差
就是说在python里面
也不是在python里面
在计算机浮点数系统里面
舍入这件事情的规则
一般是四舍五入 四舍六入五留双
就是我们所谓的
round to even
就是舍入到偶数
舍入到偶数位
其实是
所以
不同于我们
不同于我们四舍五入
所以这个是带来误差这一方面
还有如果你python用百分号
那样格式化的话
它做的是截断
而不是舍入
所以这里也会带来
一个差别
然后如果你想解决这个问题的话
一个是首先可以观察到
我们只要两位小数
实际上你把它乘1000
完全为整数
算做整数加减乘
做整除
你完全避免这个问题
这是用
这是最简单的一个方法
也是最快的一个方法
或者用python的decimal
我也提示到
有很多同学也写了decimal
但是有个同学写在外面
写错了
很可惜
decimal可以设置很高的精度
精度可以减少运算和表示的误差
然后接下来之后
你就
可以用一个正确的使用规则
你告诉他
我要四舍五入到两位
它就会真的给你四舍五入到两位
然后这样也没有四舍五入的误差
这样能得到一个正确的值
对
最后简单总结
可能确实有点难
有很多同学感想里面
都写到花了几天在写
然后或者说有同学一晚上没睡
我还是挺心疼的
当然
昨天一晚上没睡
看起来像是感觉到一样
OK
然后不用担心
这个分数太低
是因为分布
我们接下来还会有进一步的调整
但是得分较低的同学
千万要明白自己是怎么错的
一定要把自己的程序改到对为止
因为我们发了数据
你可以自己想把自己的程序
改到对为止
然后要明白为什么写错了
这个错应该怎么避免
然后也欢迎大家找我们
或者找小助教
小助教分数也很高
交流一下
问题
还有看了感想之后
很多人都是查文档
明白了一些东西的话
那么我完全没有说怎么用
我把东西看着弄明白
它怎么用
那我觉得好
还有人就是问同学
或者也有人问我们这个挺好的
细节
很重要
刚才我已经提到了
比如输出小数位数
你差了一位
那就是0分没有什么好说
虽然这次我们也有过
但是以后
只要我们的评测是没有问题的
就是说
哪怕你的值是对的
格式上有问题
肯定是会被判0分的
包括行末这样的细节
虽然我们在评测的时候
会去掉它
但是希望大家也要注意这个事情
OK
转换思维方式怎么说
因为有些人都提到了
我之前写C写得很痛苦
然后我python之后
对吧
我还在用C的思维来写
然后怎么写都感觉很难受
因为大家要明白
 Python这个语言
它本身的目的就在于大量程序
就是降低写程序的门槛
或者说更符合你直觉地写
所以不需要像写C那样
比较死板
有些时候更符合你直觉的写法
往往是更好的
最后一点
不要赶ddl
当然这次大家都做得很好
也希望大家大作业不要感觉到了
因为我们接下来
就不是大作业
大作业的时间会很长
有十几天
希望大家千万不要拖到最后几天做
否则你会后悔的
 OK
下个星期我们的作业
难度可能会有所增加
从包括今天的
虽然看起来比较简单
但是因为我们会有一些时间的
限制
所以难度上会有所增加
大家不用
不用特意追求满分
就是说如果你没有更好的办法
不要在那里吊死很久
OK
然后我现在大概就讲这么多
然后如果有任何黑盒的问题
请赶紧找助教
然后白盒的话对分数有疑问
白盒的把它打开网络学堂的话
我每个人都写了几句评语
可以看括号里面的有加扣分理由
或者详细的分数过程
都可以看
有问题也可以都可以
找我
接下来我不准备再加新的内容了
我们简单的回想一下
今天都学习了什么内容
其中一个主要的部分
是
我们介绍了Python的模块
模块就是
能够把各种各样的函数集合在
一起
有一定的特定功能的
这样的单元
然后我们把模块
用import的方式
把它载入进来
载入进来之后
我们就可以使用模块里边的功能
拿到一个陌生的模块
肯定会一下子出现很多函数
那么这些函数
我们要知道
这些函数是怎么用的
我们讲了
help这样一个非常有用的函数
这个help本身可以查看
这些模块里函数的
在线的帮助文档
那么
我们就可以在使用的过程中
边用边学这样的
效率是非常高的
希望同学们
有些同学
可能不太适应
这种学习方式
大家尝试一下
在学习工具的时候
特别是进行实践
实践性学习的时候
这种方式还是非常有效的
接下来我们给大家引入了numpy
我们整个的这门课
实验物理大数据方法的核心部分
它不仅这个定义了一般的
这种物理实验中数据的格式
也代表了这些数据
在程序中的
基本的表示形式
而numpy中最核心的部分
就是
对数组取索引
甚至这样的索引
可以把一维数组变成二维数组
变成了任意维的数组
它本质上在内存中并没有变
只是它访问的顺序变了
它就可以变成
各种各样数组的形式
然后我们跟大家介绍了
在这种形式下
特别是二维数组
也就是矩阵
在numpy中的一些运算
我们用pauli矩阵跟大家
大家所熟悉的物理中
非常著名的pauli矩阵
跟大家演示了一些
矩阵运算的方法
希望整个的思路
大家还都有印象
我还觉得比较清晰
那么从明天开始
我们将把我们学到的这些东西
开始真正的用上
用到这个实验物理上
然后肯定有很多
是没有学到的
那么我们就边用边学这个边学边用
在这个过程中
希望能够和同学们
一起前进
一起成长
那么今天我准备的上课的内容
就到这儿了
大家接下来可以下课
可以自由讨论
嗯谢谢

