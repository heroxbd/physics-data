#+TITLE: 数组

* 文档
** 注释
   注释由半角的“#”引出，多行注释用多个“#”：
   #+NAME: 70e65a46-9e12-4c4d-b122-dc42590a25ae
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    # 高精度整数举例
    #
    2**1000
   #+end_src

   #+RESULTS: 70e65a46-9e12-4c4d-b122-dc42590a25ae
   : 10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376

   要让程序易于被人理解，一方面应提升和打磨代码风格，让程序本身的逻辑易懂，另一方面，对不明显的程序段落，通过注释来解释。
** 函数的文档
   函数是代码复用的单元，这意味着我们经常会用到别人创作的函数，以节省精力，站在巨人或者一群小矮人的肩膀上。函数定义后紧接的字符串是它的文档，它被特殊对待，由 =help()= 读取输出：
   #+NAME: d28f616f-8011-4581-b76f-2a4e1201ff8e
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     def spherical_harmonic_fitter(grid, order):
         "求球谐函数拟合的系数"
    
         # 具体实现省略
         pass

     help(spherical_harmonic_fitter)
   #+end_src

   #+RESULTS: d28f616f-8011-4581-b76f-2a4e1201ff8e
   : Help on function spherical_harmonic_fitter in module __main__:
   : 
   : spherical_harmonic_fitter(grid, order)
   :     求球谐函数拟合的系数
   : 
   帮助告诉我们，在 “__main__” 模块（程序默认环境）的名字空间里，有这个函数。

   一行的帮助有些单薄。函数的文档，由他人使用，文档写得越详细越好。对复杂的函数而言，函数的帮助需要长篇大论。Python 的多行字符串，正好胜任这一点。多行字符串以三个引号开始，三个引号结束，单引号双引号皆可。三引号设计恰好不与人类语言冲突。
   #+NAME: 1a8eb1cc-c051-47f1-b3cf-142b12da0378
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     def spherical_harmonic_fitter(grid, order):
         '''
         求球谐函数拟合的系数
    
         输入
         ~~~
         grid: 球面上连续函数在固定格点上的取值
         order: 拟合时球谐函数近似截断的阶数
    
         输出
         ~~~
         拟合系数矩阵
         '''
    
         # 具体实现省略
         pass

     help(spherical_harmonic_fitter)
   #+end_src

   #+RESULTS: 1a8eb1cc-c051-47f1-b3cf-142b12da0378
   #+begin_example
   Help on function spherical_harmonic_fitter in module __main__:

   spherical_harmonic_fitter(grid, order)
       求球谐函数拟合的系数

       输入
       ~~~
       grid: 球面上连续函数在固定格点上的取值
       order: 拟合时球谐函数近似截断的阶数

       输出
       ~~~
       拟合系数矩阵

   #+end_example
   这个例子里，我们把文档写得更加详细。不仅有标题，还详细注明了输入和输出的含义。调用函数的人——可能是队友也可能是未来的自己——应当在不阅读的原代码的前提下，顺利使用它们。即使在写作程序时，感觉很显然，也应该认真撰写文档。在例子中，我们用多行字符串写出，函数在固定格点上取值，定义了输入变量 order 的含义，输出的意义是系统。
** 标准库中的文档
   Python 的标准库非常重视文档，几乎所有的函数都带有详细的排版精美的多行字符串说明。
   #+NAME: ee4df6b1-62ca-42c5-8306-22f8d088f66a
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     help(int)
   #+end_src

   #+RESULTS: ee4df6b1-62ca-42c5-8306-22f8d088f66a
   #+begin_example
   Help on class int in module builtins:

   class int(object)
    |  int([x]) -> integer
    |  int(x, base=10) -> integer
    |  
    |  Convert a number or string to an integer, or return 0 if no arguments
    |  are given.  If x is a number, return x.__int__().  For floating point
    |  numbers, this truncates towards zero.
    |  
    |  If x is not a number or if base is given, then x must be a string,
    |  bytes, or bytearray instance representing an integer literal in the
    |  given base.  The literal can be preceded by '+' or '-' and be surrounded
    |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    |  Base 0 means to interpret the base from the string as an integer literal.
    |  >>> int('0b100', base=0)
    |  4
    |  
    |  Built-in subclasses:
    |      bool
    |  
    |  Methods defined here:
    |  
    |  __abs__(self, /)
    |      abs(self)
    |  
    |  __add__(self, value, /)
    |      Return self+value.
    |  
    |  __and__(self, value, /)
    |      Return self&value.
    |  
    |  __bool__(self, /)
    |      self != 0
    |  
    |  __ceil__(...)
    |      Ceiling of an Integral returns itself.
    |  
    |  __divmod__(self, value, /)
    |      Return divmod(self, value).
    |  
    |  __eq__(self, value, /)
    |      Return self==value.
    |  
    |  __float__(self, /)
    |      float(self)
    |  
    |  __floor__(...)
    |      Flooring an Integral returns itself.
    |  
    |  __floordiv__(self, value, /)
    |      Return self//value.
    |  
    |  __format__(self, format_spec, /)
    |      Default object formatter.
    |  
    |  __ge__(self, value, /)
    |      Return self>=value.
    |  
    |  __getattribute__(self, name, /)
    |      Return getattr(self, name).
    |  
    |  __getnewargs__(self, /)
    |  
    |  __gt__(self, value, /)
    |      Return self>value.
    |  
    |  __hash__(self, /)
    |      Return hash(self).
    |  
    |  __index__(self, /)
    |      Return self converted to an integer, if self is suitable for use as an index into a list.
    |  
    |  __int__(self, /)
    |      int(self)
    |  
    |  __invert__(self, /)
    |      ~self
    |  
    |  __le__(self, value, /)
    |      Return self<=value.
    |  
    |  __lshift__(self, value, /)
    |      Return self<<value.
    |  
    |  __lt__(self, value, /)
    |      Return self<value.
    |  
    |  __mod__(self, value, /)
    |      Return self%value.
    |  
    |  __mul__(self, value, /)
    |      Return self*value.
    |  
    |  __ne__(self, value, /)
    |      Return self!=value.
    |  
    |  __neg__(self, /)
    |      -self
    |  
    |  __or__(self, value, /)
    |      Return self|value.
    |  
    |  __pos__(self, /)
    |      +self
    |  
    |  __pow__(self, value, mod=None, /)
    |      Return pow(self, value, mod).
    |  
    |  __radd__(self, value, /)
    |      Return value+self.
    |  
    |  __rand__(self, value, /)
    |      Return value&self.
    |  
    |  __rdivmod__(self, value, /)
    |      Return divmod(value, self).
    |  
    |  __repr__(self, /)
    |      Return repr(self).
    |  
    |  __rfloordiv__(self, value, /)
    |      Return value//self.
    |  
    |  __rlshift__(self, value, /)
    |      Return value<<self.
    |  
    |  __rmod__(self, value, /)
    |      Return value%self.
    |  
    |  __rmul__(self, value, /)
    |      Return value*self.
    |  
    |  __ror__(self, value, /)
    |      Return value|self.
    |  
    |  __round__(...)
    |      Rounding an Integral returns itself.
    |      Rounding with an ndigits argument also returns an integer.
    |  
    |  __rpow__(self, value, mod=None, /)
    |      Return pow(value, self, mod).
    |  
    |  __rrshift__(self, value, /)
    |      Return value>>self.
    |  
    |  __rshift__(self, value, /)
    |      Return self>>value.
    |  
    |  __rsub__(self, value, /)
    |      Return value-self.
    |  
    |  __rtruediv__(self, value, /)
    |      Return value/self.
    |  
    |  __rxor__(self, value, /)
    |      Return value^self.
    |  
    |  __sizeof__(self, /)
    |      Returns size in memory, in bytes.
    |  
    |  __sub__(self, value, /)
    |      Return self-value.
    |  
    |  __truediv__(self, value, /)
    |      Return self/value.
    |  
    |  __trunc__(...)
    |      Truncating an Integral returns itself.
    |  
    |  __xor__(self, value, /)
    |      Return self^value.
    |  
    |  as_integer_ratio(self, /)
    |      Return integer ratio.
    |      
    |      Return a pair of integers, whose ratio is exactly equal to the original int
    |      and with a positive denominator.
    |      
    |      >>> (10).as_integer_ratio()
    |      (10, 1)
    |      >>> (-10).as_integer_ratio()
    |      (-10, 1)
    |      >>> (0).as_integer_ratio()
    |      (0, 1)
    |  
    |  bit_length(self, /)
    |      Number of bits necessary to represent self in binary.
    |      
    |      >>> bin(37)
    |      '0b100101'
    |      >>> (37).bit_length()
    |      6
    |  
    |  conjugate(...)
    |      Returns self, the complex conjugate of any int.
    |  
    |  to_bytes(self, /, length, byteorder, *, signed=False)
    |      Return an array of bytes representing an integer.
    |      
    |      length
    |        Length of bytes object to use.  An OverflowError is raised if the
    |        integer is not representable with the given number of bytes.
    |      byteorder
    |        The byte order used to represent the integer.  If byteorder is 'big',
    |        the most significant byte is at the beginning of the byte array.  If
    |        byteorder is 'little', the most significant byte is at the end of the
    |        byte array.  To request the native byte order of the host system, use
    |        `sys.byteorder' as the byte order value.
    |      signed
    |        Determines whether two's complement is used to represent the integer.
    |        If signed is False and a negative integer is given, an OverflowError
    |        is raised.
    |  
    |  ----------------------------------------------------------------------
    |  Class methods defined here:
    |  
    |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
    |      Return the integer represented by the given array of bytes.
    |      
    |      bytes
    |        Holds the array of bytes to convert.  The argument must either
    |        support the buffer protocol or be an iterable object producing bytes.
    |        Bytes and bytearray are examples of built-in objects that support the
    |        buffer protocol.
    |      byteorder
    |        The byte order used to represent the integer.  If byteorder is 'big',
    |        the most significant byte is at the beginning of the byte array.  If
    |        byteorder is 'little', the most significant byte is at the end of the
    |        byte array.  To request the native byte order of the host system, use
    |        `sys.byteorder' as the byte order value.
    |      signed
    |        Indicates whether two's complement is used to represent the integer.
    |  
    |  ----------------------------------------------------------------------
    |  Static methods defined here:
    |  
    |  __new__(*args, **kwargs) from builtins.type
    |      Create and return a new object.  See help(type) for accurate signature.
    |  
    |  ----------------------------------------------------------------------
    |  Data descriptors defined here:
    |  
    |  denominator
    |      the denominator of a rational number in lowest terms
    |  
    |  imag
    |      the imaginary part of a complex number
    |  
    |  numerator
    |      the numerator of a rational number in lowest terms
    |  
    |  real
    |      the real part of a complex number

   #+end_example

   Python 的[[https://docs.python.org/3/][文档网站]]的内容，就是由这些代码中的函数文档生成。这种把人类可读和机器可读的文字写在一起的思想，叫做“literate programming”，目标是让程序既适合被机器执行，也适合被人类阅读。修改程序与修改文档要保持同步。相反，如果程序与文档写在不同地方，甚至由不同的人来撰写，那么大概率经年累月，它们会有很大出入，使用文档失去了应有的价值。因此从一开始贯彻 literate programming 的原则，有助于长远的程序可读性和易用性，注意体会其中的“一次”原则：文档和程序在说同一件事情，我们只在一个地方把它们全都写出来。
   在通过书籍或课程系统性地对 Python 语言和环境的整形把握之后， 随手查阅 =help()= 所得的在线帮助非常实用，是灵活的“工具书”。我们有了基础之后，可以借助这个强大的帮助系统边学边用，学习和工作效率都会很高。

* Python 模块
  Python 的模块是把函数等聚集起来的名字空间，由目录或者文件划定。它既可以由 Python 实现，也可以由 C 和 Fortran 等编译语言实现。半个多世纪积累下来的优秀程序，大多可以以 Python 模块的形式出现，被复用，实践“一次”原则。
  Python 的模块都具有详实的在线帮助。
  #+NAME: 58fb5fcf-35e8-4e0c-9728-79e4f0d0c4bc
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    import math
    help(math)
  #+end_src

  #+RESULTS: 58fb5fcf-35e8-4e0c-9728-79e4f0d0c4bc
  #+begin_example
  Help on module math:

  NAME
      math

  MODULE REFERENCE
      https://docs.python.org/3.9/library/math

      The following documentation is automatically generated from the Python
      source files.  It may be incomplete, incorrect or include features that
      are considered implementation detail and may vary between Python
      implementations.  When in doubt, consult the module reference at the
      location listed above.

  DESCRIPTION
      This module provides access to the mathematical functions
      defined by the C standard.

  FUNCTIONS
      acos(x, /)
          Return the arc cosine (measured in radians) of x.

          The result is between 0 and pi.

      acosh(x, /)
          Return the inverse hyperbolic cosine of x.

      asin(x, /)
          Return the arc sine (measured in radians) of x.

          The result is between -pi/2 and pi/2.

      asinh(x, /)
          Return the inverse hyperbolic sine of x.

      atan(x, /)
          Return the arc tangent (measured in radians) of x.

          The result is between -pi/2 and pi/2.

      atan2(y, x, /)
          Return the arc tangent (measured in radians) of y/x.

          Unlike atan(y/x), the signs of both x and y are considered.

      atanh(x, /)
          Return the inverse hyperbolic tangent of x.

      ceil(x, /)
          Return the ceiling of x as an Integral.

          This is the smallest integer >= x.

      comb(n, k, /)
          Number of ways to choose k items from n items without repetition and without order.

          Evaluates to n! / (k! * (n - k)!) when k <= n and evaluates
          to zero when k > n.

          Also called the binomial coefficient because it is equivalent
          to the coefficient of k-th term in polynomial expansion of the
          expression (1 + x)**n.

          Raises TypeError if either of the arguments are not integers.
          Raises ValueError if either of the arguments are negative.

      copysign(x, y, /)
          Return a float with the magnitude (absolute value) of x but the sign of y.

          On platforms that support signed zeros, copysign(1.0, -0.0)
          returns -1.0.

      cos(x, /)
          Return the cosine of x (measured in radians).

      cosh(x, /)
          Return the hyperbolic cosine of x.

      degrees(x, /)
          Convert angle x from radians to degrees.

      dist(p, q, /)
          Return the Euclidean distance between two points p and q.

          The points should be specified as sequences (or iterables) of
          coordinates.  Both inputs must have the same dimension.

          Roughly equivalent to:
              sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))

      erf(x, /)
          Error function at x.

      erfc(x, /)
          Complementary error function at x.

      exp(x, /)
          Return e raised to the power of x.

      expm1(x, /)
          Return exp(x)-1.

          This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.

      fabs(x, /)
          Return the absolute value of the float x.

      factorial(x, /)
          Find x!.

          Raise a ValueError if x is negative or non-integral.

      floor(x, /)
          Return the floor of x as an Integral.

          This is the largest integer <= x.

      fmod(x, y, /)
          Return fmod(x, y), according to platform C.

          x % y may differ.

      frexp(x, /)
          Return the mantissa and exponent of x, as pair (m, e).

          m is a float and e is an int, such that x = m * 2.**e.
          If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.

      fsum(seq, /)
          Return an accurate floating point sum of values in the iterable seq.

          Assumes IEEE-754 floating point arithmetic.

      gamma(x, /)
          Gamma function at x.

      gcd(*integers)
          Greatest Common Divisor.

      hypot(...)
          hypot(*coordinates) -> value

          Multidimensional Euclidean distance from the origin to a point.

          Roughly equivalent to:
              sqrt(sum(x**2 for x in coordinates))

          For a two dimensional point (x, y), gives the hypotenuse
          using the Pythagorean theorem:  sqrt(x*x + y*y).

          For example, the hypotenuse of a 3/4/5 right triangle is:

              >>> hypot(3.0, 4.0)
              5.0

      isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
          Determine whether two floating point numbers are close in value.

            rel_tol
              maximum difference for being considered "close", relative to the
              magnitude of the input values
            abs_tol
              maximum difference for being considered "close", regardless of the
              magnitude of the input values

          Return True if a is close in value to b, and False otherwise.

          For the values to be considered close, the difference between them
          must be smaller than at least one of the tolerances.

          -inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
          is, NaN is not close to anything, even itself.  inf and -inf are
          only close to themselves.

      isfinite(x, /)
          Return True if x is neither an infinity nor a NaN, and False otherwise.

      isinf(x, /)
          Return True if x is a positive or negative infinity, and False otherwise.

      isnan(x, /)
          Return True if x is a NaN (not a number), and False otherwise.

      isqrt(n, /)
          Return the integer part of the square root of the input.

      lcm(*integers)
          Least Common Multiple.

      ldexp(x, i, /)
          Return x * (2**i).

          This is essentially the inverse of frexp().

      lgamma(x, /)
          Natural logarithm of absolute value of Gamma function at x.

      log(...)
          log(x, [base=math.e])
          Return the logarithm of x to the given base.

          If the base not specified, returns the natural logarithm (base e) of x.

      log10(x, /)
          Return the base 10 logarithm of x.

      log1p(x, /)
          Return the natural logarithm of 1+x (base e).

          The result is computed in a way which is accurate for x near zero.

      log2(x, /)
          Return the base 2 logarithm of x.

      modf(x, /)
          Return the fractional and integer parts of x.

          Both results carry the sign of x and are floats.

      nextafter(x, y, /)
          Return the next floating-point value after x towards y.

      perm(n, k=None, /)
          Number of ways to choose k items from n items without repetition and with order.

          Evaluates to n! / (n - k)! when k <= n and evaluates
          to zero when k > n.

          If k is not specified or is None, then k defaults to n
          and the function returns n!.

          Raises TypeError if either of the arguments are not integers.
          Raises ValueError if either of the arguments are negative.

      pow(x, y, /)
          Return x**y (x to the power of y).

      prod(iterable, /, *, start=1)
          Calculate the product of all the elements in the input iterable.

          The default start value for the product is 1.

          When the iterable is empty, return the start value.  This function is
          intended specifically for use with numeric values and may reject
          non-numeric types.

      radians(x, /)
          Convert angle x from degrees to radians.

      remainder(x, y, /)
          Difference between x and the closest integer multiple of y.

          Return x - n*y where n*y is the closest integer multiple of y.
          In the case where x is exactly halfway between two multiples of
          y, the nearest even value of n is used. The result is always exact.

      sin(x, /)
          Return the sine of x (measured in radians).

      sinh(x, /)
          Return the hyperbolic sine of x.

      sqrt(x, /)
          Return the square root of x.

      tan(x, /)
          Return the tangent of x (measured in radians).

      tanh(x, /)
          Return the hyperbolic tangent of x.

      trunc(x, /)
          Truncates the Real x to the nearest Integral toward 0.

          Uses the __trunc__ magic method.

      ulp(x, /)
          Return the value of the least significant bit of the float x.

  DATA
      e = 2.718281828459045
      inf = inf
      nan = nan
      pi = 3.141592653589793
      tau = 6.283185307179586

  FILE
      /usr/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so


  #+end_example
  在 REPL 环境中，我们还可以输入 =math.= 后，按 TAB 建来给出后面可能接的函数，非常有助于去探索一个新的模块。看到不明白含义的 TAB 提示，配合 =help= 即可迅速掌握。
  #+NAME: 88887ff3-44c4-42b0-86ba-e8f1836ef1ca
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    help(math.gcd)
  #+end_src

  #+RESULTS: 88887ff3-44c4-42b0-86ba-e8f1836ef1ca
  : Help on built-in function gcd in module math:
  : 
  : gcd(*integers)
  :     Greatest Common Divisor.
  : 
  可发现性，是 Python 易于入门的重要特征。

  装载模块时，能够自定义名称，缩短程序的长度来增强可读性。
  #+NAME: e3030744-e26c-4ce4-9589-aecbaad062e3
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    import math as m
    m.factorial(10)
  #+end_src

  #+RESULTS: e3030744-e26c-4ce4-9589-aecbaad062e3
  : 3628800

** 多层模块的加载
   当模块中的内容很多时，会被安排在不同层次的名字空间中。有多种等价的方法访问它们：
   #+NAME: a6e8d710-386b-404c-be93-34df4fc4643f
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     import os
     from os.path import abspath
     from os.path import abspath as absp
     abspath is os.path.abspath, abspath is absp
   #+end_src

   #+RESULTS: a6e8d710-386b-404c-be93-34df4fc4643f
   : (True, True)
   =os.path.abspath= 是 os 模块的 path 子模块中返回绝对路径的函数。直接使用很啰嗦，配合 =from= 会简洁很多。

* 程序的测试
  在撰写较长较复杂的程序时，我最关心的问题是，到底如何保证程序正确呢？眼睛一直盯着它，多看几遍就对了吗？不是。
  另一个相关的问题是，我已经写出一个正确的程序，但我修改完善它，如果保证从改动前后程序的逻辑不变呢？否则，如果一不小心改坏就闯祸了，还不如不完善。如何快速确认完善后的程序是好的？
  一个程序的中间结果应该当被人理解，是“透明”原则的要求，可以通过调试来确保程序的正确性。但是问题远没有这么简单，如果我们 _每次_ 都使用程序调试方法如 =print= =breakpoint= 等检查中间结果，势必会让保证程序正确性的工作变得重复乏味，成为自己的负担。
  “一次”原则应用到这里，要求我们写一个自动的测试程序，判断主程序的正确性。每次主程序有修改，都自动运行测试程序，确认原有功能是否正确。有时甚至我们在写主程序之前，应当先把测试程序写好，给定特定的输入输出，用测试程序来定义主程序的功能。当主程序需要填加新功能时，也是首先扩展测试程序，再写主程序。这种开发的方式，叫做“测试驱动的研发”。在团队分工中，可以一个人写测试程序，另一个人写主程序，实现分工。
  测试分为单元测试，用于确保某个函数的正确性，以及集成测试，用于保证程序总体（特别是各函数之间的接口）达到设计要求。研发的过程中，测试与主程序相辅相成，相互依赖着前进。
  自动测试是有效避免“祖传代码”的途径。“祖传代码”意为一个长久使用但疏于维护的程序，因为依赖旧环境执行，兼容性极差。但是没有人敢于完善它，因为修改使程序损坏的代价远高于兼容性差带来的不便，随着时间的推移，程序变得越来越不好用，也越来越不可能被修改。破局的关键是测试程序，首先要通过测试来定义清楚，什么样的结果是“改得好”，什么样是“改坏了”。随后的主体完善就有了客观标准，得以顺利进行。测试和主程序像两条腿，交替前进。缺少了测试程序，一条腿无法走路，才变成了“祖传程序”。

* 数组
  数组由 Python 的 NumPy 模块定义，含义为“numerical Python”，即 Python 数值计算工具。NumPy 起源于使用 Python 调用 Fortran 进行线性代数计算。历史上 Fortran 是最早的计算机高级语言，是编写数值计算程序的首选。几十年间，Fortran 积累了大量优质的数值计算工具库。Python 被用于科学计算时，最重要的是能无缝调用已有的 Fortran 程序，在巨人的肩膀上前进。
  NumPy 从 Fortran 的调用接口开始发展，逐步研发更高级的功能，成为了 Python 科学计算的基础，是 Python 上数值计算的“最佳工具”。所有的 Python 科学计算工具库都沿用了 NumPy 的数据结构定义。
  NumPy 还不是 Python 的标准库，需要使用
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb
    apt install python3-numpy
  #+end_src
  来安装。

** 创建数组
   #+NAME: 3be6411c-26d3-44e7-8316-3e75a3559aaf
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     import numpy as np

     nv = np.array([1,2,3,4,3,2,1])
     print(nv)
   #+end_src

   #+RESULTS: 3be6411c-26d3-44e7-8316-3e75a3559aaf
   : [1 2 3 4 3 2 1]
   =np= 是约定的 =numpy= 缩写。第一次用 =np.array= ，可以用 =help= 来查看文档学习用法。给 =np.array= 放进列表，返一个创建数组赋予 =nv= 。数组的内容确认与列表一样。

** 列表与数组的区别
   自然的疑问是：既然数组与列表的内容相同，为何还要增加新的数据类型？数组要求其元素的数据类型一致，如果给了不一致的元素，元素会退化成 =object= 类型，失去大多数运算功能。
   #+NAME: 60f76fe2-d29d-4fd1-acf2-a32d815b35cd
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     print(nv.dtype)

     print(np.array([1, "a", None]).dtype)
   #+end_src

   #+RESULTS: 60f76fe2-d29d-4fd1-acf2-a32d815b35cd
   : int64
   : object
   数据类型一致的限制，换取的是数组所占空间可预测的好处。这使得它可以在计算机内存中连续存储，不仅有更高的读写效率，还可以表达更高维的结构。列表由动态链表实现，灵活但是损失了效率。
** 数组的索引
   数组的索引与列表有同样的基础语法，例如：
   #+NAME: 0ffdd86e-3b89-4081-942c-f45866ba2527
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     nv[2], nv[5:], nv[-1], nv[::2], nv[::-3]
   #+end_src

   #+RESULTS: 0ffdd86e-3b89-4081-942c-f45866ba2527
   : (3, array([2, 1]), 1, array([1, 3, 3, 1]), array([1, 4, 1]))
   =::2= 代表每两个元素取一次， =::-3= 代表从后向前每三个元素取一次。
   
   =np.arange= 可以直接生连续数字的数组。
   #+NAME: 46ab0b53-8867-4c76-8c27-426aa7697de4
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     a = np.arange(10)
     print(a)
     print(a[::-1])
   #+end_src

   #+RESULTS: 46ab0b53-8867-4c76-8c27-426aa7697de4
   : [0 1 2 3 4 5 6 7 8 9]
   : [9 8 7 6 5 4 3 2 1 0]

** 二维数组与矩阵
   二维数组，先在第一个维度（比如行）排列元素，再在第二个维度排列，与一维数组无本质区别。这样的方法能直接推广到 N 维数组，按维度先后排列元素。
   二维数组可与矩阵等同，我们来构造一个单位矩阵。
   #+NAME: 21d4029c-32f0-4e88-86e5-00c91d833772
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     identity = np.array([[1, 0], [0, 1]])
     print(identity)
   #+end_src

   #+RESULTS: 21d4029c-32f0-4e88-86e5-00c91d833772
   : [[1 0]
   :  [0 1]]

   嵌套的列表，先写第一行，再写第二行，可以排成需要的数组。访问二维数组的元素时，下标先写第一个维度，再写第二个。或者先写第一个下标，获得它所指定的一维数组后，再取下标。
   #+NAME: b4c6f469-21a6-448f-b80b-d42b09a84ca6
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     print(identity[0, 1])
     print(identity[0, 1] is identity[0][1], identity[0, 1] == identity[0][1])
   #+end_src

   #+RESULTS: b4c6f469-21a6-448f-b80b-d42b09a84ca6
   : 0
   : False True
   前一种方法是从二维数组中取元素，后一种是先生成一个复制了的一维数组，再取其中的元素，因此 =is= 判断给出 =False= ，但它们相等。

   矩阵的类型是 =numpy.ndarray=
   #+NAME: 4d8baeba-40c0-4f09-971c-9eb1b72a9856
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     type(identity)
   #+end_src

   #+RESULTS: 4d8baeba-40c0-4f09-971c-9eb1b72a9856
   : <class 'numpy.ndarray'>
   任意数组都是这个类型。

** 数组的生成
   用列表把数组元素一个一个写出来较繁琐，多维数组更甚。 NumPy 提供一些生成数组的函数，最简单的生成全1和全0数组。
   #+NAME: a609ecc8-a57b-4222-8733-2a60b60f4b46
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     print(np.ones((3, 3)))
     print(np.zeros((3, 4)))
   #+end_src

   #+RESULTS: a609ecc8-a57b-4222-8733-2a60b60f4b46
   : [[1. 1. 1.]
   :  [1. 1. 1.]
   :  [1. 1. 1.]]
   : [[0. 0. 0. 0.]
   :  [0. 0. 0. 0.]
   :  [0. 0. 0. 0.]]

   单位矩阵用 =np.eye= 生成， =help(np.eye)= 可查更多的参数，例如
   #+NAME: 18364563-35f2-4216-ba41-22e0393081dc
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     print(np.eye(4))
     print(np.eye(4, k=2))
   #+end_src

   #+RESULTS: 18364563-35f2-4216-ba41-22e0393081dc
   : [[1. 0. 0. 0.]
   :  [0. 1. 0. 0.]
   :  [0. 0. 1. 0.]
   :  [0. 0. 0. 1.]]
   : [[0. 0. 1. 0.]
   :  [0. 0. 0. 1.]
   :  [0. 0. 0. 0.]
   :  [0. 0. 0. 0.]]

** 索引综合练习
   熟练使用索引，是发挥数组强大功能的基础。生成一个 (10, 10) 的矩阵。
   #+NAME: a0f12aa0-3e93-40ef-9ef2-7d7094e45570
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     square = np.arange(100)
     square.shape = (10, 10)
     print(square)
   #+end_src

   #+RESULTS: a0f12aa0-3e93-40ef-9ef2-7d7094e45570
   #+begin_example
   [[ 0  1  2  3  4  5  6  7  8  9]
    [10 11 12 13 14 15 16 17 18 19]
    [20 21 22 23 24 25 26 27 28 29]
    [30 31 32 33 34 35 36 37 38 39]
    [40 41 42 43 44 45 46 47 48 49]
    [50 51 52 53 54 55 56 57 58 59]
    [60 61 62 63 64 65 66 67 68 69]
    [70 71 72 73 74 75 76 77 78 79]
    [80 81 82 83 84 85 86 87 88 89]
    [90 91 92 93 94 95 96 97 98 99]]
   #+end_example

   我首先生成了一个长度为 100 的一维数组，随后在保持数据不变的前提下，把它的形状改成了 (10, 10) ，即把它解读成二维方阵。这个操作也可以调用 =reshape= 函数实现。
   #+NAME: 2e0cc2ad-6f6f-4e74-bc4b-ea849d7e4949
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     np.arange(100).reshape((10, 10))
   #+end_src

   #+RESULTS: 2e0cc2ad-6f6f-4e74-bc4b-ea849d7e4949
   #+begin_example
   array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
          [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
          [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
          [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
          [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
          [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
          [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
          [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
          [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],
          [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])
   #+end_example
   这个操作有一处反直觉的地方：当我们在数学上定义向量、矩阵、张量时，它的维度已经固定了。但是计算机不论存储多少维的数组，本质都是线性一维的，8GB 的内存就是有从0到80亿的位置线性排列。高维数组不过是把多个标号整齐地一一映射到一维空间而已，是一维数组的另一种形式的表征。例如 (10, 10) 的二维数组，第一个指标增加1时对应内存中的地址加10，第二个指标加1时对应的地址加1。这体现了一种重要原理性的构造思想：简单的数据结构，配合不同的描述，衍生出丰富的形式。这种方法可以构造多阶的张量。


   取数组的第0列的所有行，
   #+NAME: bc27e5f3-3434-4a48-a220-94a94b067d5c
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     square[:, 0]
   #+end_src

   #+RESULTS: bc27e5f3-3434-4a48-a220-94a94b067d5c
   : array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])
   
   取标号为3的倍数的行和5的倍数的列，
   #+NAME: 7b8f6c80-c98d-4b02-b4e2-209bcca3b536
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     square[::3, ::5]
   #+end_src

   #+RESULTS: 7b8f6c80-c98d-4b02-b4e2-209bcca3b536
   : array([[ 0,  5],
   :        [30, 35],
   :        [60, 65],
   :        [90, 95]])
   倒过来取列
   #+NAME: 2a003742-242a-4fc6-96e0-c757b8e8e608
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     square[::3, ::-1]
   #+end_src

   #+RESULTS: 2a003742-242a-4fc6-96e0-c757b8e8e608
   : array([[ 9,  8,  7,  6,  5,  4,  3,  2,  1,  0],
   :        [39, 38, 37, 36, 35, 34, 33, 32, 31, 30],
   :        [69, 68, 67, 66, 65, 64, 63, 62, 61, 60],
   :        [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]])

   从第2行开始，每3行取一次，同时取第3到5列（左闭右开），
   #+NAME: 9e60cb6a-6ad5-4849-84c4-4f3af3cdfedd
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     square[2::3, 3:5]
   #+end_src

   #+RESULTS: 9e60cb6a-6ad5-4849-84c4-4f3af3cdfedd
   : array([[23, 24],
   :        [53, 54],
   :        [83, 84]])

** 数组运算
    数组可进行各类运算，如取平方，
    #+NAME: e7836625-8b17-41b4-8f50-1659ff7a71c2
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      square ** 2
    #+end_src

    #+RESULTS: e7836625-8b17-41b4-8f50-1659ff7a71c2
    #+begin_example
    array([[   0,    1,    4,    9,   16,   25,   36,   49,   64,   81],
           [ 100,  121,  144,  169,  196,  225,  256,  289,  324,  361],
           [ 400,  441,  484,  529,  576,  625,  676,  729,  784,  841],
           [ 900,  961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521],
           [1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401],
           [2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481],
           [3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761],
           [4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241],
           [6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921],
           [8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801]])
    #+end_example
    是把数组的每个元素都平方了。对比二重循环的实现，
    #+NAME: 7eddd29a-84cc-4f80-99b7-dacd026c592d
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      for r in square:
          for c in r:
              print(c**2, end=" ")
          print()
    #+end_src

    #+RESULTS: 7eddd29a-84cc-4f80-99b7-dacd026c592d
    #+begin_example
    0 1 4 9 16 25 36 49 64 81 
    100 121 144 169 196 225 256 289 324 361 
    400 441 484 529 576 625 676 729 784 841 
    900 961 1024 1089 1156 1225 1296 1369 1444 1521 
    1600 1681 1764 1849 1936 2025 2116 2209 2304 2401 
    2500 2601 2704 2809 2916 3025 3136 3249 3364 3481 
    3600 3721 3844 3969 4096 4225 4356 4489 4624 4761 
    4900 5041 5184 5329 5476 5625 5776 5929 6084 6241 
    6400 6561 6724 6889 7056 7225 7396 7569 7744 7921 
    8100 8281 8464 8649 8836 9025 9216 9409 9604 9801 
    #+end_example
    数组的表达非常直观，而且更本质。

    对数组的元素做加法
    #+NAME: 83f5d292-faf9-4796-b0c5-635c015e0e3b
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      square[::-1, ::-1] + square
    #+end_src

    #+RESULTS: 83f5d292-faf9-4796-b0c5-635c015e0e3b
    #+begin_example
    array([[99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99],
           [99, 99, 99, 99, 99, 99, 99, 99, 99, 99]])
    #+end_example
    结合索引的倒取，非常直观地构造出了较复杂的运算，对多个数字操作，形式上与一个数一样。NumPy 的便利性，使用得当，容易表达出简洁优美的运算逻辑。初学者值得适合在线文档多多练习。

    相比于按元素运算，总结性运算是把数组化成低维的，极端情形是化成0维，即数字。例如，取平均、中位数与总和，
    #+NAME: 598dfeb9-1311-4caf-aece-3406ef29a1b1
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      np.mean(square), np.median(square), np.sum(square)
    #+end_src

    #+RESULTS: 598dfeb9-1311-4caf-aece-3406ef29a1b1
    : (49.5, 49.5, 4950)

    可选只针对一个维度，使用 axis 参数。
    #+NAME: 6b32e0ad-4671-4e8e-a7de-0d3f47ad5056
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      np.sum(square, axis=0), np.mean(square, axis=1)
    #+end_src

    #+RESULTS: 6b32e0ad-4671-4e8e-a7de-0d3f47ad5056
    : (array([450, 460, 470, 480, 490, 500, 510, 520, 530, 540]),
    :  array([ 4.5, 14.5, 24.5, 34.5, 44.5, 54.5, 64.5, 74.5, 84.5, 94.5]))

    同样方法推广到3维数组，3阶张量，
    #+NAME: 87ef8f70-c2e4-4b49-a21c-3d8d5c66d2c6
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      cube = np.arange(64).reshape((4, 4, 4))
      np.sum(cube, axis=0)
    #+end_src

    #+RESULTS: 87ef8f70-c2e4-4b49-a21c-3d8d5c66d2c6
    : array([[ 96, 100, 104, 108],
    :        [112, 116, 120, 124],
    :        [128, 132, 136, 140],
    :        [144, 148, 152, 156]])
    对第0维求和，就还剩两个维度，组成矩阵。也可以对两个维度操作
    #+NAME: fde5680d-8444-4d97-ba3a-3ea9091dfffd
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      np.sum(cube, axis=(0, 1))
    #+end_src

    #+RESULTS: fde5680d-8444-4d97-ba3a-3ea9091dfffd
    : array([480, 496, 512, 528])

** Pauli 矩阵运算练习
   定义三个 Pauli 矩阵，并放到列表里。

   #+NAME: 7e7cb6d7-68ac-40cd-9343-74579d57bac9
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     pauli = []
     pauli.append(np.array([0,1,1,0]).reshape(2,2))
     pauli.append(np.array([0,-1j,1j,0]).reshape(2,2))
     pauli.append(np.array([1,0,0,-1]).reshape(2,2))
     for m in pauli:
         print(m)
   #+end_src

   #+RESULTS: 7e7cb6d7-68ac-40cd-9343-74579d57bac9
   : [[0 1]
   :  [1 0]]
   : [[ 0.+0.j -0.-1.j]
   :  [ 0.+1.j  0.+0.j]]
   : [[ 1  0]
   :  [ 0 -1]]
   
   =1j= 是由 Python 定义的虚数单位。

   Pauli 矩阵的平方都是单位阵。
   #+NAME: 606582ed-21d4-46d6-828b-4f12104218b2
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     for m in pauli:
         print(np.dot(m, m))
   #+end_src

   #+RESULTS: 606582ed-21d4-46d6-828b-4f12104218b2
   : [[1 0]
   :  [0 1]]
   : [[1.+0.j 0.+0.j]
   :  [0.+0.j 1.+0.j]]
   : [[1 0]
   :  [0 1]]
   
   它们的对易关系是 Pauli 矩阵的核心性质。
   #+NAME: bf735235-35c0-445c-b4cd-56244d678747
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     def commute(a, b):
         '''
         给出 a, b 的对易子 [a, b]:=ab - ba
         '''
         return np.dot(a, b) - np.dot(b, a)
     for i in range(3):
         l = (i+1) % 3
         m = (i+2) % 3
         if np.all(commute(pauli[i], pauli[l]) == 2j * pauli[m]):
             print(f"[ pauli_{i} , pauli_{l} ] == 2i pauli_{m}")
   #+end_src

   #+RESULTS: bf735235-35c0-445c-b4cd-56244d678747
   : [ pauli_0 , pauli_1 ] == 2i pauli_2
   : [ pauli_1 , pauli_2 ] == 2i pauli_0
   : [ pauli_2 , pauli_0 ] == 2i pauli_1

   其中 =np.all= 仅当数组所有元素都为 =True= 时返回 =True= 。

   Pauli 阵的两个特征值分别是 \(\pm 1\)，要使用 NumPy 的 linalg （意为 linear algebra）子模块的特征值函数。

   #+NAME: c8487337-f657-4d1f-8811-43347290c0c6
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     for m in pauli:
         print(np.linalg.eigvals(m))
   #+end_src

   #+RESULTS: c8487337-f657-4d1f-8811-43347290c0c6
   : [ 1. -1.]
   : [ 1.+0.j -1.+0.j]
   : [ 1. -1.]

** Python 工具的学习策略
   NumPy 的工具非常丰富，建议大家边学边用，带着问题实现程序。这样学到的东西都会马上应用。用得越多，印象越深。记得住的，都是有用的，不会学到无用的知识。因为工具实在浩如烟海，比如在Python软件库中，不下10万种工具，不可能都了解。只有学会在线调用文档，查阅和甄别学习资料是不变的。
