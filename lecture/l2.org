#+TITLE: 第三讲字符操作
* 编辑器
  编辑器是书写程序的基本环境，有一个称手的编辑器将极大提升工作效率。注意程序编辑器（editor）不是文书处理器（word processor，如 WPS，Word），排版功能对程序没有帮助。
  可用于终端的常见编辑器有 GNU nano、Vim、Emacs。

  有同学实现了vscode remote 的编辑
remote的编辑是一个
很好用的方法
因为考虑到大家在座的
大多数是windows的用户
其实有一个
列为比remote
没有那么科学的技巧是说
在你的WSL的环境里面
有一个/mnt/c
也就是说在你主机上电脑主机上
有C盘
D盘一盘这些硬盘的盘符
那么你可以通过这个路径
访问到这些
这些盘符上的文件
这样的话
如果你把这个作业上的文件
放在这些路径
你就可以在外面
使用 windows上的编辑器
比如说vscode来对 windows
比如说C盘上的文件
进行编辑
编辑了之后
从WSL的环境里面
也可以看到
这个文件
如果是高版本的
刚才的技巧是说摁住Shift
摁住Shift再点开文件夹就可以
摁住Shift再点一下文件夹
就可以带在文件夹里边
打开WSL
这样你就不用苦苦地寻找文件夹了
再一个命令行里面
那个时候打开的目录是什么
好
就是在当前目录执行的时候
是命运这种打bat
好
比较遗憾的是
我现在还
我现在不是windows用户
就不能给同学们现场展示了
今后看我们课程的时间
我们争取请 WSL
或者是 vscode remote
做得很好的同学
来展示一下
来教大家用一下
然后如果找不到这个时间
我会做出来一个
类似于 教程
至少是文字的步骤
供大家参考
那么VSCode Remote的方法
就很强大
比如说
这个Remote
它其实不是VScode特有的
比如说Remote是什么意思呢
比如说我现在在我的
我的机器上
如果我现在把它放大一下
比如说我在我的机器上
然后我SSH去到另一个
另一个机器
 SSH
然后我们之前用过
说它是安全的
远程访问
然后我看一下这里面都有什么文件
比如说我这里有preprocess.py
然后等我打一个文件
 之后，preprocess.py就在我的本地
这个窗口是我本地的编辑器
我就可以在本地看到这些
可以修改这些代码
这就是Remote的意思
这个我是可以展示
那么相对比来讲
如果在这样的一个远程的环境里
可能只有这些
在终端里面的编辑器
比如说nano
我们依旧只有这种
在这建这个样子
所以说有些时候
可能没有那么强大或者便利
所以说这些编辑器
比如终端的这些编辑器
可能只是应急的时候使用的嗯
那么如果写大段的程序
一般来说
我们还要找到
自己喜欢的编辑器
然后在远程编辑
可以使用Remote方式
比如说这种方式
好
我们回来
可能回来
我们来做一个会计量
好
昨天的话题我们就说到这
接下来我们会继续跟大家介绍
一些python的基本操作
基本操作
其实这些基本操作很多
通过例子啊
我们每个例子都实地的
在你的python环境里边试一点
就可以比较好的理解
然后如果有疑问的同学
一方面可以在课上提问
另一方面
还有我们参考书
还有参考的教程
都是非常通俗易懂的材料
所以希望同学们
结合自己的实际情况
然后看一下参考材料
那么今天我们继续来讲
比如说python的字符串的基本操作
这个字符串上次我们提到了
字符串，因为它是长度也不一定有多长
也不一定有多少个字
而且这个字符
也不一定是
传统的英文字母
所以说
它相对于硬件的底层调用
它是一项高级的工艺
那么python其实有强大的
字符串的处理的工具或者是库
那么它这个就是python的高级功能
那么我们来
进一步体会一下高级功能
都有什么
昨天在做作业的时候
我们看到了
比如说
1+2的时候
如果我们作业
如果不把它转成整形的话
就会变成这个字符串的加法
比如1+2就会加成
那么同理 A+B，加的时候
就被把它联起来
这是对于字符串的加法定义
那么其实字符串也是有乘法的
比如说
我进到我的房间里
和比如说我的一个字符串
看不太清
如果字符串我乘以8
其实这个定义
是比较符合直觉的
是吧
因为A+A，加8次
那就是8个A，那么乘以把它乘法
作为加法的一种啊快捷方式
但是它没有减法
应该是没有减法了
没有减法
对这是一个没有逆的运算
比如说这样abc成三个在这
abc X所以说这些基本操作
看似比较细节
但实际上
在应用的时候
会非常的贴心
这是一个语言比较贴心的地方
这样子做
我应该有一个
非常迅速的切换方法
好
那么这个字符串
同样可以
显示它的长度
比如说这个字符串有多长
123456它就有
长度是6
654321，它长度也是6
这个长度大家可以试验一下
比如说
 len就是length的意思
就可以得到这个字符串的长度
我还没讲到
老师我讲的太慢了
课程讲太慢了
大家可以试验一下这个长度
然后每个同学都动手试一下
试一下
会直觉上会更好一些
然后
字符串
还有一些其他比较高级的操作
比如说
比如说我想把一个句子
里边变的部分跟不变的部分分开
比如说我想
造个句子
什么东西
乘以什么东西
等于什么东西
那么
这里边这个句式是不变的
部分可以直接把它写在这里
那么它变的部分
我可以把它
用一个.format
写到后边
比如说这三就对应于第一个大括号
5对应于第二个大括号
3×5对应于第三个大括号
这样就可以把这个变量
嵌入到字符串
这个地方不仅可以是常数
也可以是变量
所以说这样的一个
语句的结果
就是3×5=15
那么字符串
它其实也可以把它的字符串
或者是自己把它拿出来
比如说
 S是这5个字符
我正在，6个字
我正在上课
句号，一共6个字符
那么从0开始
0恰好就只在
我这里
那么2~4就是012
那么就是2在上课
那么四大家注意到
这个区间是左闭右开区间
使用左闭右开区间
其实会有一个很好的好处
它的好处在于什么地方呢
比如说我想找一个
我先不用终端了啊左闭右开区间
比如说
我说2~44~66~8
那么这些区间有一定重叠
它其实是连起来的
没有重叠
那么如果是左闭右开的
在我写一些复杂的
滑动的取
它的子串的时候就会很方便
比如说我只要一个变量
就是说它等于2
那么2~4
它等于4，那就是4~6
而且他们不会有重叠
大家一会在使用中可以体会到
然后-1的意思是说
取的标号-1
代表是从后面往前面去
比如说-1
就是从前面取第一个
从逻辑上来讲
这个地方的一个空代表是
这个末尾代表是0
然后前一个是-1
再前一个是-2
这个相对的坐标还可以
试验一下
这样的坐标其实是
非常好用的
一会儿我会举一些例子
让大家体会一下
倒是大家有什么问题吗
我们试一下应该可以
应该是可以的
比如说我这一句话是
这样我把它赋一个值
对B然后我让B,format
1和3
所以说在这个字符串里边的时候
我们看到大括号
并没有特殊的含义
你给他们写成字符串的时候
00:22:47,200 --> 00:22:49,32000:22:50,640
它就是一个实实在在的字符的大括号
在当你format的时候
它会寻找大括号
分别的去匹配
这里边的数字
把它填进去
还有别的问题吗
这个format可能是一个比较新的概念
在其他的语言里边
他们的形式都不一样
没有问题
我们再来看一下
python还有一个比较特别的值
叫做none
none
它是一个比较特殊的值
它可以代表很多
或者是空或者是没有
或者是无法表达
或者是一个结果不对错了
或者是非法
这样那么都可以用none来表示
比如说
本身它因为也是一个值
比如说它本身也是一个值
那么我们可以print none
那么其他的比如说
也可以把它当做一个变量的值
赋值给变量
另外一般不用
等号，两个等号来判断
一般用这个is
这个比较符合英语的感觉
比如说
one is none 
这个是假的
那么X我们已经把它赋值成none
那么X意思那就是不是真的
那么none作为bool型
如果一个表达式返回的是none
然后我们如果对它进行判断的话
会被当做假来进行判断
 none一般到底是多少呢
none就是一个特殊的值
这个值既不属于整数
也不属于浮点数
然后就是
对
对
所以说他是在语言中
一个特别的对象
对象
这个对象一般来说
在约定来讲
可以代表没有的意思
就是他字面的这个意思
因为当然
同学们提问也是很
很可以理解的
因为他目前讲还比较抽象
今后我们会遇到这些例子
然后大家有的时候
会看到一些出错的
出错的消息
里边可能会有none
然后大家看着这个none的时候
不要太慌张
有一个印象就好
接下来我们主要来讲一下
 Python的基本的程序结构
基本的程序结构
在程序设计基础里边
大家都接触过
那么基本结构一共就有这个三种
最基本的程序结构是三种
一个就是顺序结构
顺序结构以前我们写的
今天为止我们写的这些
比如说昨天作业
它就是一个顺序结构
这一个比较好理解
就是依次的执行
前面的先执行
后边后执行
然后选择结构
就是分支
比如说
根据一个条件是否成立
安排的分支
或者说
根据一个变量取得值
分成多个分值
循环结构
那么顾名思义
就是重复执行的结构
所以说顺序结构
我们已经理解了
我们今天重点来看
选择结构
和循环结构
那么选择结构
Python里面的语法就是
if。。。else比如说在这个里边
我们来做一个判断
我们也复习一下基本运算
我们比如说有一个变量
这个变量是一个整数
然后我们要判断变量是奇数还是偶数
在python里面就可以这样写
如果这个变量
÷2取得余数
余数如果是0
0就会被看成是假的
如果取得余数是0的话
那么它就是二的倍数
所以是假的时候会到else
如果这个余数是1
那么它就不是二的倍数
它就会放到这里面
我们看到这个地方我也用到了
刚才讲的format
我们可以把这个变量
这个时候我们不知道写
就是说
我们写下这个程序的时候
不知道X是多少
那么我们也可以把变量
format到这个里面
所以说它的输出就是它不是二的倍数
这里边有一个非常重要的一点
里面非常重要的一点
是Python的缩进
我们看到我写的时候是这样的
if，它X÷2的余数这里边有一个缩进
然后else这里面有一个缩进
这个缩进
在Python中缩进去
是它的基本语法
所以说有一个强大的程序编辑器是非常重要的
比如说
nano可能就不是特别够用
我们试一下nano
比如说我刚才的文件
我用nano来做的话
我这个文件太多了
比如说我
比如这个nano
我写一下x=23
 if x能被2整除
这个时候我需要用手来打空格
那么这个空格
是1个
还是2个
还是3个还是4个
有的时候我忘了
我前面打了4个
后面打了5个
那么他就会出错
所以说有一个合适的编辑器
比如说我如果
不仅要空
还要对齐
有时候我有一个合适的编辑器的话
这个编辑器比刚才nano
更高级一些
比如说
只有一个编辑器的话
那么我直接回车的时候
他就会给我把这个弄好
他就有编辑器里面
会自带一种语义分析
比如说在这里我会说
就是说这样写的时候
我们看不仅有空格
还有括号的匹配和高量
然后比如说
他以为我打的是else
那么我打了冒号之后
他就知道我这个else
其实是和if是同一级的
那么print的时候
这样
对
这个写出你的代码
就非常的方便
考虑到很多同学
还没有把编辑器使用起来
我们今天就不做特别的要求
然后大家在大家在使用的时候
一定要注意一下
我们现在就约定空格空4个
如果你没有合适的编辑器的话
大概我们只会碰到
两三个地方
今天会碰到两三个地方
那么注意把它
写成4个空格
我们就这样约定
然后接下来我们
来把这个比较针对程序的编辑器把它配好
那么对于C语言
比如说C语言
我们对比一下
这个Python的特性
其实是非常特殊的
比如说对于C语言
我们写一个程序的话
一个空的程序啊
我们可以这样写
其实也可以这样写
没什么差别
但是对于Python来说
他一定要写成这个样子
这也是他设计是这样
因为他当时的价值观是说
反正我们鼓励C语言
写成这样的
然后这样的比较不容易理解
那么我为什么不把这个要求
放在这个程序的语法里面呢
当然这个决议也是比较有争议
但是大对于大多数的时候来说
我们有编辑器作为辅助
那么限制也没有什么太大的问题
同学们有什么问题吗
有疑问吗
有什么疑问吗
OK
回车就可以了
没问题
没问题是一样的
刚才那个同学问的是
如果我使用 i Python环境
我这里有in
然后在X=23的时候
它变成2了
它表示说是
你执行了第二个语句
这个时候x的值他还在
比如说我们x=23
他还是在
所以说这个没有问题
这样分号
如果一个意思就是说
把这些东西拿回去
可以吧
因为分号相当于一个快捷的换行
相当于多了一行
然后你打了一个分号
相当于
前面的执行完了
后边的你又打了一个分号
它后边其实是有个语句
但是你又什么都没打
说明是一个空语句
就跟你什么也不打
直接回车是一个效果
所以说你打分号
就可以让他输出消失
你的有输出
好
可能有一些细微的差别
我看
这个是有输出的
应该是这个环境
有些细微的差别
刚才我的回答是错误的
分号在不同的Python环境里面的行为
是不一样的
大家可以试验一下
自己的环境是什么样
好
选择语句就是这个样子
如果我们要打更多的选择
比如说X=23
然后我们希望X然后被3整除
等于多少
如果有三种情况
那么if 。。。else只能覆盖两种情况
我们要有第三种
python其实有一个快捷方式
X%3
等于0
比如说这个时候
我就需要手动的来打空格
我打四个空格
这个时候else if
比如说我可以打else if
但是在这里边
我可以把它，就是python中另一个保留的字
elif
elif就是else if的缩写
那么在elif里边
我可以问问他
还是除以3是等于1吗
然后我在数字这个样子
这样我们就可以把
而elif
它其实可以无限的串联
在这个地方
else也是else if
我们可以再打个elif
然后第一个是if
中间是elif，最后一个是else
就可以把它完成
我们看到按23
除以3是余2
简单的选择结构
然后到了选择结构的时候
我们应该可以做一个小作业
所谓的
对
可以
我的小作业
好吧
对
又要有作业了
我们的拆数字作业呢
我们的拆数字作业
好的
到这大家有什么问题
对
而且比如说
你有两层的if的时候
比如说你有两层if的话
我如果问
比如说这样
然后如果这个地方
1234我这个地方
我问他能够整除2的话
我要问他是否能整除4
那么这个时候
如果你的缩进是在这个地方
比如说1234
比如说到这一行
如果你的缩进是在这的话
他和它和这个语句是一起的
如果你的缩进现在这儿的话
那么它就是里层的意思
所以说对于python来说这个缩进是
代表了
这个代码处在哪个层次
我说我要是说这三个
他开始会认为什么
然后
会错的
我说
但是一第一层可以说这个事
然后你看他会说
这个indentation
indentation的意思就是缩减
然后他说缩进错误
对
有一个补充说
每层它其实只要可以对齐就行了
但是对齐你如果
一会儿是3个
一会儿是5个
而如果变长的话
对于人类的审美来说
不是很好看
所以说大家可以探索一下
这个不一样
应该也可以
我们可以试验一下
我觉得这个东西
是对齐的就行
然后他们这也是可以
嗯嗯嗯
你胡乱缩进也是可以的
但是你看看起来就不是很开心
这也是一个合法的程序
但是一般来说
我们都把它约定好
我们的课程里面
就约定打4个空格
这也是大多数文本编辑器
它默认的工作量
然后我们现在下课
忘了
下节课来做这个作业
这节课我们来一起做一下作业
 B这个事情
好
这个作业我也没做过
不知道会不会翻车
网络学堂的作业里
就Rank Guesser
在已提交未批改里
叫做小作业三
就是这样
如果没有网络学堂访问
同学可以用这个码
地址叫什么来着
这个作业在这里
如果没有无法看到网络学堂
可以看这个
或者看这里也行
让我也来做一下这个作业了
我把它克隆下来了
克隆下来之后
我们看一下作业的说明
这么长的说明
程序拥有如下行为
看来作业需要仔细阅读文档
那么我们就大家各自阅读文档
然后我在这里默默的做
好
我们继续
我们看一下
现在试试
就是这个
我打错了
你
我现在不知道我做的对不对
果然得了0分
算了
我打错了
你刚才什么问题
这么说这个程序讲的太早了
这个作业里面
有一个超纲的部分
如果有同学不理解这个框架的
我稍微讲两句
这个程序里面
有一个无限的循环
这个有while循环
不好循环是本来我
马上要讲
所以在这个作业里面
碰到了也还不错
那么while（true）的意思就是说
当这个条件成立的时候
那么执行下面的代码
等这样一个
缩进的块的结束之后
再重新看这个条件是否满足
如果满足的话
继续执行
再执行一遍这个代码
所以说
如果我们打了while（true）的话
那么后边这个条件
就是永远成立的
那么它就是一个无限的循环
就会一直执行里面代码
但对于这样的循环
我们可以通过break
把来从循环跳出来
那么如果
在循环里面遇到break
它就会把这个循环跳出来
看到break之后
那么这个程序的执行
会到 while循环的后面
所以这 while和break的意思
我刚才也拿了0分
你可以手动运行一下你的程序
这样，你可以这样运行一下你的程序
欸，死循环
还没有改
每个int里都缩进去？
不用缩进去
input就是字符串
看看哪个大哪个小
如果测试数据给你一个负数呢
我看他符合步骤吗
应该不符合
然后哪里没有更新
你刷新一下
感觉这个作业还挺好玩的
猜数字的作业
是非常经典的考验
很多程序设计基础
都是用这个作业
然后大家有什么
遇到什么问题了吗
说的都非常顺利
没有做完同学没关系
我们现在接着往下讲
刚才遇到的循环结构
这个作业没做完
没事
一会我们还有时间
我们先继续讲循环结构
python的循环结构其实有两种
一种是 for语句
一种是while语句
它有两种循环结构
除了这个和其他语言
非常像的基本功能之外
还有一些python的
特有的
非常便利的循环的用法
我们马上就会看到
其实最简单的循环结构
比如说
比如说这4条语句
我们先拿一个变量
把0赋给变量
然后循环的条件
循环条件就是说
如果变量不大于5的话
就执行下面的语句
我们看最开始 a是0的时候
它就把 a打印出来
这时候出来一个0
那么下一步是把a+1复制给a
那么a就变成了1
回过头来看
这个条件的时候
看它是不是小于5
如果小于5的话
就继续的执行下面的语句
那么print了一个1
 a就在一直累积到4的时候
他又print了一次
那么a就等于5了
等于5的时候
a就是小于5
这个语句就不成立了
他就变成了false
变成false之后
那么while的整个的循环的
这一块
就退出了
在这基本的循环结构
想必大家在大一的时候
没少写这种程序
应该还是很熟悉的
但是我们看到
用python写这种程序
跟之前的
跟之前的那个那个
条件语句是一样的
就是需要进行用缩进
来代表 while里边的语句体
大家是上一个作业
还有什么问题吗
如果没有问题的话
咱们先来看一下循环结构
因为学了循环结构之后
我们就可以做更好玩的作业了
也可以做更好玩的事情
那么for循环
它的基本用法是这样
比如说for a range 5
prinr a，我们看到
在range的意思
他是返回了一个
所谓的Iterator
中文叫做迭代器
它其实相当于
我们可以把它相当于一个指针
在比如说range5
它其实是有一个虚拟的
从0~4
注意我们的区间
都是
左闭右开的
我们说到5
那么实际上是
这个数字到4
那么我们这个range
其实就有一个假想的
注意这是假想
它实际上并没有存在
假想的从1234这样的一个内部的
一个虚拟的序列在那准备着
然后我们 for每经过一次循环
比如说第一次循环
它就会取序列的第一个
啊我们假想
这里边有一个指针在这里
然后到了第二次循环
他就会指针就会移动到1
那么a就会变成1
那么print a的时候
它就会说出的就是1
那么如果指针继续往后移动
到了最后一个数
a变成4
那么最后print会出4
每次在这一步的时候
a就获得了一个
range里面拿出来的值
然后在这个语句体里边
a拿出来的值
比如说在这一步a拿出来
就是0
在这一步a拿出来就是1
我们对比一下
这两种写法
我们看
如果用while写的话
那就得事先给a取一个初值
然后再写一个终止的条件
那么在顺着它
然后还要写出来 a每次循环要
怎样变化
但是这种循环
是非常一般性的循环
它的表现力是最强的
但是很多时候
非常常用的
这个循环
比如说1~4
这是一个非常
我们在实际生活中
经常用到的这种情况
那么python
给他有一种比较好的写法
至少从代码量上
就说我们要写四行
在这个时候我只要写两行
就可以把它完成了
有没有一行的写法
好
没有问题
好像一行的写法是有的
你说同学们可以思考一下
刚才不是从1~4这样输出的话
如果这样写循环
那么他需要写4行
如果用for循环
它可以写一行
写两行
那么有没有一行
就能把1~4写出来
大家可以思考一下
那么 X不仅可以在这个数字上
进行这样的循环
比如说
range从0~4
那么很多我们刚才
所学到的这种数据类型
大家还在玩刚才那个作业吗
我说讨论的同学
还在讨论刚才的作业吗
啊没有是吧
没有
我们先集中精力
来学习新的循环
我们可以
我们可以看到
 Python的循环
是非常具有表现力的
其中有一些设计
其实还是很优美的
我们看
比如说
我们把S给他一个字符串
那么这个字符串
其实也可以被循环来进行
比如说刚才这个字符串
我们看到字符串有下标
比如说B0的
B0的下标
就是这个字
当时是我
第二个下标是爱，第三个下标是吃
B0的第一个二
第二个是吃
那么如果我要避开这种写法
其实我直接用for循环
就可以把这个字符串里面的
每一个字符都拿出来
我们看
在这个例子里边
然后我们就for
把每一个字都拿出来
打印一次啊没打印一次就是换行
那么这个横着的我爱吃瓜
就变成了竖着的
我爱吃瓜
我们体会一下
如果是传统的写法
恐怕要这样写
就是说
我们如果要把字符串这样输出的话
那么传统来讲
我们要先设一个字符串的
索引的整数
比如说从第零个开始
我要把
所以说赋值为0
然后我让他从1
到这个字符串的长度
这么大的范围内一个索引
然后我每次整数增大
增大之后
都在这个字符串里取下标
那么这样写的话
就会出来呃
同样的效果
让我们仔细看一下
从直观上来讲
还是这样写会
更加的符合我们的直觉
因为我们的直觉里面
根本不用考虑说
比如说吃是这里边的第三个字
是第二个下标
这个句号是这里边1234多少
第8个下标
那是其实
人已经不需要考虑
我们想做的
把它每个字都输出出来
那么所以这样的写法
就显得非常的符合直觉
对
我们来看一下
刚才描述案的问题
他的问题是
刚才我的字符串
整个的就拿出来了
那么我怎么能够
从第4个开始输出
我看一下
比如这样一个字符串
如果我们输入
如果这样的话
输出是这样的
那么S刚才我们看到
这个下标下面
可以取一个范围
比如说从第二个到第三个
这个范围我们还是读从2~4
从2~4的范围就会取
第2个字符到第4个字符
但如果我们不取不写终止的字符
它其实就可以从
从第二个开始
下标为二开始取
所以说从这里边我们
这里边人类语言
就可以说
从第三个开始取
但是这个二我们可以理解为
把前两个去掉
到第二个空格的地方开始取
所以说是从第二开始取
那么从第二个
那么它就是这样的一个字符串
如果我想要
从第4个开始的
我就把它
这样写
这就是从第4个开始取
所以说这里边的组合
我们可以对先对字符串进行操作
然后再对循环进行操作
也可以先对循环进行操作
比如说刚才
刚才同学的问题是说
我如果
用这种传统的循环模式
我把标号先设成4的话
会什么样
这也没什么
那么这个range就不一样了
因为range5的时候
它总是从零开始
如果我们想从4开始
那就需要在这个地方写上4
这可能刚才没有讲
我们可以查阅
 python的手册
python的手册是可以查阅什么
我们可以可能需要查阅
比如说遇到刚才这种情况
我想这个range希望他能够从4开始
但是我不知道他的语法是什么样
我应该查哪里呢
比如说这样
他就变成了i
即使 i什么也不写也没问题
你先把I变成4
是没有作用
因为它是从range里面起去
不是零
它是从
这个字符串里边
是否有下标这回事
你就可以想象
这个字符串里面
是有一个先后的序列
然后你循环的时候
就序列第一次取
第一个拿出来
执行这段程序
然后第二次取
第二个值
执行这段程序
只有一个先后顺序
你可以忘掉1234
就相当于我有一个管子
那个管子里面
第一个是我
第二个是爱
第二第三个是吃
然后你这个循环
就是从管子里边先拿出一个
然后放在这儿
再拿出一个放在这儿
这个时候即使没有标号的概念
这个循环因素是这个意思
你就可以也这样取
你说S这样
这就是从吃瓜开始了
哪个i的结果
获得索引
这是一个好问题
获得索引可以这样写
或者说是这里边用到的一个是enumerate
他就是说本来没举
他就是给你额外又加了一个标号
刚才我们用的那种写法
是把标号扔掉的
我们直接1234
取出来
我不是1234取出来
第一个字
第二个字
第三个字取出来
但是你可有可能要倒过来想
可能我想我还是要一个标号
那么你就可以用这个
enumerate
可以这样写
也可以按刚才的那样写
就是把标号写出来
然后取它的下标
句号句号啊
同学问的问题都非常好
就让我想到了一件事情
假如说
同学们不知道该怎么写的话
应该可以看Python的官方的文档
比如说
毕竟我没办法
把所有的可能都讲到
那么如果你
自己去查Python文档的时候
可以到Python的主页上
点击
 DOC，比如Python3.7
那么你可以看到这些reference
这个定义好像还是太形式化了
好
我们先下课
这个问题我思考一下
因为经常会有同学问到这个问题
然后我就想
把这一个之前没有讲到的东西讲出来
但是这样的话就会很乱
应该给同学一种查的方法
好
刚才那个问题我反思了一下
因为经常我们在讲课过程中
有同学提问题
有可能就会
讲一些讲稿里面
没有写的东西
然后同学们可能会听着有一点乱
但是这是语言的本质了
就像我们学英语的时候
可能说着说着就会说
一个教材里面没有的词
这没有什么太好的办法
然后我刚才是希望
能够找一个参考的
参考的材料
能够让我们查到
我们想要的东西
但事实仔细想一下
应该是查不到的
比如说刚才有同学问
如果我在第一种写法里边
就要用代词的话
怎么办
可能你在百度
或者Google里面
搜索的时候
你这个问题不太好描述
比如说我要一个for循环里的
应该还是怎么样
可能
搜索不一定能搜索出来正确的结果
那么这个时候
其实还要大家
同学们互相交流
比如说一喊一嗓子
比如说问一下我要
 Index到底怎么办
可能就有会的同学就会告诉你
特别是小助教
还有助教的同学
还有我啊可以
其实这些部分
可能是我们这个课程
所不可替代的
因为我们有书
有书有这个在线的视频
有这种慕课类的视频
但为什么还要上课
可能就是这方面是没办法替代的
你要找一个什么东西
在网上找
可能需要很长时间
在论坛上问
可能要等一天
但是我们这么多同学
都聚在一起
你遇到一个什么问题
你问一下
可能就可以马上的得到结果
所以
我们就可以更快的学习和进步
这是我的课间反思的结果
那么
刚才我们提到了
 for循环和while循环的各种情况
在我们看到
在这些循环里边
都需要缩进
那么到现在为止
还有很多同学
在用默认的编辑器
那么大家可以再忍耐一天
或者是体验一天
因为这个编辑器是应急用的
今后即使你学会了nano
这种终端里的编辑器
今后也会用到
那么更高级的编辑器
我希望明天会给大家一些方案
或者是今天课后，
一会上课
有时间的话
同学可以交流一下
怎么在你现在系统里边
装一个更功能更高级一点的编辑器
那么刚才有同学问我
 Windows编辑器的 
 vscode的一些插件的问题
我就没有回答上来
因为我其实是
用 vscode的比较少
那么在座的很多同学
应该比我的知识更丰富
特别是助教陈同学
还有一些小助教
昨天探索的
很多非常高级的
