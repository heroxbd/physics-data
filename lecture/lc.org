#+Title: 第十三讲 关系代数 TODO
#+Author: 续本达
#+PROPERTY: header-args :eval never-export :exports both

* 表格数据
   我们经常遇到表格数据
   | eid | ch | wave      |
   |-----+----+-----------|
   |   0 |  0 | (0, 2, 3) |
   |   0 |  3 | (0, 0, 1) |
   |   1 |  4 | (0, 3, 1) |
   =eid= 指事例编号 event ID ， =ch= 指读数通道 =channel= 。 =eid= 的取值可达几百万，=ch= 的取值是 0 到 29 共 30 个。那么是写成表格方便，还是写成 3 维的数组方便呢？写成表格，是否违反了一次原则？
   两者都有好处，高维的数组适合静态的、整齐的和一一对应的场景，或者它们的近似情形。但是现实的实验里，有这些条件不满足的情况。数据在更多时候是动态的、参差不齐的和稀疏的。此时表格是更好的数组组织形式。表格由标号列和取值列组成，标号列对应数组的下标，而取值列对应数组的值。当值不存在时，可以省去整个标号，即 0 行；相反当一组标号对应很多值时，可悉数增加大于 1 行。这把数组从下标到值的单射关系，扩展成了自定义域变动的多值“函数”，大大增强了表现力。
   这样的做的代价是列上有重复，但是对压缩算法来说，重复造成的空间浪费完全可控。

# 略过了科学范式部分，重新整理。知识储备与技能组合
    
** 关系代数
   把表格的概念通过数学公理的构建，论证其有效性并加以推广，是 E.~F.~Codd 在 1981 年图灵奖的划时代工作。高度概括起来就是一句话：一切都是关系，关系就是表格。
   在数据格式中， CSV 和 HDF5 都可以表达表格。 CSV 能表达二维以内的数组， HDF5 能表示高维数组。关系代数要讨论数据以什么形式组织的存储。
   正则表达式是一个很好的计算机子体系的范例，它有公理体系，使得不同学科人群有天然的共同出发点，从而促进了分工合作。计算机专家能设计出更强大的执行引擎，而用户则定制具体的使用方式。价值或者体现在用户以商品和服务形式购入引擎，或者体现在创新的引擎被公开发表。关系代数正是提供了类似的体系。
** 关系概念
   所谓关系，即同一主体的多个参数之间的关系，即表格中的一行。在 NumPy 里对应复合数据类型，这些类型绑定在一起形成整体，使得表格在 NumPy 是一个逐行添加的一维数组。

# NumPy 把这个概念继续推广，允许复合数据类型本身是数组。
* SQL语言
  SQL 是 structured query language 的缩写
