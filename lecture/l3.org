#+TITLE: Python 脚本
#+author: 续本达
#+PROPERTY: header-args :eval never-export :exports both

* Python 的运行模式
  在命令行输入 python3 进入的是交互模式，每输入一个指令，都即时得到结果。这个环境称为“REPL”，即 “Read-Evaluate-Print-Loop”，命令行界面也属此类。交互界面更适合探索和试验。
  批处理模式可以批量执行命令，组成批量命令的文件叫做“脚本”，也是广义上的程序。因为脚本运行时没有 REPL 部分，可以不受人干涉，适用于处理大量数据。
  在实践中，经常在交互模式中探索出正确的指令，再把这些指令收集起来，形成脚本，自动地批处理运行。因为脚本应用于无人值守的环境，输入与输出就应当自动进行，只是根据提示交互地输入就远远不够了。
  另一种从外界给程序传递信息的方式是调用参数。Python 把调用时的参数传递给了特定的字符串列表 =sys.argv= 。通过 =sys.argv[1]= ， =sys.argv[2]= 取得第一、第二个参数。

* Python 函数
  一直以来，函数都是程序的基本组成部分，是由多段指令组成的功能单元，与数学函数有类似之处。函数给程序划分了逻辑层次，在函数内我们关注函数的实现方法，在函数外我们关注它的使用方法并重复调用，有助于实践“一次”原则。

  Python 定义函数的语法如下：
  #+NAME: 56438852-3a7b-4173-b2f3-64703c75ccf7
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    def add(x, y):
        print(f"x is {x} and y is {y}")
        return x + y  # Return values with a return statement
    add(3, 5)
  #+end_src

  #+RESULTS: 56438852-3a7b-4173-b2f3-64703c75ccf7
  : x is 3 and y is 5
  : 8
  关键字 =def= 跟一个带 =(...):= 的表达式。返回值用 =return= 给出。外部调用 =add(3,5)= 在函数的入口， =x= 和 =y= 被赋予 3 和 5。

  再举一个例子，
  #+NAME: 55304ee6-050e-4677-b4ec-d631a8f05816
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    def swap(x, y):
        return y, x
    a = '左'
    b = '右'

    print(a,b)
    a, b = swap(a,b)
    print(a,b)
  #+end_src

  #+RESULTS: 55304ee6-050e-4677-b4ec-d631a8f05816
  : 左 右
  : 右 左
  在调用 =swap()= 函数的一步， =x= 被赋予 =a= 的值“左”， =y= 被赋予“右”。经过函数计算，得到的返回值是交换的结果“右”、“左”，用于覆盖 =a= 和 =b= 的值。这个函数返回了两个值，在 Python 的内部表示为一个元组。在函数的内与外，变量有各自的定义范围，这使得我们不论从内还是从外看来，都有完整的逻辑。
*** 函数命名空间
    函数内与函数外的命名空间相互独立。看下面的例子，
    #+NAME: bafdc9e1-560f-469a-9c14-fe0b9d3d285c
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      x = 1
      def scope():
          x = 2
      scope()
      print(x)
    #+end_src

    #+RESULTS: bafdc9e1-560f-469a-9c14-fe0b9d3d285c
    : 1

    scope() 函数内的变量 x ，与外部独立。变量是由字典实现的，函数内与函数外的变量分属于不同的字典。函数从内部操作它外部的变量，是不鼓励的，一定要做时，使用 =global= 标识符：
    #+NAME: 9edd2183-3717-4b64-919c-db8cbe8beb7c
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      x = 1
      def scope():
           global x
           x = 2
      scope()
      print(x)
    #+end_src

    #+RESULTS: 9edd2183-3717-4b64-919c-db8cbe8beb7c
    : 2

*** 元组赋值
  值得注意一点， Python 可以通过对元组赋值的形式，实现元组各元素赋值。
  #+NAME: e867d63a-7914-4032-9e1a-ed3aaead8f36
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    print(a, b)
    a, b = b, a # 是 (a, b) = (b, a) 的简写
    print(a, b)
  #+end_src

  #+RESULTS: e867d63a-7914-4032-9e1a-ed3aaead8f36
  : 左 右
  : 右 左
  这使得置换变量的值非常简单直接，因为否则要引入中间变量，这样写，
  #+NAME: 9bd62b99-3a2e-44e5-bd33-b79d2f52f562
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    print(a, b)
    tmp = a
    a = b
    b = tmp
    print(a, b)
  #+end_src

  #+RESULTS: 9bd62b99-3a2e-44e5-bd33-b79d2f52f562
  : 左 右
  : 右 左
  十分不便。

*** 函数的调用
    函数可供大批量调用。使用 =map= 来自然定义一个作用在迭代器上的函数，是分别把它作用到每个元素后返回值组成的迭代器。例如把列表看作迭代器，
    #+NAME: e83d05ff-392c-4dc1-acd1-248063b9b432
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      def squared(x):
          return x*x

      list(map(squared, [1, 2, 3, 4]))
    #+end_src

    #+RESULTS: e83d05ff-392c-4dc1-acd1-248063b9b432
    : [1, 4, 9, 16]
    它把一列数字逐个取平方。 =map()= 返回的迭代器，交给 =list()= 转换成了列表输出。

    等价于直接用迭代器输入，
    #+NAME: 16d3d71a-76c3-429a-b217-7c5a8d21b7ce
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      list(map(squared, range(1, 5)))
    #+end_src

    #+RESULTS: 16d3d71a-76c3-429a-b217-7c5a8d21b7ce
    : [1, 4, 9, 16]

*** 无名函数
    如果函数名不重要，可以直接把函数无名化定义嵌入到语句中。
    #+NAME: 823dd2b0-a2f2-44ed-a87b-384c5533541b
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      list(map(lambda x: x*x, range(1,5)))
    #+end_src

    #+RESULTS: 823dd2b0-a2f2-44ed-a87b-384c5533541b
    : [1, 4, 9, 16]
    省去了函数名， =return= 等。  =lambda= 的名字来自理论计算机科学的 lambda calculus 理论，函数式程序的基础。

* 文件读取
  文本文件输入输出，可使用 =open()= 。用 for 循环可将打开的文件视为迭代器逐行读入。每次循环得到字符串可进一步处理。在 Python 当前文件夹的命令行中，下载一个文本文件样例，
  
  #+NAME: 43815ce6-6cab-4090-a0c8-55c19ac6d1e6
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb
    wget --progress=dot 'http://hep.tsinghua.edu.cn/~orv/pd/iterator.txt'
  #+end_src

  #+RESULTS: 43815ce6-6cab-4090-a0c8-55c19ac6d1e6
  #+begin_example
  --2022-07-07 10:22:24--  http://hep.tsinghua.edu.cn/~orv/pd/iterator.txt
  Resolving hep.tsinghua.edu.cn... 101.6.6.219, 2402:f000:1:416:101:6:6:219
  Connecting to hep.tsinghua.edu.cn|101.6.6.219|:80... connected.
  HTTP request sent, awaiting response... 200 OK
  Length: 268 [text/plain]
  Saving to: ‘iterator.txt’

       0K                                                       100% 37.3M=0s

  2022-07-07 10:22:24 (37.3 MB/s) - ‘iterator.txt’ saved [268/268]

  #+end_example

  使用 open() 读入，用迭代器逐行读取。
  
  #+NAME: e0c90143-dcb5-4c16-a87e-d2c4d779ab32
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    for l in open("iterator.txt"):
        print(l, end="")
  #+end_src

  #+RESULTS: e0c90143-dcb5-4c16-a87e-d2c4d779ab32
  : Iterator Types
  : 
  : Python supports a concept of iteration over containers. This is
  : implemented using two distinct methods; these are used to allow
  : user-defined classes to support iteration. Sequences, described below
  : in more detail, always support the iteration methods.

  读入的字符串带有换行符，与 =print= 叠加会有空行，因此给 =print= 传了 =end= 参数。

  写入文本文件时，令 =open()= 以写模式打开。
  #+NAME: ed8b5ee6-5276-4e67-82f8-71d64eaac126
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    f = open("log.txt", 'w')
    f.write("第一天 概论\n")
    f.write("第二天 Python 入门\n")
    f.close()
  #+end_src

  #+RESULTS: ed8b5ee6-5276-4e67-82f8-71d64eaac126
  "\n" 是换行符。在命令行中查看输出的文件，
  #+NAME: deace4df-afc7-45b4-8f03-9ae249f9ebf5
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb
    cat log.txt
  #+end_src

  #+RESULTS: deace4df-afc7-45b4-8f03-9ae249f9ebf5
  : 第一天 概论
  : 第二天 Python 入门

  有了输入输出的方法，我们可以把 Python 的字符串处理功能与程序结构、复合数据结构等结合起来，完成实用的文本处理工作。
