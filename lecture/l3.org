#+TITLE: 第四讲 Python 模块 DONE
#+author: 续本达
#+PROPERTY: header-args :eval never-export :exports both

* 准备
  - 安装 =wget=
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install wget
    #+end_src
* 程序的测试
  在撰写较长较复杂的程序时，我最关心的问题是，到底如何保证程序正确呢？眼睛一直盯着它，多看几遍就对了吗？不是。
  另一个相关的问题是，我已经写出一个正确的程序，但我修改完善它，如果保证从改动前后程序的逻辑不变呢？否则，如果一不小心改坏就闯祸了，还不如不完善。如何快速确认完善后的程序是好的？
  一个程序的中间结果应该当被人理解，是“透明”原则的要求，可以通过调试来确保程序的正确性。但是问题远没有这么简单，如果我们 _每次_ 都使用程序调试方法如 =print= =breakpoint= 等检查中间结果，势必会让保证程序正确性的工作变得重复乏味，成为自己的负担。
  “一次”原则应用到这里，要求我们写一个自动的测试程序，判断主程序的正确性。每次主程序有修改，都自动运行测试程序，确认原有功能是否正确。有时甚至我们在写主程序之前，应当先把测试程序写好，给定特定的输入输出，用测试程序来定义主程序的功能。当主程序需要填加新功能时，也是首先扩展测试程序，再写主程序。这种开发的方式，叫做“测试驱动的研发”。在团队分工中，可以一个人写测试程序，另一个人写主程序，实现分工。
  测试分为单元测试，用于确保某个函数的正确性，以及集成测试，用于保证程序总体（特别是各函数之间的接口）达到设计要求。研发的过程中，测试与主程序相辅相成，相互依赖着前进。
  自动测试是有效避免“祖传代码”的途径。“祖传代码”意为一个长久使用但疏于维护的程序，因为依赖旧环境执行，兼容性极差。但是没有人敢于完善它，因为修改使程序损坏的代价远高于兼容性差带来的不便，随着时间的推移，程序变得越来越不好用，也越来越不可能被修改。破局的关键是测试程序，首先要通过测试来定义清楚，什么样的结果是“改得好”，什么样是“改坏了”。随后的主体完善就有了客观标准，得以顺利进行。测试和主程序像两条腿，交替前进。缺少了测试程序，一条腿无法走路，才变成了“祖传程序”。
** 接口测试
   接口的定义在大规模的项目极其重要，相比之下程序的具体实现甚至不那么核心了。在练习中，一定要注意输入与输出的格式定义，不能有任何差池。透明原则中，人类理解中间结果的大前提，是机器程序的输入输出符合约定的规范。这样规范，有些不近人情，看起来一样的 “3.500000000”， “3.5e0” ， “3.4999999999” 等，如果在规范之外，就可能造成后续程序的异常。
   在复杂的大项目里，测试是解耦合的重要方法。软件工程的建议方案是，程序是否正常运行，满足输入输出要求，主要靠测试程序来对每个主程序进行单元测试，模拟上游的合法输入，模拟下游的程序验证输出的合理性。这些测试尽可能是全自动的，有助于提升团队整体的效率。
   现实世界里，在合法的范围内，输入数据也可能是千差万别。设计程序中，要考虑这种兼容性和灵活处理的空间。测试程序更应当从多种极端情形去构造测例，推动程序的兼容性。

* Python 模块
  Python 的模块是把函数等聚集起来的名字空间，由目录或者文件划定。它既可以由 Python 实现，也可以由 C 和 Fortran 等编译语言实现。半个多世纪积累下来的优秀程序，大多可以以 Python 模块的形式出现，被复用，实践“一次”原则。
  用编译语言实现 Python 的模块，效率可以比纯 Python 的高，代价是撰写代码的难度增加，尤其在无既有代码时。但有些时候，程序效率非常重要，可以考虑用 C 或 Fortran 重新实现最影响性能的 Python 模块。
  
  Python 的模块都具有详实的在线帮助。
  #+NAME: 58fb5fcf-35e8-4e0c-9728-79e4f0d0c4bc
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    import math
    help(math)
  #+end_src

  #+RESULTS: 58fb5fcf-35e8-4e0c-9728-79e4f0d0c4bc
  #+begin_example
  Help on module math:

  NAME
      math

  MODULE REFERENCE
      https://docs.python.org/3.9/library/math

      The following documentation is automatically generated from the Python
      source files.  It may be incomplete, incorrect or include features that
      are considered implementation detail and may vary between Python
      implementations.  When in doubt, consult the module reference at the
      location listed above.

  DESCRIPTION
      This module provides access to the mathematical functions
      defined by the C standard.

  FUNCTIONS
      acos(x, /)
          Return the arc cosine (measured in radians) of x.

          The result is between 0 and pi.

      acosh(x, /)
          Return the inverse hyperbolic cosine of x.

      asin(x, /)
          Return the arc sine (measured in radians) of x.

          The result is between -pi/2 and pi/2.

      asinh(x, /)
          Return the inverse hyperbolic sine of x.

      atan(x, /)
          Return the arc tangent (measured in radians) of x.

          The result is between -pi/2 and pi/2.

      atan2(y, x, /)
          Return the arc tangent (measured in radians) of y/x.

          Unlike atan(y/x), the signs of both x and y are considered.

      atanh(x, /)
          Return the inverse hyperbolic tangent of x.

      ceil(x, /)
          Return the ceiling of x as an Integral.

          This is the smallest integer >= x.

      comb(n, k, /)
          Number of ways to choose k items from n items without repetition and without order.

          Evaluates to n! / (k! * (n - k)!) when k <= n and evaluates
          to zero when k > n.

          Also called the binomial coefficient because it is equivalent
          to the coefficient of k-th term in polynomial expansion of the
          expression (1 + x)**n.

          Raises TypeError if either of the arguments are not integers.
          Raises ValueError if either of the arguments are negative.

      copysign(x, y, /)
          Return a float with the magnitude (absolute value) of x but the sign of y.

          On platforms that support signed zeros, copysign(1.0, -0.0)
          returns -1.0.

      cos(x, /)
          Return the cosine of x (measured in radians).

      cosh(x, /)
          Return the hyperbolic cosine of x.

      degrees(x, /)
          Convert angle x from radians to degrees.

      dist(p, q, /)
          Return the Euclidean distance between two points p and q.

          The points should be specified as sequences (or iterables) of
          coordinates.  Both inputs must have the same dimension.

          Roughly equivalent to:
              sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))

      erf(x, /)
          Error function at x.

      erfc(x, /)
          Complementary error function at x.

      exp(x, /)
          Return e raised to the power of x.

      expm1(x, /)
          Return exp(x)-1.

          This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.

      fabs(x, /)
          Return the absolute value of the float x.

      factorial(x, /)
          Find x!.

          Raise a ValueError if x is negative or non-integral.

      floor(x, /)
          Return the floor of x as an Integral.

          This is the largest integer <= x.

      fmod(x, y, /)
          Return fmod(x, y), according to platform C.

          x % y may differ.

      frexp(x, /)
          Return the mantissa and exponent of x, as pair (m, e).

          m is a float and e is an int, such that x = m * 2.**e.
          If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.

      fsum(seq, /)
          Return an accurate floating point sum of values in the iterable seq.

          Assumes IEEE-754 floating point arithmetic.

      gamma(x, /)
          Gamma function at x.

      gcd(*integers)
          Greatest Common Divisor.

      hypot(...)
          hypot(*coordinates) -> value

          Multidimensional Euclidean distance from the origin to a point.

          Roughly equivalent to:
              sqrt(sum(x**2 for x in coordinates))

          For a two dimensional point (x, y), gives the hypotenuse
          using the Pythagorean theorem:  sqrt(x*x + y*y).

          For example, the hypotenuse of a 3/4/5 right triangle is:

              >>> hypot(3.0, 4.0)
              5.0

      isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
          Determine whether two floating point numbers are close in value.

            rel_tol
              maximum difference for being considered "close", relative to the
              magnitude of the input values
            abs_tol
              maximum difference for being considered "close", regardless of the
              magnitude of the input values

          Return True if a is close in value to b, and False otherwise.

          For the values to be considered close, the difference between them
          must be smaller than at least one of the tolerances.

          -inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
          is, NaN is not close to anything, even itself.  inf and -inf are
          only close to themselves.

      isfinite(x, /)
          Return True if x is neither an infinity nor a NaN, and False otherwise.

      isinf(x, /)
          Return True if x is a positive or negative infinity, and False otherwise.

      isnan(x, /)
          Return True if x is a NaN (not a number), and False otherwise.

      isqrt(n, /)
          Return the integer part of the square root of the input.

      lcm(*integers)
          Least Common Multiple.

      ldexp(x, i, /)
          Return x * (2**i).

          This is essentially the inverse of frexp().

      lgamma(x, /)
          Natural logarithm of absolute value of Gamma function at x.

      log(...)
          log(x, [base=math.e])
          Return the logarithm of x to the given base.

          If the base not specified, returns the natural logarithm (base e) of x.

      log10(x, /)
          Return the base 10 logarithm of x.

      log1p(x, /)
          Return the natural logarithm of 1+x (base e).

          The result is computed in a way which is accurate for x near zero.

      log2(x, /)
          Return the base 2 logarithm of x.

      modf(x, /)
          Return the fractional and integer parts of x.

          Both results carry the sign of x and are floats.

      nextafter(x, y, /)
          Return the next floating-point value after x towards y.

      perm(n, k=None, /)
          Number of ways to choose k items from n items without repetition and with order.

          Evaluates to n! / (n - k)! when k <= n and evaluates
          to zero when k > n.

          If k is not specified or is None, then k defaults to n
          and the function returns n!.

          Raises TypeError if either of the arguments are not integers.
          Raises ValueError if either of the arguments are negative.

      pow(x, y, /)
          Return x**y (x to the power of y).

      prod(iterable, /, *, start=1)
          Calculate the product of all the elements in the input iterable.

          The default start value for the product is 1.

          When the iterable is empty, return the start value.  This function is
          intended specifically for use with numeric values and may reject
          non-numeric types.

      radians(x, /)
          Convert angle x from degrees to radians.

      remainder(x, y, /)
          Difference between x and the closest integer multiple of y.

          Return x - n*y where n*y is the closest integer multiple of y.
          In the case where x is exactly halfway between two multiples of
          y, the nearest even value of n is used. The result is always exact.

      sin(x, /)
          Return the sine of x (measured in radians).

      sinh(x, /)
          Return the hyperbolic sine of x.

      sqrt(x, /)
          Return the square root of x.

      tan(x, /)
          Return the tangent of x (measured in radians).

      tanh(x, /)
          Return the hyperbolic tangent of x.

      trunc(x, /)
          Truncates the Real x to the nearest Integral toward 0.

          Uses the __trunc__ magic method.

      ulp(x, /)
          Return the value of the least significant bit of the float x.

  DATA
      e = 2.718281828459045
      inf = inf
      nan = nan
      pi = 3.141592653589793
      tau = 6.283185307179586

  FILE
      /usr/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so


  #+end_example
  在 REPL 环境中，我们还可以输入 =math.= 后，按 TAB 建来给出后面可能接的函数，非常有助于去探索一个新的模块。看到不明白含义的 TAB 提示，配合 =help= 即可迅速掌握。
  #+NAME: 88887ff3-44c4-42b0-86ba-e8f1836ef1ca
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    help(math.gcd)
  #+end_src

  #+RESULTS: 88887ff3-44c4-42b0-86ba-e8f1836ef1ca
  : Help on built-in function gcd in module math:
  : 
  : gcd(*integers)
  :     Greatest Common Divisor.
  : 
  可发现性，是 Python 易于入门的重要特征。

  装载模块时，能够自定义名称，缩短程序的长度来增强可读性。
  #+NAME: e3030744-e26c-4ce4-9589-aecbaad062e3
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    import math as m
    m.factorial(10)
  #+end_src

  #+RESULTS: e3030744-e26c-4ce4-9589-aecbaad062e3
  : 3628800

** 多层模块的加载
   当模块中的内容很多时，会被安排在不同层次的名字空间中。有多种等价的方法访问它们：
   #+NAME: a6e8d710-386b-404c-be93-34df4fc4643f
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
     import os
     from os.path import abspath
     from os.path import abspath as absp
     abspath is os.path.abspath, abspath is absp
   #+end_src

   #+RESULTS: a6e8d710-386b-404c-be93-34df4fc4643f
   : (True, True)
   =os.path.abspath= 是 os 模块的 path 子模块中返回绝对路径的函数。直接使用很啰嗦，配合 =from= 会简洁很多。
* 文件读取
  文本文件输入输出，可使用 =open()= 。用 for 循环可将打开的文件视为迭代器逐行读入。每次循环得到字符串可进一步处理。在 Python 当前文件夹的命令行中，下载一个文本文件样例，
  
  #+NAME: 43815ce6-6cab-4090-a0c8-55c19ac6d1e6
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb
    wget --progress=dot 'http://hep.tsinghua.edu.cn/~orv/pd/iterator.txt'
  #+end_src

  #+RESULTS: 43815ce6-6cab-4090-a0c8-55c19ac6d1e6
  #+begin_example
  --2022-07-07 10:22:24--  http://hep.tsinghua.edu.cn/~orv/pd/iterator.txt
  Resolving hep.tsinghua.edu.cn... 101.6.6.219, 2402:f000:1:416:101:6:6:219
  Connecting to hep.tsinghua.edu.cn|101.6.6.219|:80... connected.
  HTTP request sent, awaiting response... 200 OK
  Length: 268 [text/plain]
  Saving to: ‘iterator.txt’

       0K                                                       100% 37.3M=0s

  2022-07-07 10:22:24 (37.3 MB/s) - ‘iterator.txt’ saved [268/268]

  #+end_example

  使用 open() 读入，用迭代器逐行读取。
  
  #+NAME: e0c90143-dcb5-4c16-a87e-d2c4d779ab32
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    for l in open("iterator.txt"):
        print(l, end="")
  #+end_src

  #+RESULTS: e0c90143-dcb5-4c16-a87e-d2c4d779ab32
  : Iterator Types
  : 
  : Python supports a concept of iteration over containers. This is
  : implemented using two distinct methods; these are used to allow
  : user-defined classes to support iteration. Sequences, described below
  : in more detail, always support the iteration methods.

  读入的字符串带有换行符，与 =print= 叠加会有空行，因此给 =print= 传了 =end= 参数。

  写入文本文件时，令 =open()= 以写模式打开。
  #+NAME: ed8b5ee6-5276-4e67-82f8-71d64eaac126
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
    f = open("log.txt", 'w')
    f.write("第一天 概论\n")
    f.write("第二天 Python 入门\n")
    f.close()
  #+end_src

  #+RESULTS: ed8b5ee6-5276-4e67-82f8-71d64eaac126
  "\n" 是换行符。在命令行中查看输出的文件，
  #+NAME: deace4df-afc7-45b4-8f03-9ae249f9ebf5
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb
    cat log.txt
  #+end_src

  #+RESULTS: deace4df-afc7-45b4-8f03-9ae249f9ebf5
  : 第一天 概论
  : 第二天 Python 入门

  有了输入输出的方法，我们可以把 Python 的字符串处理功能与程序结构、复合数据结构等结合起来，完成实用的文本处理工作。

* python 如何管理包和模块
  :PROPERTIES:
  :CUSTOM_ID: python-如何管理包和模块
  :END:

#+BEGIN_QUOTE
  Python 3.8.10, Ubuntu 20.04, 代码调试均在~/test/目录下进行##
  模块化编程的概述
#+END_QUOTE

Python的一大优势在于其丰富的第三方库。借助第三方库，我们可以很高效的实现一些功能，而不用像C语言一样自己编写程序。同时，我们也可以编写自己的模块库，进行模块化编程。总的来说，模块化代码具有以下几个优点：

- 简化问题
  使用模块可以将一个复杂的工程分成若干个小的部分，使问题得到简化
- 可维护性
  模块化编程降低了工程的各个部分的相互依赖性，让调试和多人协作更加高效
- 可重复性 模块中定义的功能可以在不同项目中复用，避免重复造轮子
- 模块通常被定义为一个单独的命名空间，这有助于避免程序不同区域中标识符之间的冲突

在Python中包/库(我对两个词不作区分)的来源有很多，库既可以由使用Python编写，也可以使用C语言编写并在运行时动态加载，Python还内置了很多有用的标准库，拥有丰富的第三方库资源。下面列举一些Python的标准库和常用第三方库

*** 标准库
    :PROPERTIES:
    :CUSTOM_ID: 标准库
    :END:

1. os：提供了与操作系统交互的功能，如文件操作、目录操作、进程管理等。
2. sys：提供了一些与Python解释器和Python运行环境相关的功能，如命令行参数、标准输入输出、环境变量等。
3. datetime：提供了处理日期和时间的功能，如日期的计算、格式化、解析等。
4. re：提供了正则表达式的支持，可以用来进行文本匹配和替换等操作。
5. math：提供了数学运算的函数库，如三角函数、指数函数、常量等。
6. random：提供了生成随机数的函数，可以用来进行模拟和随机抽样等操作。
7. json：提供了JSON格式的编码和解码功能，可以进行数据的序列化和反序列化。
8. sqlite3：提供了SQLite数据库的支持，可以进行数据库的连接、查询、修改等操作。

这些标准库都是Python自带的，无需额外安装

*** 常用第三方库
    :PROPERTIES:
    :CUSTOM_ID: 常用第三方库
    :END:

当今，Python
生态系统中有数以千计的第三方库，其中许多库都非常有用。以下是一些常用的
Python 第三方库：

1. NumPy：用于数学计算和科学计算的库，效率较高。
2. Pandas：提供了数据结构和数据分析工具，特别是在数据处理方面非常有用。
3. Matplotlib：用于绘制静态、动态和交互式图形的绘图库。
4. TensorFlow：用于机器学习和深度学习的库。
5. PyTorch：另一个流行的深度学习框架。
6. Django：用于编写 Web
   应用程序的全功能框架，提供了许多开箱即用的功能和工具。
7. Requests：用于发送 HTTP 请求和处理响应的库，非常适合编写 Web
   应用程序和爬虫。

这仅仅是 Python 生态系统中的一小部分。还有更多的库等待大家的探寻。

** import
   :PROPERTIES:
   :CUSTOM_ID: import
   :END:

通过使用import语句可以调用模块，一些常见的语句如下(注意 *<>*
在实际写代码时省略)：

#+BEGIN_SRC python
    import <module_name>
#+END_SRC

该代码将调用名为 *module_name*
的模块，但注意此时模块中的对象不能直接访问，必须使用形如
*module_name.object*
的点表示法才可以访问。因为此时模块定义的对象保留在模块的私有符号表中。(符号表可以看作一张存储所有对象名称的清单，在Python中一切皆可对象，因此符号表存储了变量名，函数名，类的实例名等一系列对象的名字，本地符号表中的对象可以直接被调用)

#+BEGIN_SRC python
    from <module_name> import <name>
#+END_SRC

该代码允许将模块中的单个对象直接导入到本地的符号表中，因此在调用该对象时不需要使用点表示法。如果希望调用多个对象，可以在
*import* 后写多个对象的名字，中间用 *,* 隔开

#+BEGIN_SRC python
    from <module_name> import <name> as <alt_name>

    import <module_name> as <alt_name>
#+END_SRC

在Python中可以使用别名将模块中的对象导入到本地符号表中，这样可以在本地直接调用模块中的对象，同时避免了对象名称可能的冲突

#+BEGIN_SRC python
    from <module_name> import *
#+END_SRC

该语句会将模块中所有对象的名称放入本地符号表，*除以下划线开头命名的对象*
在编写大规模程序时不建议使用该代码，因为可能会造成名称覆盖，产生意想不到的错误

** dir()
   :PROPERTIES:
   :CUSTOM_ID: dir
   :END:

该函数是Python内置函数，它会返回当前本地符号表中按生成字母排序的名称列表

#+BEGIN_SRC python
    >>> dir()
    ['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__']
    >>> a = [1,2,3]
    >>> dir()
    ['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a']
    >>> class Bar():
    ...     pass
    ... 
    >>> dir()
    ['Bar', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a']
    >>> x = Bar()
    >>> dir()
    ['Bar', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'x']
    >>> import numpy
    >>> dir()
    ['Bar', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'numpy', 'x']
#+END_SRC

** 将模块作为脚本执行
   :PROPERTIES:
   :CUSTOM_ID: 将模块作为脚本执行
   :END:

模块在本质上也是一个Python脚本，因此也可以像脚本一样执行

*/mod.py/*

#+BEGIN_SRC python
    s = 'hello world'
    def foo(arg):
        print(f'arg = {arg}')

    class Bar:
        pass

    print(s)
    foo('bye')
    x = Bar()
    print(x)
#+END_SRC

当在终端以脚本形式执行时：

#+BEGIN_SRC python
    $ python3 mod.py
    hello world
    arg = bye
    <__main__.Bar object at 0x7fe9681ba4c0>
#+END_SRC

当被当作模块调用时：

#+BEGIN_SRC python
    >>> import mod
    hello world
    arg = bye
    <mod.Bar object at 0x7f2b04a127c0>
#+END_SRC

可以看到模块在被调用时仍然产生了输出。当Python文件作为模块导入时，Python会将
*__name__* 设置为模块的名称，而在作为独立脚本时设置为 *__main__*
，因此如果希望在当作模块时不会产生输出可以这样修改 *mod.py*

*/mod.py/*

#+BEGIN_SRC python
    s = 'hello world'
    def foo(arg):
        print(f'arg = {arg}')

    class Bar:
        pass

    if __name__ == '__main__':
        print(s)
        foo('bye')
        x = Bar()
        print(x)
#+END_SRC

此时只有程序当作脚本执行时才会 *if __name__ == '__main__'：*
内的语句才会执行

或者也可以不调用整个模块，而只调用其中的某个对象

#+BEGIN_SRC python
    >>> from mod import foo
    >>> foo('Hello Alice')
    arg = Hello Alice
#+END_SRC

** 重新加载模块
   :PROPERTIES:
   :CUSTOM_ID: 重新加载模块
   :END:

对于上述文章中第一次编写的 *mod.py*
在被第一次调用时会产生输出语句，但第二次被调用则不会产生。原因是每个解释器只会加载一次模块，如果需要重新加载模块，可以
*重新启动解释器* 或者调用 *importlib* 库中 *reload()* 函数

#+BEGIN_SRC python
    >>> import mod
    hello world
    arg = bye
    <mod.Bar object at 0x7f234dfe87c0>
    >>> import mod
    >>> 
    >>> import importlib
    >>> importlib.reload(mod)
    hello world
    arg = bye
    <mod.Bar object at 0x7f234e0112e0>
    <module 'mod' from '/home/hisiao/test/mod.py'>
#+END_SRC

** 包管理
   :PROPERTIES:
   :CUSTOM_ID: 包管理
   :END:

在程序开发中如果使用了许多模块，可以使用包来进行分层和组织。包使用点表示法来对模块进行分层管理

*/目录test/*

#+BEGIN_EXAMPLE
        .
        └── pkg1
            ├── mod1.py
            └── mod2.py
#+END_EXAMPLE

如图所示，在 *pkg1* 文件夹下有两个Python文件

*/mod1.py/*

#+BEGIN_SRC python
    def foo():
        print('[mod1] foo()')

    class Foo:
        pass
#+END_SRC

*/mod2.py/*

#+BEGIN_SRC python
    def bar():
        print('[mod2] bar()')

    class Bar:
        pass
#+END_SRC

#+BEGIN_SRC python
    >>> import mod1
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ModuleNotFoundError: No module named 'mod1'
    >>> import pkg1.mod1
    >>> pkg1.mod1.foo()
    [mod1] foo()
    >>> from pkg1.mod2 import bar
    >>> bar()
    [mod2] bar()
#+END_SRC

可以看到在test目录下启动解释器，直接调用 *mod1* 报错，必须加上子文件夹
*pkg1*

** 模块搜索路径
   :PROPERTIES:
   :CUSTOM_ID: 模块搜索路径
   :END:

当Python解释器执行 *import* 语句时，它将从以下路径进行搜索：

- 从运行脚本的目录或者解释器的当前目录(交互模式)
- *PYTHONPATH* 环境变量中包含的目录列表
- 安装Python时配置的与安装有关的目录列表

具体的搜索路径可以通过下列指令查看

#+BEGIN_SRC python
    >>> import sys
    >>> sys.path
    ['', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages']
#+END_SRC

具体内容因电脑而异。因此如果希望确保找到模块，可以进行下列操作

- 放入脚本所在的目录，或者当前目录(交互模式)
- 启动解释器之前修改环境变量以包含模块所在的目录
- 放入与安装Python有关的目录中，可能存在写入访问权限问题
- 运行时修改搜索目录

#+BEGIN_SRC python
    >>> sys.path.append(r'/usr/local') # 此处应为模块的文件位置
    >>> sys.path
    ['', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages', '/usr/local']
#+END_SRC

这样做在解释器关闭后不会改变原来的环境变量设置

** 包的初始化
   :PROPERTIES:
   :CUSTOM_ID: 包的初始化
   :END:

我们回到刚才有关包的内容。实际上我们可以直接导入包

#+BEGIN_SRC python
    >>> import pkg1
    >>> pkg1.mod1
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: module 'pkg1' has no attribute 'mod1'
    >>> pkg1.mod1.foo
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: module 'pkg1' has no attribute 'mod1'
#+END_SRC

如您所见，它报错了。原因是这样做没有将包中的模块放入本地的命名空间，因此需要对包进行初始化

在pkg1目录下创建一个 *__init__.py* 文件

*/目录pkg1/*

#+BEGIN_EXAMPLE
        .
        ├── __init__.py
        ├── mod1.py
        └── mod2.py
#+END_EXAMPLE

*/__init__.py/*

#+BEGIN_SRC python
    print(f'Invoking __init__.py for {__name__}')
    A = ['quux', 'corge', 'grault']
#+END_SRC

此时 *A* 会被当作 *pkg1*
目录下的全局变量，包中的模块可以通过导入该全局变量来访问

#+BEGIN_SRC python
    >>> import pkg1
    Invoking __init__.py for pkg1
    >>> pkg1.A
    ['quux', 'corge', 'grault']
#+END_SRC

*/mod1.py/*

#+BEGIN_SRC python
    def foo():
        from pkg import A
        print('[mod1] foo() / A = ', A)

    class Foo:
        pass
#+END_SRC

#+BEGIN_SRC python
    >>> from pkg1 import mod1
    Invoking __init__.py for pkg1
    >>> mod1.foo()
    [mod1] foo() / A =  ['quux', 'corge', 'grault']
#+END_SRC

*/__init__.py/*

#+BEGIN_SRC python
    print(f'Invoking __init__.py for {__name__}')
    import pkg1.mod1, pkg1.mod2
#+END_SRC

*/mod1.py/*

#+BEGIN_SRC python
    def foo():
        print('[mod1] foo()')
    class Foo:
        pass
#+END_SRC

#+BEGIN_SRC python
    >>> import pkg1
    Invoking __init__.py for pkg1
    >>> pkg1.mod1.foo()
    [mod1] foo()
#+END_SRC

从Python3.3开始， 引入了 *隐式命名空间包* 因此
*__init__.py*可以不手动创建

** 控制包导入的模块
   :PROPERTIES:
   :CUSTOM_ID: 控制包导入的模块
   :END:

在默认情况下使用 *from pkg import **
不会导入任何模块，可以修改*__init__.py* 的 *__all__*
变量来告诉解释器导入哪些模块

*/__init__.py/*

#+BEGIN_SRC python
    print(f'Invoking __init__.py for {__name__}')
    __all__ = [
            'mod1',
            'mod2',
            'mod3'
            ]
#+END_SRC

*/mod3.py/*

#+BEGIN_SRC python
    def baz():
        print('[mod3] baz()')

    class Baz:
        pass
#+END_SRC

#+BEGIN_SRC python
    >>> import pkg1
    Invoking __init__.py for pkg1
    >>> pkg1.mod1.foo()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: module 'pkg1' has no attribute 'mod1'

    >>> from pkg1 import *
    >>> mod1.foo()
    [mod1] foo()
#+END_SRC

如果在模块中定义 **all**也可以控制导入的内容

*/mod1.py/*

#+BEGIN_SRC python
    __all__ = ['foo']

    def foo():
        print('[mod1] foo()')
    class Foo:
        pass
#+END_SRC

这样导入受影响

#+BEGIN_SRC python
    >>> from pkg1.mod1 import *
    Invoking __init__.py for pkg1
    >>> foo()
    [mod1] foo()
    >>> Foo()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'Foo' is not defined
    >>> x = Foo
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'Foo' is not defined
#+END_SRC

但是这样导入不受影响

#+BEGIN_SRC python
    >>> from pkg1 import *
    Invoking __init__.py for pkg1
    >>> mod1.foo()
    [mod1] foo()
    >>> mod1.Foo()
    <pkg1.mod1.Foo object at 0x7f03dabeaa60>
#+END_SRC

** 子包
   :PROPERTIES:
   :CUSTOM_ID: 子包
   :END:

我们将文件目录做如下修改，内容不变

*/目录test/*

#+BEGIN_EXAMPLE
        .
        └── pkg
           ├── subpkg1
           │   ├── mod1.py
           │   └── mod2.py
           └── subpkg2
               └── mod3.py
#+END_EXAMPLE

*/mod1.py/*

#+BEGIN_SRC python
    def foo():
        print('[mod1] foo()')
    class Foo:
        pass
#+END_SRC

*/mod2.py/*

#+BEGIN_SRC python
    from . import mod1

    def bar():
        print('[mod2] bar()')

    class Bar:
        pass

    mod1.foo()
#+END_SRC

*/mod3.py/*

#+BEGIN_SRC python
    from pkg.subpkg1.mod1 import foo
    foo()
    from .. import subpkg1
    print(subpkg1)
    from ..subpkg1.mod2 import bar
    bar()

    def baz():
        print('[mod3] baz()')

    class Baz:
        pass
#+END_SRC

#+BEGIN_SRC python
    >>> from pkg.subpkg1 import mod2
    [mod1] foo()
    >>> from pkg.subpkg2 import mod3
    [mod1] foo()
    <module 'pkg.subpkg1' (namespace)>
    [mod2] bar()
#+END_SRC

总结：

- *from . import * 用于导入同一目录下模块，也可以直接使用 *import *
- *from .. import * 用于导入上一级目录下的模块
- *from .. import * 用于导入上一目录下其他包里的模块

** 参考资料
   :PROPERTIES:
   :CUSTOM_ID: 参考资料
   :END:

[1] John Sturtz:Python Modules and Packages -- An Introduction.Apr 17,
2018.https://realpython.com/python-modules-packages/#the-module-search-path

[2] 李轶凡:Python Basic. 2023年清华酒井科协暑期培训. July 18, 2023

[3] 门书生:Python中import的用法.July 12,
2021.https://zhuanlan.zhihu.com/p/63143493