* 序论
这门课叫“实验物理的大数据方法”。因为一些灵活的考虑，所以这门课分成了两个部分，一部分是《实验物理的大数据方法（一）》，一部分是《实验物理的大数据方法（二）》。物理系的同学要同时选（一）和（二）。工物系的同学选（一），（二）任选。

课程是算GPA的。

课程的标题在选择的时候，也经过了一番波折，考虑了很久才定下来。课程也没有太多的参考。纵观全世界去年只有伯克利开过一个类似的课程。所以说，这个课程里边可以参考的现成的课程比较少。因此，我希望同学们都能参与到教学建设的环节中来。比如，你在上课的时候哪个地方感觉不懂，或者是感觉讲的太慢，或者是讲的太快，肯定不是你的问题而是我的问题。大家一定要踊跃地提出你的意见，因为上课是为同学们服务的。我的目标是让同学们在暑假小学期能够尽可能学到更多的知识，掌握一些新的技能。

** 教师
首先我来自我介绍，我是基科2005级，2009年从清华毕业。之后9年时间我都在日本的神冈地下实验室，主要从事粒子物理实验工作，包括中微子和暗物质相关的实验。2018年，我回到了母校，到了工程物理系近代物理研究所。现在，我的主要工作是在四川锦屏的地下实验室来筹划、设计和建造我们国家的中微子实验。我参与国际合作研究，之前在日本的合作也在继续进行，包括中微子和暗物质的实验，我们国家的下一代的江门中微子实验也在其中。如果同学们对粒子物理和中微子以及这个地下实验室感兴趣，课下也可以和我一起讨论。

我有个爱好，在本科的时候属于业余爱好，现在属于半专业的爱好。它包括大数据分析，高性能计算，还有服务器的运营、维护、开发。作为爱好，我的水平不高，是业余级别。在课程中我会尽量的把我目前为止的毕生所学表达出来。如果表达的不好，欢迎同学们提意见。

** 实验物理
这门课叫实验物理的大数据方法。要搞清楚课程的内容，需要明确什么是实验物理。实验物理数理大类的同学可能在大一一入学就都知道：理论物理学家一般提出模型，从他的数学或者哲学角度出发思考，提出对大自然的模型。这个模型或者理论出来之后，实验物理学家就会在自然界中寻找这些模型的线索，即预测的现象。其中最重要的是可证伪性：模型是否能够用实验数据证伪。实验物理去采集数据，验证这些物理规律。

有一个说法，实验物理学家是非常费电的。如果大家忘了实验物理学家到底是什么，就看他这个耗电量很大的人基本上都是实验物理学家。比如，欧洲核子中心一年的耗电量是太瓦时量级。作为对比，北京的二环以内包括崇文宣武，人口200多万，大概只是他的10倍。一个实验室人口是千人量级，它的耗电量相当于200万人在一个城市里面的耗电量。实验物理本身要观察物理现象。对控制变量来改变物理现象发生的环境，一般我们把它叫做狭义的实验，比如我们平时说的实验室。对不能控制条件的实验，我们把它叫做观测，比如天文观测中造望远镜。严格上来讲，高能宇宙线的实验或者射电的实验都属于观测。实验物理要从取得的数据出发来进行统计推断，用统计学的知识来证伪物理规律假说。这是整个物理学科发展的规律。

** 大数据

“大”是相对的，所有你用一台计算机处理不完的数据，就叫做“大数据”。20年前的计算机处理不完的数据，现在或许可以处理了。可见“大数据”到底多“大”是“大”，一个相对的概念。在课程中，目前条件有限，给大家的数据不会大到一个一台电脑处理不完的程度。但是我们讲授的方法可以推广到非常大的计算规模。希望同学们在做练习和上课的时候能体会其中的方法。大数据作为流行语是一个商业的概念，目前人人都在讲，但是未必人人都知道。

大数据与大型的物理实验联系紧密。天体物理、等离子体物理、粒子物理的大型实验都要求非常大的计算量。探索极端环境下物理系统的行为，是日常生活中不易探测到的。它有很多噪音，即使应用各种技术压低掉噪音，也还会有残留。只有采集很多数据进行分析，才能找出那亿万分之一的信号。大型的物理装置产生的数据都是海量的，我国的FAST天眼望远镜，每年要产生 $10^15$ 字节的数据。如何把这些数据转化成说脉冲星搜索结果这样的物理学结论，就需要应用大数据方法。

从历史角度，“大数据”还没有在商业流行起来之前，实验物理学就已经每时每刻地应对大数据的问题。CERN在90年代，给出了一份详细的报告，决策用大型机还是用民用级 Intel PC机来进行科学计算。这个报告经过长时间的论证和争论，最后CERN决定在 LHC (Large Hadron Collider 大型强子对撞机) 上用 Intel 的民用计算机组成集群，对 LHC 的数据进行计算。2012年Higgs粒子的发现也都是在民用级计算机集群上完成的。这是个人电脑及硬件集群成为科学计算主流的标志。当今，超级计算机国际排行榜上，大家都开始使用集群来达到世界顶级的计算能力。所以说，在大数据或者高性能计算发展的历程中，实验物理起到了非常核心的推动作用。

近年来，使用反了过来。“大数据”在工业界流行，大家把数据科学方法用在了各种领域，解决了各种问题n，获得了令人非常振奋的结果。它们又与理论计算机相结合，产生了许多新方法处理数据。比如，深度神经网络，商业概念叫“深度学习”，又反过来应用到实验物理，使我们对世界的认识又有了一个新的进步。

** 课程目标
本课程以实验物理为出发点，学习大数据方法的基础知识。这门课目标让同学们达成三点目标：

- 科学精神 :: 大家已经做过基础物理实验，也处理过实验数据，要理解数据处理中的科学精神。
- 自学能力 :: 从一开始养成良好的科研习惯，而且掌握典型的科学计算工具，并且能够通自学上手新工具。
- 使用工具 :: 工具有各自的适用范围，不同的工作场景适合使用不同的工具。针对问题和任务来选择合适的工具。

** 课程计划

- 第一周 :: 版本控制Git的入门，Python的入门；
- 第二周 :: Python 科学计算，可视化；
- 第三周 :: 命令行工具；
- 第四周 :: 高级工具。

** 数据分析指导原则

数据分析指导原则对实验物理乃至其他实证性科学研究适用。这几个原则会贯穿始终。

“复现”原则。无论做什么样的研究，科研成果一定要能够被同行重复出来。不能我在这里测量精细结构常数是1/137，误差很小，你在上海测得精细结构常数是1/141。不仅需要在实验条件下可以重复，而且需要实验结果以人类语言，比如论文、报告，还要以计算机语言表达，计算程序需要公开。这样他人才可以重复你的结果。这是科学研究的最基本的精神，它和可证伪性伴随。一个理论不能正着说和反着说都对，这就不具备可证伪性了。“复现”与“可证伪”是区分科学与伪科学的标志。今后大家如果在媒体上看到谁有了突破，你要先问两个问题：“他所验证的结论是可证伪的吗？他的结果可以被他人重复吗？”

“透明”原则。在处理数据时，往往需要经历多步，无法一蹴而就。数据分析的每一步中间结果都应由人类理解可以被直接阅读。否则如果我们不知道它是对是错，到最后一步才知道它错，就非常难以找到错误原因。

“一次”原则，或“一次且仅一次”原则。不论写文章，还是写程序，禁止进行复制粘贴操作。在需要对一段程序进行修改，完成另一个内容时，不要把大块的程序切下来。这样做叫“自我重复”，它的坏处在于当你发现这部分需要进行修改时，你已经复制到其他地方的程序不会跟着被自动修改。如果你忘记了已经复制了9处，却一共改了8处，那么当这个项目变得很大时，就非常难找到错误原因。一定是有意义的信息都只放在统一的地方。

“最佳工具”原则。尽量使用高级语言。如果使用一个工具很得心应手，并且它非常适合要做的事，就一定要使用它。即使这个工具和别人的不一样，我们要想办法把它和别人的联合起来。如果能做到这一点，我们就可以在面对任何任务时都挑选比较合适的工具。该用锤子的时候就用锤子，该用电锯的时候就用电锯。这样才能节省自己的时间，也能够最有效地实践上面的三个原则。

这门课会以 Python 为中心介绍数据处理。但是，Python 未必永远都是最好的工具。所以我们这门课
不叫 “Python 数据处理与科学计算”，虽然现在几乎如此。但是不保证今后还用 Python 进行教学。

** 课程评价

平时作业占70%，以 Github 形式组织。平时作业以程序自动测试，还有20%是“白盒”测试。助教与我会读作业程序，看 Git commit 是否符合规则，是否养成良好的习惯。

大作业占30%，取材于实验物理的不同场景，覆盖物理学的方方面面。大作业也可以由同学自行提出，非物理的学科中数据处理类的任务都可以做为大作业。大作业分两阶段，对应前两周和后两周。只选《实验物理的大数据方法（1）》两学分的同学，要完成前半部分。同时选了《实验物理的大数据方法（2）》总共4学分的同学，要完成所有的大作业。大作业有三个主题：

粒子物理实验，取材自 Ghost Hunter 中微子数据分析排位赛，竞赛结果可以课赛结合的形式作为大作业。也可以在竞赛的基础上继续提高。未参加过竞赛的同学，也可在网站上看到物理背景。

天体物理观测。

凝聚态物理实验测量。

大家的物理课的进度都差不多，但是编程基础差异较大。希望基础较好的同学多帮助周围的基础薄弱的同学。

如果你的精力太旺盛了，上课太简单了，可以尝试多做几个大作业。

自定义大作业的要点是：问题描述，学科背景，数据输入输出，评分标准。可以由同学自己提出。

** 参考资料
Think Python，Python 科学计算讲义，在命令行进行数据处理，大蓝书。

The art of Unix programming：自由软件界的教父级人物，以道家思想剖析了 Unix 类系统中程序设计的优美和永恒性。到底是什么样的，它里面给出了很多切实的建议。我们这门课的透明性原则就是从这本书来的。

Learn X in Y minutes，你可以看到很多例子，改写成自己的例子，很适合初学者。

** Python

课程围绕 Python 展开，但是又不是 Python 程序设计。课程带领大家循序渐进地做一些 Python 练习。Python 是一门解释型语言，相对于编译型语言（C/C++）更容易调试。非计算机专业的同学有这样一门语言比较容易，日常工作比较舒服。Python 语法简明，很多是英文单词，与伪代码神似，即使外行也比较容易读懂或猜到意思。因此 Python 的书写效率比较高，易于快速的写出不那么差的程序。如果你要进一步优化，可能要花很多时间。但是对于大部分的工作，即使是科学的硬核工作，写出一个差不多的程序就已经够用了。计算机性能的发展实在是太快了，是人类跟不上的。5年前还要进行不断优化，5年后
一个差不多的程序可能胜任。Python 正好适应这样的趋势。

Python 可以直接调用多语言库。在学习物理，特别是计算物理时，会碰到 Fortran 或 C 程序。如果做统计分析，可能会用到 R 程序。如果大家组成一个团队，有的同学喜欢这个语言，有的同学喜欢另一个语言。Pyhon 可以作为各语言之间传唤的媒介，或者叫“胶水语言”，即把各种程序粘合在一起。Python 可调用很多程序的库，即使这个库是其他程序写的，也可以用 Python 程序调用它的功能。这非常易于
和已经有的工具进行组合，而且可以有效地防止团队协作中的偏好冲突，还大大丰富了 Python 生态的功能。

一个 Python 程序，很可能不是最优的。在实际工作中，遇到了一个必须优化的地方，可能会达到 Python 效率的极限。此时可以把这个核心部分替换成 Fortran 或 C，就可以进一步优化程序的运行效率。故而有这样的策略：面对一个任务，先写正确的可以运行的程序，然后定位耗时最多的点，针对这里进行优化；如果优化到了极致还不够，则使用其他语言替代。这个策略适用于一切科学计算问题，可渐进地完善，而不是非黑即白的卡死状态。在团队协作中，很多时候这些细节就决定了成败，因此 Python 是团队协作的最佳工具。

此外，相对于 Matlab 等专门的科学计算语言，Python 是一个通用语言。它的功能不局限于科学计算
和研究，而且在生活中的方方面面都可以使用。它的软件库丰富，可以完成非常多其他的功能。正是由于这些优点，Python 近期在科学计算领域得到了广泛应用。

** POSIX
POSIX，Portable Operating System Interface，是关于计算机操作系统的国际标准。操作系统是在计算机上运行的基本系统，在硬件与人类之间建立桥梁。如果我们在 POSIX 国际标准的环境里写一个科学计算程序，依此得到了一个科学成果，那么全世界的其他人，不管用什么操作系统，只要满足 POSIX，就都可以复现出我们的结果。反过来，如果一个环境只能是在某一个编译器的某一个版本下才能得出正确结果，只要换一个地方换一台电脑结果就错了，这就不是好的科学研究。

在学习中，要尽量的使用国际通用的环境，学习其中好用的工具，建立一个工具箱。满足 POSIX 的操作系统有 GNU/Linux，macOS，或者其他的类 Unix 系统。Microsoft 的 Windows 不满足 POSIX 标准，但是可以使用 Windows Subsystem for Linux 扩展来在 Windows 上实现 POSIX 环境。

正在使用 GNU/Linux 系统的同学不必作任何准备，请帮助周围的同学设置环境。macOS 的用户可以阅读 FAQ。Windows 用户先尝试安装 WSL，把课程的程序环境建立起来。
