#+Title: 数据格式
#+author: 续本达
#+PROPERTY: header-args :eval never-export :exports both

* 数据格式
  到目前为止的输入和输出还比较简单和原始，形式上都是一个一个数字操作。如果这种数据达到几百TB，操作就太困难了。这就需要更高级的数据格式，作为中间结果的数据，最重要的是遵循透明原则。它默认由计算机处理，透明原则要求它易于被理解和检查。我们重点学习满足透明原则的三个范例 CSV、HDF5 和 JSON。
  程序在运行时，数据在计算机内存中临时存储。要把数据输入和输出，是把内存和外部存储之间通信，本质上是数据格式转化的过程。浮点数在转化时，会有损失，在考虑数据格式的时候，尤其要注意。在精度可行的前提下，考虑转化是否方便。数据转化是工具的功能，它们承载了数据中的信息，设计目标是让人方便地写入和读出。在实验进行中，我们会很乐意看看，数据文件中都记录了什么，实验仪器的状态是什么样子的。在处理过程中，我们也有判断中间结果是否合理的需求。
  因此数据格式方便与否，直接关系到研究中的日常体验。

** CSV
   CSV 是 comma separated values，本身就是文本文件，可以直接用编辑器打开。CSV 符合我们的书写习惯，每一行从左往右写，写完一行写下一行，在文本文件中把数据排成二维的表格。这种方法对整数和字符串尤其有效。现在浮点数要格外注意，用文本描述小数时，难免有精度损失，应当谨慎评估。
   NumPy 中自带了处理 CSV 文件的功能。这里 “comma separated values” 已经未必是“comma”（逗号）分隔了，而是广义的“分隔符”，可以是空格或制表符（TAB）甚至是句号——只要不引入歧义都可以。
   我们生成一个 (10, 10) 形状的二维数组试一试
   #+NAME: dad6dfb1-6190-48a9-8e3b-50d1d56fe216
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
     import numpy as np
     s100 = np.arange(100).reshape((10, 10))
     print(s100)
   #+end_src

   #+RESULTS: dad6dfb1-6190-48a9-8e3b-50d1d56fe216
   #+begin_example
   [[ 0  1  2  3  4  5  6  7  8  9]
    [10 11 12 13 14 15 16 17 18 19]
    [20 21 22 23 24 25 26 27 28 29]
    [30 31 32 33 34 35 36 37 38 39]
    [40 41 42 43 44 45 46 47 48 49]
    [50 51 52 53 54 55 56 57 58 59]
    [60 61 62 63 64 65 66 67 68 69]
    [70 71 72 73 74 75 76 77 78 79]
    [80 81 82 83 84 85 86 87 88 89]
    [90 91 92 93 94 95 96 97 98 99]]
   #+end_example

   把它存成 CSV，
   #+NAME: 1db8db20-7973-44e8-a0b4-7c47cffa1048
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
     np.savetxt("s100.txt", s100, fmt="%d")
   #+end_src

   #+RESULTS: 1db8db20-7973-44e8-a0b4-7c47cffa1048

   看一下它的内容
   #+NAME: b3435226-9037-437c-ab12-35c92a961a0d
   #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
     cat s100.txt
   #+end_src

   #+RESULTS: b3435226-9037-437c-ab12-35c92a961a0d
   #+begin_example
   0 1 2 3 4 5 6 7 8 9
   10 11 12 13 14 15 16 17 18 19
   20 21 22 23 24 25 26 27 28 29
   30 31 32 33 34 35 36 37 38 39
   40 41 42 43 44 45 46 47 48 49
   50 51 52 53 54 55 56 57 58 59
   60 61 62 63 64 65 66 67 68 69
   70 71 72 73 74 75 76 77 78 79
   80 81 82 83 84 85 86 87 88 89
   90 91 92 93 94 95 96 97 98 99
   #+end_example
   
   如果对open
不熟悉的同学
可以看一下
help open 这个帮助
我们就不看了
那么open这个文件的名字
然后"w"是表示要写入这个文件
然后我们调用numpy的savetxt这个
这个函数
这个函数就是
保存CSV文件
那么第一个是文件的句柄
文件的handle
第二个是我们刚才的
10×10的数组
把它存进去之后
再把这个文件关闭
因为一般来说
我们如果没有关闭的话
这个文件还留在这个缓存里面
可能还没有写到硬盘里面
一般说关闭之后
就能看到文件的内容
因为这样的操作
其实有很多
也就是先把一个文件打开
然后再做一些操作
再把文件关闭
而且很多时候
作为一个人
很容易忘了关闭
那么可能就一直打开着
这样其实在这个程序里面
不是很好的习惯
那么为了帮助大家
不要忘了关闭
python给出了一个
比较便利的语法
语法是这样写的
是with
with open
open一个文件把它写入
然后 as opt
那么它其实是等价于
这个output
赋予一个文件的句柄
再把这个文件关闭
它是等价于
那么在它的里边
这个程序块
等价于上面程序的中间的部分
所以我们来试一下
比较好的写法
with open
CSV
然后写入
as opt
看起来是比较运行成功了
我们看一下
写入了文件
我们用 cat命令
之前同学问过
cat命令是
concatenate的缩写
不是猫的意思
它是concatenate意思
是连接
它是把这个
很多的文件输入连接成一个
输出文件
这是它的原意
但实际上我们可以输入一个文件
然后把它连接到
标准输出
就是我的屏幕显示
省略的时候
标准输出
就屏幕显示
所以这样我就可以看到这个文件
我看起来
看到我记得
我输入的是很多整数
是0~99
但是它输出的
却是这样的数
1.0×10的0次方
7.5×10的一次方
我觉得这有点
有点过分了
不喜欢这样的输出
然后为什么是这样输出呢
我们来看一下
然后如果用cat命令
来显示这个文件内容
我看这里面都是这样的
这样的数字这样的数字
对于我们期待
它是一个整数来说
它不是很容易阅读
我们来看一下这个原因
看起来
看一下savetxt
有没有什么问题
我看这个savetxt
第一个参数是传入一个文件名
第二个参数
文件名
或者是 file handle
第三个参数是
输出的格式
我们看到它有一个默认的格式
默认的格式是
18位小数的科学计数法
这是18位
看起来差不多
18位小说科学记数法
后一个是分隔符是什么
默认是空格
也可以把它改成逗号
然后这个换行符是什么
这些我们先不管了
我们看到主要是format的问题
因为我们要输出是整数
它却无差别地给我们输出
科学记数法
有19位有效数字
这样的
这样并不符合我们要求
所以我们如果把
 fmt写成整数
应该输出就会好一些
所以说我们把format
改成%D
意思就是输出整数
可能有同学会比较困惑
比如说%D
%F
%E
这些
感觉都是一堆魔法数字
这个根本不知道它什么意思
如果有困惑的同学
跟我一样
我也很困惑
所以一般来说
我们可以通过搜索这个关键词
比如C format specifiers
标定了 C语言的输出格式的
小的
小的字母
我们看比如说我们搜索一下
我们就可以看到
其实默认的就有了
有各种各样的 format specifiers
这些都可以
大家可以
或者Wikipedia的这个format string
这都没问题
所以我们把刚才的输出改一下
让它输出整数
刚才我们savetxt 我们让它输出
整数
作为整数
我们看执行的结果
我们如果把文件输出看一下
看起来就没问题了
这就是一个CSV文件
比如说它的每一个输入都是一个
数字
或者是在这种情况下
它是一个数字
我们也可以说
输出别的
比如说这样的小数
或者是一些字符串
然后它们都是用空格来分割的
我看第一行
它就有用空格分割
一共有10个数字
当我们人来阅读的时候
这就是一个表
啊这是一个表格
10×10的一个表格
计算机读入的时候也是说
也是这样来约定的
那么不知道同学们有没有问题
都觉得
如果还能把输入字符串作为元素
那么如果我的字符串里有空格
怎么办
是吧
那么就有很多这样的问题
就是有空格
就有各种各样
相对于不那么通用的解决方法
那么可能不同的程序之间
可能会有不同的约定
那么就容易出现输入输出的时候
把这个数据
解读成一个错误的数据
所以说一般来说
有空格的时候
容易产生误会的时候
我们比如说换个分隔符
变成逗号
那就说字符串里面有逗号怎么办
可能再换一些别的什么
什么分隔符都可以
好
那么我把它输出出去了
输出数据是就是一个
刚才看到的一个文本文件
我们怎么读入文本文件呢
同理
我们也是用with
把这个文件
把它打开
as ipt
然后
刚才我们用的是np.savetxt
现在我们用loadtxt
这样它会读入一个数组
然后数组会放到变量
我们来试一下 with open
你输入的
这样吗
我看一下
刚才同学遇到的问题
是在这一步报了一个错
我们来看一下我的里边有没有
这样的错误
我刚才没有执行这一段代码
然后看它是否能够执行
先把它open出来
然后再把它写进去
这里没有报错
有没有同学在执行这几个命令的
时候
遇到了错误
这么多
错误是说
涉及不能write的一个信息吗
对对对
有可能是权限问题是吧
好
如何找到当前目录
数据
需要用二进制打开
这样
是吗
二维数组有问题
save的时候
他就
还有这种情况
然后刚才得到了一个建议
我们我们把 w改成wb
就是把它当成一个 binary输出
我们真是各种平台还有
可能有一些
我们遇到了一些一致性问题
有可能
看来遇到了一个
没有没有想到的问题
有道理
大概有两种解决方案
一种是比较简单的一个取巧的
因为我们刚才看了一下
它的文档
我看一下这个文档
fname
它其实既可以是一个filename
也可以是一个filehandle
那么既然它可以是个filename
其实我们在这里输入一个字符串
也可以
比如说我们就直接打
直接输入
np.savetxt
然后输入一个字符串
CSV
然后再把
这是一种方法
另外一种方法是同学发现的
也是同学发现的
在windows下面好像是
输入输出
需要用二进制打开
那么
把它变成这样啊
所以这两个地方
可以把它变换一下
这是一个意想不到的问题
跟大家抱歉
因为我没有在其他的平台上做
测试
好的
我们下课休息一下
然后没有解决这个问题的同学
可以下课讨论一下
大家都解决这个问题了吗
总结一下
一种方法是特别是
windows
那么我们要为了让这个程序
在更多的平台上运行
我们就把它
加一个b在这里 b的意思是
二进制格式
我们回顾一下
如果用写入和二进制格式
把这个文件打开的话
然后把我们的数组保存到里面
就可以用这样的一个
numpy还给了我们一个快捷的方式
可以说
直接把这个文件的名写到这儿
然后numpy它自己
帮我们打开这个文件
这也是可以的
我们看一下
这也是可以的
所以说一共有这两种修正的方式
最开始我所给的
只有一个w打开
没有b的这种情况
其实可能会在
Windows的平台下出问题
非常感谢大家
遇到一个玄学问题
然后我们这么多同学一起出主意
迅速就把它解决了
好
有没有同学
还有文件的写入问题的
都可以了
是吧
好
我们继续
好
接下来我们就可以把它读进来
读进来要二进制
我们我们来试一下
比如说我们把这个文件读进来
读进来也可以直接用
用文本
这个字符串
把这个文件名写出来
loadtxt
这样
然后我看就把它读进来了
也可以用with
我们给它取一个变量名
就是叫csv
好
我们把它读进来
所以写进去恰好是savetxt
读进来就是loadtxt
写进去的时候
这个参数是文件
和要写的数据
以及格式
那么读进来的时候
就只要把文件放这就行了
但是我们发现一个问题
是吧
我们原来的
原来这个数据
它其实是整数的
我读进来之后
每个数后面有个点
代表
它已经变成了浮点数
比如说我们看一下它的type
我们看一下元素的type
我看它已经变成了
numpy的float64
我们看原来的
这个数据它的tyoe是什么
而是numpy的整数 64位的整数
所以我们这里发现一个问题
我们写进去的和读进来的
不一样
其实就暗中被转化了
那么就很可能会出一些转化的
误差
我们不想要这样
我们看怎么来处理它
要处理它
我们来简单介绍一下
numpy的数据类型
还记得上一节课
我们讲的
numpy的数组和列表的
最大的两个差别
那么第一个差别就是numpy的数组
它需要预先的指定数据类型
它有一个固定的数据类型
即使是没有数据类型
它也是要有一个固定的
所谓的object类型
那么第二点是numpy的数组
它是存储在一段
连续的内存空间里面
那列表就不是这样的
没有必要是连续的内存空间
那么numpy数组里边
指定的元素类型
常见的有
numpy int是整型16位
32位整型
64位整型
或者是直接用python的
整型的标识
在64位机器上
它会默认成
跟 int64的是一样
那么浮点型有16位的
32位的浮点型
和64位的浮点型
每一个位
就是一个比特
一个0 1
那么同理也有
python它内建的数据格式
这个float
而complex
就是64位的
是复数型
那也就是说
32位实部 32位虚部
这个举一个例子
为了完整性
变成一维数组了
刚才同学遇到的问题是
写入的时候
刚才进行了哪个写入
把那个文件找出来
找不到了
嗯嗯嗯
我们看到我这里面写入的时候
会每一行结束
会有一个换行符
会到下一行
刚才同学遇到的问题是
写入之后
它变成了
每一个都另起一行
每个数字都另起一行
是吧
你如果用cat来输出来
来输出的话
还是怎么样
像我这样
cat hz.csv
有没有同学遇到同样的问题
大家如果用cat的话
都是这样二维的吗
有没有其他同学也是这样的
其他同学都是对的
这个太神奇了
你用的是哪个方法
是 wb的
还是
如果这样
我来我来试一下
这个问题其实还是蛮严重的
因为 windows系统
它其实没有遵守POSIX 
那么WSL它其实是一个兼容层
它在非POSIX的
这个系统的上面
模拟了一层POSIX
那么它模拟的过程中
可能会有一些潜在的问题
或者说不一定叫他问题
他可能是没有严格的
遵守这个标准
所以说在
它在不同的平台上运行
可能会出现问题
你可以尝试一下这种
那么我们就推荐使用这种形式
就不推荐使用那种open的
形式了
因为open
它把不同平台的区差异给暴露了
出来
而且刚才同学遇到的
变成了一列
有可能是
换行符
或者是分隔符的问题
换行符不同的系统
还有不同的约定
比如说
是这样的换行符
这个是叫做
就是说有两种换行符
那么在GNU/Linux
下面是这个换行符
在mac下面是这个换房符
在windows下面
是这两个换行符一起用
所以说换行符也有一些区别
那么可见CSV的兼容性
跨平台的时候可能会有一些问题
那么我们如果使用了这个字符串
用字符串表征这个文件名
那么它就可以把跨平台的问题
把它丢给numpy来解决
如果numpy能够把处理的好的话
我们就用这个接口
所以我们把这个数据读进来
读进来
我们就不用open了
用直接用字符串
作为文件名把它读进来
应该是这样
好
感谢同学的提问
因为它遇到的问题
也是我们未来
可能遇到的潜在问题
那么这个问题及早的暴露出来
它是更好的
我们回到数据类型的部分
刚才我们看到
我把这个数据写入了
它的类型变了
那么类型变了
我们要先考察一下
都有什么类型
其中有整型各种各样的大小的
浮点型
各种各样大小的
还有复数型
各种各样大小
我一只举了一种
那么如何看
一个数组的元素的数据类型
它有一个属性叫做dtype
其实是"data type"的缩写
我们就可以看一下
刚才我们生成的CSV的dtype
然后看到它是
 Int64的类型
我们看一下
我们读进来的dtype是什么呢
就从CSV里读进来的
你看它
它默认的都是用浮点数读进来
其实也可以理解
因为只要不是太离谱
那么这个整数
可以用浮点数来表达
所以用浮点数读起来
可能更具有一般性
但是我们不想这样
我们希望它是以整数读进来
我们就要看一下
loadtxt
它有没有什么选项
可以让我们指定数据类型
我说我们看一下第二个
我们看这个参数
第一个参数是文件名
第二个参数就是
以什么样的数据类型读进来
后面我们先不看了
那么我们就知道了
刚才我们的
csv_hz
是这样
刚才我们是这样子进来的
是吧
我们现在把它按照整数把它读
起来
我们把它叫做csv_int_hz
那么dtype
让它成为整数
看一下
我看一下这样的话变成整数了
我们看一下它的dtype是不是整数
int64
loadtxt
dtype
这里是
我直接使用的
int
这里也可以使用别的
比如说np.int
我只要16位
那么它的dtype就变成16位了
比如说我看
这些数都是小于
100的
那么8位的整数应该也可以
有没有8位
我看一下 有8位
这也可以读出来
是吧
那么这样做了
大家有没有一个担心
也就是说每次读数据
我都得看一下
这个数据能不能正常读进来
然后正常读进来之后
类型对不对
如果类型不对
我再指定一下类型
其实这个就不是那么方便了
很多时候
我们都没办法自动判断
需要每次拿到一个数据
我们来看一下
它适用于什么类型
我们再指定
这就显得不够自动化
不够高档
这是一个CSV的问题
当然它很直观
它默认是说
我能够以浮点型把它读进来
虽然看起来不是很好看
但是还是属于差不多能用的
情况
所以说
当我们对浮点数的要求
不是很高
对这个实验的精度
没有特别要求的时候
用CSV也没有太大的问题
我们相信同学们
已经看到了 CSV 的特点
它的优点是
非常简单直观
而且兼容性特别强
刚才我们把CSV输出了
我可以用它
因为就是一个纯文本
我可以用cat来查看
我可以用nano来查看
也可以用这个
我没有vim
有vi
也可以用别的来查看
用各种各样的
比如说我可以用分页的命令
less
来查看
这都可以看到
文件的内容
这也就是说
我们有无穷无尽的方法
来理解这个文件里面到底是什么
所以说它的这个文件
就是最具有最满足透明性原则的
一种文件格式
而且兼容性很强
把这个文件传到
 windows里面
它也可以读出来
虽然我们看到了一些兼容性问题
但兼容性问题
可能是python的问题
或者是numpy的问题
但这个数据本身是可以
跨平台拿过去的
那么缺点
大家也都感受到了
我每次都需要指定格式
比如说我在指定
它的里边分割符
到底是空格
还是逗号
还是句号还是井号
井号是注释还是有实际意义
包括读入的时候
我得看一下
这个数据范围是多大
有没有浮点
有没有浮点数
是不是都是整数
那个字符串里有没有特殊字符
很多时候输入和输出
都需要人为的去看
那么如果我们在团队里面
用CSV进行数据传递的时候
其实要加一些其他的限制
比如说告诉大家
不要再
不要在每一个数据里边
加上空格
这样我们才能用空格的
诸如此类
所以说
它的兼容性和它的一些随意性是
伴生的
而且这种格式
它只能表示表格
比如说我们想一下
如果每一行的
这个元素数量不一样
那么就不是太好用
用这个CSV来进行表示
那么其实有两个方向了
其中一个方向就是说
既然我要指定数据类型
既然我读进来的时候
要看一下数据类型是什么
我们是不是可以可以把
数据类型
就存在这个文件里面
我这个程序读入的时候
先看一下
先问一下这个文件
你里边都有什么数据类型
这个文件告诉我有是什么什么
意思
然后我再用类型来读取这个文件
不就行了
但这样就会有几个问题
比如说
我们如果把数据类型放到里面
那么它还方便人类的
直接阅读了吗
而且加数据类型
要以什么样的格式加进去
这个数据类型呢
它是否可以成为一个
大家都遵守都约定的标准
这就需要一些标准化的进程
那么在这个方面做的比较
好的
就是HDF的格式
另外一个一种数据类型
CSV
适合表示这种二维的表格
我们想如果是三维的怎么办
那么或者是说
它根本没有这种表格
这种整齐的结构
它可能是一个分支的结构
或者是一个树状的结构
这个时候
使用json
会比较方便
那么接下来
介绍一下HDF json
首先是HDF 它的意思是
Hierarchical Data Format
就是说具有这种层级的具有这种
一代一代的数据格式
它是起源于高性能计算领域
目前HDF有一个
专门的非盈利的组织
这个组织在开发它的格式
并且维护它的标准的
输入输出库
那么HDF从第4代开始
就变得很受欢迎
广泛使用
特别是在天体物理的领域
很多海量的望远镜采集的数据
一般都是通过HDF来
保存
那么到了第5代
有很多物理实验
都开始采用HDF5
那么HDF它有几个特点
一个特点
它是具有原始的表示
原始
我是想到的是英文的 raw
就是说这个数据
它本身就是
用这个数据
在内存里边的
二进制的表示形式
存到这个文件里
所以说
相比于CSV这个数据
不用再把它转换成文本
所以就没有这种转换的
成本或者是误差
但是有一个问题
因为人类可以读的部分都是文本
那么保留了这种原始的格式
这种二进制的格式
它就丧失了对人类的可读性
所以说我们没有办法
直接读HDF文件
但是好在HDF文件
它形成了一个工业标准
那么它是支持所有的主流语言
所有的主流语言
都可以把HDF读入进来
而且有很多独立的查看器
那也就是说
因为它是一个标准
虽然我们不能直接读这个文件
是什么样的
但是有很多工具
都可以查看
HDF文件内部的内容
所以说它损失了一点
对人类的可读性
损失了一点透明性
原则
但是它提供了非常多的工具
一定程度上弥补了这一点
而且它是自我描述的
就是说它的数据类型
就在文件里面
那么当我写入的时候
它是整型
那么读出来它就是整型
数据类型
是在文件里面写入
那么它就可以被自动识别
输入输出的时候
它的还原性就更高
它有一个潜在的缺点
就是这个标准在制定的时候
当时它考虑的只是英文的字符
那么对中文字符
有些读取器
有些语言的输入输出的库
是可以处理中文的
但是有些语言是不可以处理中文
所以为了保证它的兼容性
我们一般来说
HDF的时候
尽量不使用英文字母以外的
字符
这一点目前是一个缺点
希望大家能够留意
那么HDF5的文件结构分为
主要的元素分为三种
第一种是最基本的数据集
它就是Dataset
这个数据集
numpy
其实也非常像 它的数据集
多维数组
各种各样维数的数组
都可以
数据类型
有很多样
也可以自己定义
那么这些数据集可能很多
我们可能要把它分成几个类
那么对这个数据集归类
可以用这个组 所谓的Group
也就是数据集的
当成一个数据集的容器
然后组可以嵌套
比如说我说这个是校准数据
calibration 在水里边的
校准数据
得到的waveform
比如说这是一个组
calibration 水 是一个组
这个waveform是一个数据集
我们看这个格式里面
非常的熟悉
我看这其实就非常像
一层一层文件夹和文件
所以我们其实可以把这个组
理解成文件夹
把这数据集理解成文件
虽然它们是在一个
HDF这个文件里边的
也是它内部
这个文件内部
实现了一种类似于文件的
这样的访问的结构
还有一种是原数据
原数据可以作为
数据集的或者是Group的标签
比如说
我说Group
比如说water 这个Group
可能说
water的温度是25度
我可能就在这里边加一个标签
说参数是等于25
很多时候我们在做实验的时候
要记录一下实验的数据的时候
当然可以说有一个实验记录本
然后说实验是在什么条件下
进行
但是如果我们想象一下
按照一次性的原则
一次的原则
如果我们能把这个实验当时的
条件
五花八门的条件
都跟数据一起记录
肯定是会非常方便的
所以比如说 water
我们可以记录一下它的纯度
或者它的温度
或者是或者一些其他的性质
都可以放进去
那么这些数据
其实是用于metadate
python的hdf5的
输入输出工具一共有两种
一种是比较底层的
极简的一个工具库
叫做H5PY
我们看H5
就是HDF5的缩写
PY就代表python
它是一个极简的工具库
它其实
让python来调用
HDF5的C++的库
还有Python作为胶水语言
它可以调用其他语言的库
那么H5PY就在 C++的库的
工具库的上面
做了一层极简的兼容层
使得Python能够比较顺畅
的
调用HDF库的功能
而H5PY因为它调用的是
 C++的标准库
所以它数据格式兼容性很好
所生成的HDF的文件
送给其他语言
应该都可以用
交换的时候
兼容性很好
第二个是生的一个相对比较高级
的库
叫做PyTables
也就是python tables的缩写
它其实是在HDF之上
自定义了很多格式
对
读写都有优化
它变得很高级
但是这个问题它损失了兼容性
比如说 pet poss
生成的HDF文件
放到其它的语言
比如说
R语言
或者是Matlab语言
就很难把它读进来
但是H5PY生成的数据文件
就比较容易读进来
所以说
它是用性能换取了兼容性
所以说我们就面临一个选择
到底是兼容性和性能
两者不能兼顾的时候
我们需要使用
要选择兼容性
你比如说性能可能是慢20%
慢30%
但是兼容性有可能
换到一个奇葩语言
它就读不出来了
这是一个本质的区别
而这个性能呢是一个量的区别
所以说我们要选择兼容性
这个原则其实是在
从课程的一个参考书
着重的论述了这一点
比如说我们要取舍的时候
一定要选择兼容性
那么下面我们可以安装一下
 H5PY的工具
我们将选择兼容性
来使用 H5PY来作为
我们课程的
默认的工具
没有安装H5PY同学可以在
使用命令安装一下
我们来一起做
因为我也没安装H5PY
我们只要打入这个里面
首先是sudo
如果你现在是一个普通用户
你就是看你前面这个提示符
如果是一个美元符号的话
你就打一个sudo
然后apt是管理工具
install python3的
h5py
好我们来安装一下
安装的过程是这样
安装的命令
在
课前留的作业里边也有
大家都安装上了吗
有没有安装遇到问题的
没有是吧
没有
我们验证一下
看一下安装成功是什么样子
如果安装成功
我们进入python3
然后import H5PY
可以直接读进来
不会出错
同学们都可以import H5PY
不能import
import出错的同学请举手
非常好
有问题
其实这个安装
和昨天安装numpy
是一个道理
对有几个同学遇到困难
我们稍微等一会
那么已经安装上的同学
可以来探索一下
 H5PY都是什么
比如说
help H5PY
然后看它都是这样的functions
我们看对哪个functions感兴趣
我对run_tests比较感兴趣
还有6个failures
大家都可以运行H5PY
遇到困难同学请举手
好
非常好
还有同学们
已经熟悉了安装的技巧
好的
大家都知道
我们看一下
我来先import h5py 然后我们看
我们还是用这个with的命令
with h5py.File
我们把它写入w
windows下 wb
我们把它改成wb
as opt
看一下啊
h5py
注意File的F大写
然后我要输出hz.h5
wb
as opt
有同学问hz是什么
这是我刚才
生成的一个二维数组
10×10的变量
这可能不是一个好习惯
大家应该取一个有意义的变量名
我可能要被助教扣分了
我们看一下
命令是这样的
我们先把这个文件
用h5py把它打开
写入模式打开
然后这样有一个句柄叫做opt
那么opt呢
我们希望 hz 的变量
在opt里面
是一个
叫做hz的dataset
看来不能wb
我又出错了

那也就是h5py
它不区分binary和非binary
我们看到了这个世界的不完美
那么执行了 在路径里面
就有了hz.h5的file
我们看一下
hz.h5
我就说随手打了一个file命令
这个file命令是
看一下
这个文件是什么类型
小抄里边或许会有
我看 hz.h5
叫做 Hierarchical Data Format
那么如果我们想看一下
这里边是什么
我们用
用另一个命令叫做h5dump
我们还需要安装一下
h5dump
那么它应该是hdf5-tools
这里我疏忽了没有注意到
我的机器里边没有h5dump
请同学们安装一下
这个工具
hdf5-tools
那么mac的同学
有apt的同学可以
这样安装
可以这样安装这个工具
hdf5-tools
但是问题在于
因为 hdf5-tools
它是一个C++的工具
它不是python工具
所以用pip是没办法安装
所以使用mac的同学
可以用brew
如果你在用brew的话
你可以用brew
这个东西
好
我们又看到一个问题
在mac的brew里边
工具的名字就叫hdf5
然后在apt
这个工具叫做hdf5-tools
使用mac的同学
才用这个
那么使用WSL
或者是虚拟机
或者是ssh的同学
可以用
跟我一样的命令来安装
好
安装成功了
哪位同学安装遇到了问题
有个别同学遇到问题
我们稍微等一会
brew安装的时候
是不是还要编译
不知道同学们体没体会到
现在的系统里边
我们使用的这些环境里面
POSIX这个环境里面
一般都是带有这种管理器的
比如说apt这些管理器
那么当我们发现
有一个什么工具
没有的话
我们可以随手安装
只要网络足够快
还可以瞬间的
把缺少的工具都安装上
还是非常方便
这个工具就叫做包管理器 软件包管理器
有没有同学还遇到了困难
希望大家人手有一份hdf5
五
然后我们再继续
大家都有HDF5了吗
有了之后
会有一个程序
叫做h5dump
比如说h5dump
我们验证是否安装成功
我们可以打h5dump
然后help
如果已经安装成功的话
它会输出很多
帮助信息
教我们怎么用 h5dump
或者说我们可以打version
还有哪位同学
没有 h5dump
遇到困难同学下课的时候
再请教一下小助教和助教
我们现在下课
我们来看一下这个
应该它们是两种不同的模式
numpy
它是把整个数据
变成了一个字符串
然后就写进去了
然后
先变成字符串
然后直接写入
python默认的CSV
它还把 CSV 变成了
一个可循环的
比如说你for csv
它会先按行循环
然后你再按照
对行进行循环的时候
它会逐步的输出每一个列
它会去迭代器的形式暴露出来
我们都安装了 H5
hdf5-tools 或者 hdf5
然后我们解锁了一个新的命令
叫做 h5dump
h5dump 他是干什么的
我们可以看一下这个help
help可能太长了
看起来需要
可能需要仔细地读一下
我可以打 man h5dump
man 不是这个男人的意思
man 是 manual 说明书的意思
我可以看一下这个说明书
我们至少看一下
这是 h5dump
Displays HDF5 file contents
然后怎么用 h5dump
加一堆参数
加你要看的文件
然后我们看一下
第一行
也就是说虽然HDF5
没办法被人类直接阅读
但是借助h5dump
它就可以被转化成
人类可以阅读的形式
或者是变成一个
普通的文本文件
这就是这个工具的作用
大家应该还记得
上次我写了一个什么文件
应该叫 hz.h5
是吧
我们看了一下它的文件
类型
用命令看了文件类型
如果你不知道file怎么用
我们可以继续查查它的manual
因为我们看到一个陌生文件
不知道它是什么的时候
我们打个file就知道
那么就用h5dump
来看一下它的内容
这个内容出来了
首先它是一个叫hz.h5的
HDF5文件
它的最上层目录
这个根目录是一个
Group
这个Group里边
有一个DATASET
DATASET的名字叫hz
然后DATATYPE
STD
I64
integer 整型64位的
这个是
计算机内部表示的一个标识
然后DATASPACE
SIMPLE
是一个简单的
简单的存储形式就是10×10
那么这部分
为什么是 目前我还不了解
看起来是10×10的数组
那么这个DATA是什么呢
它就是0~99
就是这个文件的内容
我们看一下这个文件
大概有2848
大概2K然后看一下 hz.csv
好像比它还大
可能是因为是64位存储
我们如果用INT8
我们试一下
我们看hz的dtype是int64
因为我们存的是从0~99
其实我们把它
把它dtype改一下
看能不能这样改
其实我不确定它能不能这样干
竟然可以这样干
但是改了之后就不对了
看来是不能这样改
对这样就不好了
还是改回int64了
可能那样改是不行的
那么应该怎样改呢
同学们肯定会有这个问题
这有一个numpy的命令
叫做astype
就是说copy array
并且把它类型做转换
np.array也可以
所以刚才武益阳同学
有一个提议
说我们可以造一个新的array
array的输入
就刚才的hz 然后dtype让它变成
int8
这样就变成比如说 hz8
我稍微慢一点
稍微停一下
我们这个 hz
我们刚才看到
它是int64的
但是这只是0~100
我们知道只要int8就足够了
另一种
是hd有一个函数叫做astype
我们可以把它
转换成我们需要的
类型
比如说astype(np.int8)
那么这个
我们看到dtype
就是int8
这两种方法都可以
但是astype
它其实可以返回一个新的数组
而np.arrary
也可以返回一个新的数据看起来
astype可以稍微更简洁一点
那么我们就再试一下
用astype来输出
竟然没有变小多少
看来是这个文件里面
存储的时候有其他的
有其他的内容
刚才我看的是ls -l
l 是long的意思
详细地列出文件的信息
这里是文件的读
读写的一些权限
我忘了它是什么
然后这个是用户名和用户组
这是文件的大小
有文件修改的时间
它好像是
好像是文件系统里面的一个标识
好
我们不玩了
我们继续看
刚才我自己自作主张试了一下
是否能够把它的int大小变小
看这个文件会不会变小
看起来变小的不显着
从2848变成了2148
并没有变小太多
但是int64~int8
确实缩小了8倍
你说可见
对于这种
100个数字的规模
HDF5并不是很在乎
借调空间
好
我们这样就写入了一个
这个数组
到HDF5的文件里面
那么注意写入的风格
跟CSV其实是有差异的
里面相同的地方
就是它都要开一个文件
但是开文件的方式
很不一样
因为看文件的方式
也没有一个全局的约定
所以说不同的作者
会给出你不同的函数
用来进行文件的输入输出
那么HDF5
它是有一个这样大写的File
作为文件的
打开
然后当我们文件里存东西的时候
它是用一个像字典一样的东西
然后加一个赋值把它放进去
那么这是h5py的操作
回想一下
我们的numpy的CSV的操作
它是写入一个文件
再是通过一个函数
所以说不同的库
它的习惯
书写习惯还有区别
请大家注意一下
还是比较容易搞混
所以有的时候
每次我用这些库的时候
我都要想
它到底是什么样的语法关系
把它输出的
好在我用h5py
比较多
所以说
用多了也就记住了
但是如果你忘了
请
不要自责这个还很容易忘掉
很容易搞混
我们可以把这个文件再读回来
读回来也是用
with input
然后把它读进来
我们来试一下
注意读进来的时候
那么输入文件的句柄
它也当成了一个字典
到这儿的时候
它其实就把数组存在
 Hh5的文件里的数组拿出来
但是还要加一个...
这个...的意思是说
把这个数字都读到内存里面
我们来试一下
刚才已经存了hz.h5
刚才我进行了h5dump的操作
我们看h5dump拥有这些
那么 hz.h5
我们来把它读进来
h5py.File 这也是这个函数
读是默认的操作
所以我们就不用再加参数
ipt("hz")
我们把它赋给一个 h5-hz
从这里读出来
注意这里面要加一个...
才能把所有的数据
读到内存里
我们看刚才写入的时候是int8
那么读出来的时候
还是int8 非常完美
这个没有任何的变化和损失
这也是HDF5它的优势
它的类型可以自我描述
是什么类型
这个语句就相当于 ipt=h5py.File
 我们看一下它是什么
类型
它应该是h5py的
它是h5py的文件类型
文件的句柄类型
然后它本身不是一个字典
但是它给用户
提供了一个
类似于字典的接口
所以我们就可以在这里边
我们可以 keys
我不知道
试一下
好
可以 keys
我们看这里边
类似于字典的
h5py的文件里面
有一个叫hz的元素
我们就可以把这个元素取出来
把它取出来
我看这是
它告诉我们
这是HDF5的一个dataset
名叫hz
它的是10×10的一个矩阵
它的态度
i表示整数
1表示一个字节
那就是一个字节是
是一个字节
一个字节
就是8位
正好就是int8
所以这也是python里面常见的
因为python非常
核心的数据类型
就是字典
另一个核心数据类型是列表
所以很多时候
如果一个操作的对象
它可以抽象成一个字典的话
它就会模拟成一个字典
给我们来用
如果它抽象成一个列表
就会模拟成一个列表给我们用
这样我们在使用python的时候
很多对于字典的操作
或者是函数
各种各样的工具啊
都可以无缝的移植到
比如说h5py的文件上
这是一个非常好的问题
提醒我跟大家介绍一下
它的字典的接口
我们要特别的加一个...
才能把或者是中小括号
才可以把整个的数据
读入内存内存
但是我们这门课叫做大数据方法
那么数据有些时候就会非常大
一直大到连内存都装不下
整个内存都装不下
在这种情况下
HDF5依旧是有方法
它可以把文件分块读入
虽然这个文件整个很大
没办法一次都读到内存里面
但是可以先读一块 再读这一块 
从而完成这个数据处理
不会把内存
爆掉
那么这种操作
它的学名叫做out of core computing
如果想深入了解的话
可以搜索关键字
或者 out of core learning 
就是
超大范围的
或者是大数据驱动的这种
机器学习
有兴趣的同学
可以去了解一下这个概念
我们看同样的
刚才说有两个基本的类型
很多的库都会提供这样的接口
一个是字典
一个是列表
那么numpy
也是整个python科学计算的
整个社区或者生态系统里面的
最基本的
也是最标准的数据格式
所以很多的科学计算的库
它都用numpy的语法格式
来给大家提供接口
比如说
像我们刚才打开的文件
就ipt我们看到它的类型
是HDF5的dataset
h5py里边的
一种dataset的类型
但是这种dataset的类型
它其实也有numpy的
非常多的典型的功能
比如说我看它的shape
和numpy的shape是一样的
比如说我可以看到的dtype
这是numpy数组的特点
我们看dtype也是int8
我们可以做别的
比如说取第0行
取第0行的第一列
比如说可以这样
每两行取一行
然后每三列取一列
这样都可以把它取出来
和昨天我们做的索引
都是一样的
比如说我们
好
这个不可以
它的功能
没有实现完全
应该是不可以
不能倒着来
这么着来
是因为它
特意地模拟了numpy的接口
对于大部分功能都实现了
个别的功能它没有实现
比如说倒着
倒着输出
我看比如说从第三行开始
这都可以
所以说一个
 h5py的这样一个
dataset
它和numpy的
array的用法是一样的
但是
它其实没有完全的读到内存里边
它即使对应的dataset比内存还大
我们依旧可以做这样的操作
比如说我们几个希望
取得每100行取一行
把数组取出来
那么可能我需要的内存
实际上只需要1%
但是一般的方法
我需要把它全部读到内存里面
再取得1%
现在这个文件如果在硬盘上
我就可以
让这个文件
在硬盘的前提下
把需要的东西1%取出来
这样会可以保证
内存不会坏
就说这是 out of core computing
 一个核心的数据结构
这个数据格式 hdf5
为了展示
数据对象
实际上是存在硬盘上的
这个事实
我们可以先把句柄给关了
我们把这个文件
先把它关了
关了之后
这样不好
你先把它打开
先把它打开
然后我们给它赋个值
比如说它是 
然后我们把这个文件关了之后
再访问 core_hz
我们发现它是close HDF5 dataset
比如说它已经
就文件被关闭了
所以说这个数据已经反映不到了
这时候我们要再取
其中的元素的话
它就会出问题
因为这个文件已经关闭了
所以说可见
core_hz 它是存在于硬盘上的
而不是在内存里边的
但是如果我们重新来一遍
如果我们core_hz
当我们创建core_hz的时候
把它都读到内存里面
用中括号
小括号都读到内存里面
那么core_hz我们可以看到
它其实是一个
读成了一个numpyarray
在内存里面
所以说这是HDF5的一些
针对大数据非常优化
非常实用的特性
那么刚才讲到有DATASET
不仅有DATASET
还有GROUP 我们怎么创建GROUP
用 creat_group 命令
比如说我们说
要输入
输出这个文件 hzg
那么我们创建一下
create_grou[
这个group叫做 home
这样就有了一个home
有了home之后
就相当于
每个group相当于一个字典
相当于我找到home之后
这有一个新的字典
我把它刚才的文件
刚才数组把它放进去
应该没问题
我看一下
我们看一下
是我们刚刚创建的文件
这个文件和刚才的文件没什么
区别
区别就在于我在这里边
加了一个叫做home的group
而dataset
放到了 group里面
这是唯一的区别
那么从 group里面
我们再把它读出来
是一样的
比如说
with
然后把它读出来
再把 dataset 读出来
再把它都放到内存里
这样我们就把它读出来
它为什么变成了int64呢
没有问题
好
关于HDF5大家有什么问题吗
包括刚才的写入和读出
还有组
我们暂时我们用不到metadata
等一下我们遇到的时候
再去详细的讲
然后看来大家都没有疑问
因为最开始我们没有创建组
它就有一个默认的
全局的组在那
那个组我们其实看h5dump
我们看到有一个全局的组
像 POSIX 文件系统的
根目录一样
就是斜杠表示全局的组
这是我们带home组的
如果不带home组
我们看
它还是有一个默认的组在这
调整分组
可以
刚才同学的问题是说
如果我对于这样的一个
DATASET hz  
它在home组里边
我如果把它想移动到其他的组里
比如说
这个根组怎么办呢
移动的时候
其实复制一步
再把原来的删除就可以了
没有一个特殊的移动的程序
但是在操作的内部
它没有把这个数据拷贝过来
它只是改了一下
链接的指针
我们可以试一下
比如说
我们要做一个hz的移动
把它从home组移到这个根图里面
我们把它打开
这样它就不是
比如说我以
我以读写的方式打开
不可以读写
那么我看一下
它里面有home
我开错了
应该开那个g
然后我看这里边有home
Home里面有一个member
这叫hz
有同学探索了一个新的方法
会这样
这是一样的
而且之前我们省略了最顶层的
如果在这加个斜杠
也应该是一样的
所以可见它有非常多的写法
在Python里面
它可以抽象成一个字典
套另一个字典
HDF5它的原始的
这种语法里边
它可以用一个像路径的格式来写
比如说
我们可以把它移动到根的组里
就这样被移动了
这个时候应该
不涉及数据的拷贝
然后我们再把它删掉
应该是这样del
就可以把它删掉了
然后我们把文件close
我做了三个操作
第一个操作是说
把home里边的hz放到这个全局
group里边
第二步操作是把原来的删掉
第三步是把它关掉
我们看一下
现在根的group
它里边有两个元素
一个元素是一个空的
叫做home的group
另一个元素是我刚才移过来的
DATASET
这样就可以完成移动的操作
它没有一个
我还不知道
不知道它有没有移动的操作
专门的移动操作
但是可以先复制
再删除
完成
复制的时候
大家也不用担心
它不是说
把整个的文件
又生成了一遍
复制过去
应该只是更新的一个指针
大家还有什么疑问
关于HDF5 我们可以看到HDF5
它的表现力
其实就非常强的
它甚至里边有一个
像目录结构的东西
那么HDF5
几乎可以表达出我们所遇到的
所有的实验数据
目前我还没有看到过反例
而它又是一个开放的标准
那么所以说
HDF5就是大规模数据处理
非常
非常方便的格式
值得一提的是
 Matlab
有一种data的数据格式
叫做.mat文件
这个.mat文件
其实就是HDF5 所以说可见
hdf5格式
在整个的
不论是工业界
还是学术界
影响
都是非常深远
而且因为HDF5 它可以由其他的语言读进来
所以说
用python处理的一些 无论是输入
还是输出
那么有了HDF5之后
即使你的
你的队友不会用python
他会用Matlab
那么你可以
你们之间可以
通过一个数据的流水线
用HDF5把它连接起来
其中你们交换HDF5
或者说它不会Matlab
只会R
那么用HDF5也是可以的
最后一个格式
我会讲一下json
json的作者
其中曾经给叫做json的人道过歉
说给他们的生活
造成了很多的不便
继续
比如说你在生活中
经常听到别人喊自己的名字
然后也是一种
所以作者之前给他道过歉
说
他当时没想到
他创造的标准
能够流行的这么广泛
那么json是什么
它是 JavaScript
Object Notation 的缩写
然后可以看到
它其实是和
 JavaScript 有
非常深的渊源
那么JavaScript
相信
做一点网站
或者网页开发的同学
会有印象有
JavaScript
就是做网站前端的
目前来说的
最受欢迎的语言
那么即使不做网站开发
我们每天每时每刻都在用
JavaScript
只要我们上网的话
再开浏览器的话
基本上都会用到JavaScript
比如说现在我播放的 PPT
PPT
不是一个严格的词
我播放的讲稿
它就是用JavaScript
实现的
那么最开始JSON数据结构
它是
从做网站的需求来的
比如说
我要在网页里面
显示一些动态更新的内容
那么这些动态更新的内容
肯定是用户输入的
或者是从哪里抓取
那么它这些内容
肯定是有一个来源
比如说从某个数据库
提取出来
或者是从别的地方传输过来
但传输肯定有一个传输的格式
这个格式在JSON出现之前
是用xml传输的 
xml的这种格式
它其实设计的也挺不错的
但是它有个弊端
它不具有透明性
也就是说
当这个格式
变得很复杂的时候
人类一读他就会非常的头大
所以说开发者就非常不喜欢
 xml
当JSON出现之后
人类也可以读懂
机器
也可以读懂
所以人类和机器
就更加和谐的相处
可以更加相互理解了
所以说很快 xml就被
网站开发的社区抛弃
现在虽然还残留些xml
基本上新的工具都是基于JSON
那么JSON
后来也成为了一个国际的标准
这使得网站开发中的数据交换
更益于人类
理解
而且它非常适合传递
有层次的数据
特别是像文本这种类型
特别是像网站里边
这些文本
从数据库提取出来的文本
然后可能是有段落
我第一级第二级第三级
这种结构非常适合用JSON来表达
那么JSON优点
它是跟 Python的字典
非常相近
一会我们会看到
 JSON的例子也是一样的
它在python里边
它就是伪装成了一个字典
我们根本很难把它区分开
我们就把它当成字典
用就行
那么它的缺点
因为它依旧是一个纯文本
它是纯文本
那么它就需要把数字
特别是浮点数转化成文本
转化的过程会有误差
所以它对数字的表达能力
其实是比较弱的
因此在这种非科学的情况
在这个网站里面
JSON比较多
非数值的情况
那么科学的情况
用JSON其实也有不少
因为在一个大的科学实验里面
不仅有采过来的数
还有别的信息
比如说
这个实验的
比如说什么
比如说每一个事例
然后我们加一个什么代号
然后元数据 metadata
可以用JSON来传
比如说我采集下来的HDF5有
一大批目录
那么HDF5本身
我们可以用HDF5的metadata
也可以用JSON来做一个索引
这些我们一会儿
接下来应该会碰到这些例子
到时候我们再具体去讲
现在讲可能会比较
空中楼阁
总之JSON的数据格式
有这样的特点
好
怎么使用JSON JSON目前是python
自带的
我请同学们下载一个文件
叫做
BBH_events_v3.json
网络学堂
大家如果手头有JSON的话
就不用下载这个文件
如果你手头没有JSON文件的话
就下载一个样例文件
LIGO数据集下载
这里有下载地址
大家先不要下载那些大文件
因为我们今天的网络稍微差一点
这个JSON文件就是这个样子
这里有
这是清华网盘可以看到的
文件
我们看一下
这个文件
首先JSON的格式
它其实就是一个纯文本
那么纯文本有一点结构
这里有个括号
括号里面
第一个
然后有个冒号
后边还有个括号
看起来是不是非常像
 Python的字典
这就是它的
它的键
这就是它的值
这是它的键
这是它的值
而且键值对之间
也是用逗号
分割的
它简直就是python的字典
然后看
字典的里边
这个键对应的值
它又是一个字典
这个字典还是可以跟字典进行
看起来是可以进行嵌套的
然后这里边有各种的数值
它的name
这里都是字符串
这里还可以是简单的数字
这里还可以嵌入列表
啊这个列表我们看
竟然和Python的列表
也完全一样的语法
我怀疑这个作者
当时是受了python的影响
我不知道
当然大家可以考察一下这段历史
我们看这个东西
直接拿过来就可以用了
就可以读到python里
我们来把它
大家先下载一下文件
 Download
2.2KB 如果大家手头
有其他的JSON文件
也都可以
不是非得读这个文件
好
那么我们把这个文件下载
下载下来
放在我们现在工作的目录下面
大家知道
你工作的是哪个目录吗
好像不知道
放在一个你知道的地方
是吧
比如说我用的目录在这里
我已经下载了
给大家
给大家两分钟时间
你把这个文件
放到一个你知道的地方
用 windows的同学把
这个文件
下载到一个文件夹之后
你可以找到
它在windows里面的路径
然后你可以在
 WSL里边
访问目录mnt
然后比如说是
c 或者 d 或者 e
然后你再访问什么
比如说Document
另外一种可能
你可以用VScode的那个remote
在你的工作目录里面
新建一个文件
新建文件之后
把JSON复制进去
也可以
但是你要找到
你把这个文件放那了
好
我应该是能找到的
我就把它放在了
我的当前路径里面
import json
就把JSON读进来了
 json.load
我刚才是把我的
比如说我用一个完整的路径
它是在这里
当然你要把它换成
你所知道的json文件的位置
 大家不要看我路径
每个人的路径都不一样
你只要找到这个文件就行
如果这个文件就在
启动python的当前目录里边
那么这些就都不用打了
就这样打就可以了
比如说我把它取名叫
如果你把它保存到
比如说C盘还是D盘
你就要看一下你
这个文件的属性里面
有一个路径名
然后
你再从 WSL的路径数过去
找到那个文件
把文件的路径名写到
这里
我刚才在下面发现
同学们好像对这个操作不是很
熟练
所以说
稍微有点担心
同学们都能把它读进来了吗
不能把它读进来
也是这样的
你要用这种斜杠
要用从右上到左下的斜杠
你要这样打进来
但是你要找
路径在哪
你可以ls
比如说一点一点把它
把它找出来
摁TAB 一点点把它找出来
比如说我的是在这里
然后这里
这里
这里就是这个文件
然后我比如说可以FILE看一下
然后JSON
我把这个文件拿过来
放到loadopen
文件名里面
发生了什么
文件名过长了
我们发现
还会出现这种情况
这个配色太糟了
配色太糟糕
我可以先到路径里
比如说刚才我找到的路径
先到这个路径里
然后再执行python
然后再read出来
这回就好了
我有打错
应该是load
不是read
这样一个命令
然后同学们这个路径
你一定要用你的路径
不要用我的路径
同学们都能读入吗
不能读进来的同学请举手
都遇到什么问题
有一个同学的问题是
他直接把路径的字符串
放到这个load里了
所以犯了跟我刚才一样的错误
你需要先把文件open出来
然后才能load
大家要注意
我这里面有两个函数
一个是json.load
load传的参数
是一个open的函数的返回值
这是两个函数嵌套出来的
还有一个同学遇到的问题
是mnt在找路径的时候
因为windows里边
你的资源管理器
或者我的电脑打开之后
 C D E都是大写的
但是在WSL里面
这些都是小写的
来注意这个盘符是小写
哪位同学没读进来
刚才遇到了一个问题
一位同学找到了WSL对应的
 windows的路径
路径可能是什么
然后 wsl什么途径
然后把 json 文件存到路径里了
然后希望能够从 wsl 的环境里
出现在 home  wsl的home里
但是事实证明
这个方法是行不通的
因为WSL它的原因是
 windows的文件系统
它不支持POSIX
标准环境接口
所以说
在WSL里边
模拟一个POSIX的时候
它并不能直接使用
 Windows里边的硬盘
它是加了很多抽象
之后才能用
所以你目前
WSL还没有这个功能
你直接把文件放在它的底下
它的上面应该是看不到这个东西
这个是我猜的原因
大概是这样
所以说请使用这种方法
或者是把文件粘到这个环境里
那大家都可以读这个文件了吗
刚才有些同学遇到的问题是
mnt前面一定要有斜杠
不能忽略
还有哪位同学
无法读出找到json文件
基本上都解决了
刚才遇到了几个共性的问题
给大家解释一下
那么把文件从windows传
到 WSL的操作
还是很重要的
我们会经常的
把数据文件放在这里
所以稍微比较可靠的
然后推荐用这个方法
因为刚才其他的方法
比如说在数据里边
不是在WSL里面
粘贴进去
对于这种json的小文件可以
但是如果特别大的文件
还是这样来做比较可靠一些
或者wget
也行
但是清华网盘能wget
我们下一批数据文件
我们wget
这个问题还是比我想象的复杂
刚才遇到困难的同学
现在都解决了吗
有没有还没解决的
好
大家都可以找到json了
是吧
我们每个人自己的路径
我们把它读起来
叫做evts 我们看一下evts是
什么样的
看起来很乱
那么我们一点一点看
比如说 evts.keys
看他里边都有什么keys
这里边有这个
GW150914
然后VT151012
是吧
那么我们来对比一下
它其实就是这几个keys
就是这里边的 json的这些key
这些键
就是这样的
然后因为它就是一个字典
所以我们就可以把第一组 
GW150014把它读出来
看能不能读得好一点
没办法
它就是一个字典
我们回到我们的
这个里边
这个读出了keys
然后我们看一下keys里边都
有什么
有name 有 H1 L1
 fs 这样
我们对比一下这个文件
其实都是一样的是吧
没问题
那么这个json
其实就是一个当做字典来用的
数据形式
那么接下来
我们还可以把它输出出去
比如说dump就是输出
我们可以看到
numpy用的是loadtxt
savetxt
HDF5 就是一个大写的File
结果json它是有
dump 和 load
大家用的词都不一样
所以说很容易来记混
所以大家使用的时候注意一下
我看dump是要怎么用
我忘了他怎么用了
看一下
dump 是 object
这里面放变量
这个地方放文件
然后就可以到
我们看
前面object 我们的那个是
evts
然后是文件
我们先要把它打开
以写的模式打开
那么这个文件我们新命名
比如说叫
然后把它写进去
看起来我这个地方还不能写b
不知道windows是什么
情况
Windows是需要打b的吗
同学们都成功了吗
没打b就成功了是吧
看来只有numpy是要打b
这个太玄学了
我们来看一下这个
刚才新出来的文件是 BBH_rewrite.json
我们看一下
你看rewrite成了一个这样紧凑的
格式
但是对于人类来说
看看的不太明白
是吧
虽然它们是一样的
我们再看一下
这个dump函数
有没有什么其他的选项
能够让它漂亮一点
比如说 
看起来缩进
这个看起来很像
是吧
我们需要的漂亮的输出
在indent level的时候
你看indent它
这里indent的参数
它默认是None
默认
这个情况下是 the most compact
representation
所以我们来换一下
让它indent
让缩进两个格
缩进这两个格
它看起来就可以漂亮一些
和之前的一样
比如说我们看它就是把嵌套的
字典
能够把它输出到硬盘上
这是
这是 json dump 做到的
同学们都成功了吗
遇到困难的请举手
都没有遇到困难是吗
这是json load的时候
把这个文件名
load进来
就可以得到这些
然后dump
把evts可以dump到文件里面去
这是
两个
命令
所以我们看到了三种数据格式
那么三种数据格式
最简单的是CSV
CSV一般来说
我们如果没有特别需求
其实可以用CSV 还是挺好
因为至少CSV还可以用
 Excel打开
可以很直观的
用这个表格功能来
来处理它
那么CSV他
它有很多问题
它第一个问题是
它只能表达表格
如果我们
不是表格的话
如果它不是表格
如果它不是表格的话
一般我们会用json 因为毕竟字典
把字典进行嵌套
可以表达出来非常多的数据结构
那么如果我们要求这个数值输入
一般我们会用HDF5
一般来说是这样取舍
对于我们实验物理这个领域
一般来说
HDF5会用的比较多
因为大多数这个实验数据
都是数据型
对于一些小规模的数据
或者是规模大
大数据
变大的话
就变成一个HDF6
而小规模的数据
或者是比较简单的数据
如果能用CSV我们就可以用
CSV
那么他们的优缺点
json 它主要缺点
也是数值的问题
所以说
如果它不是
然后还是需要
数值计算的话
那么也可以从json换到hdf5
所以说终极的 可以这样认为
终极的解决方案可以是HDF5
虽然它是终级的解决方案
它就有一个很大的缺点
它不是透明的
我们直接用nano什么的打开
看不到
它里面到底是什么数据
我们还得用一些特殊的工具
比如说h5dump
比如说python
把它读出来
但是对于这些特殊的工具
已经非常普遍了
非常普及了
在各个平台都有可以非常自由的
取得
而且有多种多样的工具
所以说在这种情况下
它的透明规则的破坏了
也被伤害也降到了最低线
所以说
从复杂性算HDF5是最复杂的
然后他也是功能最强大的
所以说
在实际的情况下我们看
什么时候适合用什么样的格式
这个大概
希望同学们能够啊
有一个初步的判断和选择的
基本的规则
所以接下来
我们会做一个
关于HDF5的作业
这个作业是在
网络学堂
我们来实际操作一下 HDF5
它的输入输出
对吧
我们看一下作业
这个作业是干什么的
问题背景
问题背景
我们可以跳过了
问题描述就是说
我们要输入一个文件
然后PPhappy 下面有个PPMatrix
这有个数据集
这个数据集我们读到
读到python里边
然后用numpy给矩阵进行
转置
转置了之后
再把这个文件写入
另一个文件
那么写完了之后
就可以完成了
所以说
这个作业也是非常的
逻辑上非常简单
所以考察大家
只是对于HDF5的操作
我还是不带着大家做了
感觉这个作业还是非常的简单的
我看一下
把 HDF5文件读入
然后对它进行一个操作
再输出就可以了
在我们课上已经讲到了这些
些个操作
然后这里边
可能遇到的
比如说create_group
还有create_dataset
可以用助教
给的默认的dataset
就没问题
然后到底怎么做矩阵转置
大家可以搜索一下
如何进行
数据的格式的基础
其实我们就已经把大作业需要的
基本的
基础的技能
都已经准备好了
所以
在明天会把大作业的具体要求
发布出来
包括输入数据的格式
应该大多数都是HDF5的格式
输出也是会用HDF5来输出
那么前两周的课程
对应的大作业的第一个阶段
在物理场景下
把这些数据
从真实的世界中的值
一步一步生成出来
生成出模拟的经过实验仪器
所收集下来的这种数据形式
也就是说生成过程
然后第三四周的课程进入
大作业的第二个阶段
用于把这个过程倒过来
进行数据的分析
就是从我们实验仪器
所收集到的信息
反推最开始生成它的数据
那么分析数据这个过程
都是开放的问题
肯定大家有无限的探索空间
甚至肯定
我相信肯定会有同学的方法
会比我的更好
我不清楚
我们明天来具体把这个定义一下
定义出来
剩下的时间
同学们可以做一下作业
然后做作业的时候
遇到什么问题
可以跟大家讨论
或者是跟我提问一下
没有问题的同学可以先下课
** HDF5
** JSON
