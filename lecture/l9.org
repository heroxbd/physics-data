#+Title: GNU Make 数据生产线
#+Author: 续本达
#+PROPERTY: header-args :eval never-export :exports both

* make 基本概念
* make 在计算集群的应用
  当今的超级计算机，大多由分布式的集群构成。集群是多台独立的，可互相高速通信的计算机构成。每台计算机相对于集群，是一个“节点”。人类操作集群，在一个“登录节点”上交互实现。通过登录节点，把任务提交给调度器，调度器根据情况，如节点的计算饱和度和任务需求等，把任务分配给计算节点，达到协调把千万个节点协同运算的效果。调度器能接受多名用户的任务提交，从而实现计算资源的共享。
  提交任务由在程序前加上调度器来实现，例如清华的计算集群，使用 IBM platform LSF 的 =bsub= 程序。我想在节点上执行 =ls= ，只要 =bsub ls= 即可。使用 =make= 驱动集群计算，只需令 =make= 在执行程序时，通过任务调度器完成。提交可分为同步型和异步型。同步型调度时， =make= 等待程序在远程计算机上执行完成，再执行下一个任务，通过 =make= 自带的 =-j= 参数来增加并行度，适合 1000 个任务以内的规模。而异步调度时， =make= 提交任务后，旋即提交下一个，任务的依赖关系要由任务系统的依赖配置实现。 =bsub= 通过 =-w 'done(previous)'= 来表达本任务必须在名叫 =previous= 的前一个任务执行完成后再运行。此时 =make= 负责定义依赖关系，调度器来达到更高的并行度。这样获得的计算能力会远超单个服务器。
  登录节点就是一个可通过 =ssh= 等工具交互的 GNU 环境，与我们在本地配置的无异，没有额外的门槛。
