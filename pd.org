#+latex_HEADER: \usepackage{siunitx}
#+latex_HEADER: \usepackage[version=3]{mhchem}
#+latex_HEADER: \usepackage{mathrsfs}
#+latex_HEADER: \usepackage[export]{adjustbox}
#+latex_HEADER: \usepackage{pgf,tikz}
#+latex_HEADER: \usepackage{wasysym}
#+latex_HEADER: \usetikzlibrary{arrows}
#+LATEX_HEADER: \usepackage[UTF8]{ctex}
#+LaTeX_HEADER: \usepackage{appendixnumberbeamer}
#+LaTeX_HEADER: \setCJKsansfont{Noto Sans CJK SC}
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args :noweb yes
#+sTARTUP: beamer

* 价值
  - 工具审美

    学物理的同学亟需

  - 实践性的课程：没有必要记忆，但一定要在短时间内实践
* Python for everyone -- control flow
** Why do we program?
   - Delegate repeatative tasks
   - Record what you did
*** Digital age
    - We just buy device, use devices.
    - How about we understanding devices, fixing devices and making devices?
    - Programming is one important step. You build your world, change
      the world and participate in creating and nurturing of
      civilization by programming in this age.
    - If you don't know programming, someone else will design your world for you.
*** Not only a programmer needs to learn program
    - Not even a physicist.
    - Everyone needs to a bit of programming
      - Secretary
      - Sales champion
      - Accountant
      - Manager
      - Cab driver
** Why Python?
   - Python is a self-organized community.
** Python environment
   - Real GNU/Linux
     + Debian
     + Gentoo
   - Jupyter based
   - Windows based

     Windows based Python installation has caveats, because Python is
     developed under Unix.  Be prepared for unexpected bugs if you
     decide to use Python on windows.

   - Can't or don't want to install software on your computer?  Check
     out PythonAnywhere, Trinket, Cloud9, or CodeAnywhere.

** Choose an editor
   - Emacs
     https://github.com/redguardtoo/mastering-emacs-in-one-year-guide
   - Vi
   - Others
     - Visual Studio Code
     - Atom Both Emacs and Vi have steep learning curves, they are not
       easy to learn.  But if you master any of them, they pays you.

       Don't use Microsoft Word or Windows Notepad, they are not for
       programs.  Because we need an editor that do plain text and
       syntactically correct.
** Playground
   https://www.py4e.com/tools/pythonauto

   Do we need one?  I don't think so.

** Jupyter
   - Causal way to completing classes.
** Installing Python
   + Windows
     - Not impossible.
     - No good package manager.
       - ... what is package manager?
       - pip on windows is a hack.
     - Snipping tool.
   + macOS
     - No good package manager.
       - Need extra care when using pip, easy to screw up.
   + GNU/Linux
     - steep learning curve.
     - not everything is obvious.
     - pays you back if you are committed to deal with data and
       programs: experimental physicist, data scientist, quant, etc.
       That is the main audience this course is targeting.
     - I am going to give lectures, examples, demonstrations on
       GNU/Linux with Emacs.
   + You can try them if you are brave, and you are encouraged to find
     your own work style.
** Submit screen shots
   - Needed skill for online discussion.
   - Anonymous discussion groups, piazza "Not good", commented by
     Harry
   - git
     classroom
     https://github.com/CS50Demo/assignment-1-introduction-to-programming-heroxbd-1
** Version control and Git
   - jiegec's lectures.

   https://cloud.tsinghua.edu.cn/d/f3f13a46ed4c4b5386f9/
** Write paragraphs of code
   - Basic
programming
structures
     - sequential
     - conditinoal
     - iterative
     - recursive
   - Early
exit


*** Further Reading
    - A proof that all reasonable programs can be decoupled into
      combinations of the 3 constructs. ???
    - Structured program theorem
      - Goto statement considered harmful

    - https://en.wikipedia.org/wiki/Structured_programming
    - https://en.wikipedia.org/wiki/Goto#Criticism
** Expressions (including statements)
   - Reserved words.  Not used for anything else.
   - Variable
     - Case sensitive
   - Insane vs letter vs mnemonic
   - Covered in 程序设计基础
     - 设计成练习，作为 git 和 jupyterhub 的熟练练习
   - Keyword is historical
     - **
     - *
     - /
     - %
** How to debug
   - Read error message
   - type()
   - duanzi: 不要用浮点数表示钱——电影 Office Space
     银行用浮点数记账，有误差，被主角用来薅羊毛
** User input
   - 在数据分析中没什么用
** Branching
   - Python 语法的特殊之处
   - 强制缩进: 程序员编辑器非常重要
     - Tab vs space
   - Conditionals: if.. elif..  else
   - Try... except
     - Why can't it be replaced by if.. else?
** Loops and iteration
   - Computers to repetitive task human don't want to do.
   - while loop
   - for loop
   - counting in loop
   - filtering
   - 都作为习惯考察，视同学的基础压缩授课时间
** Types
   - None
** Functions
   - Reuse code

     Dont repeat yourself
   - Function with a return

     consistant with mathematical definition
   - Argument variable
   - 太简单了，引入递归

   通过练习保证同学们掌握
* Python for everyone -- data structure
  What python distinguishes itself from C
** String
   - length
   - indexing, slicing
   - Why index starting with 0?
     Dijkstra argument
   - string concatenation, compare with C
     - unicode string
   - in: logical operator
   - string library is a set of toolkit to use
     - dir(str): very useful tools
** 参观科学博物馆 可选
** Files
   - read text files: just use for to loop through.
   - open, close and `with` context
** List
   - List a powerful container.
   - Indexing compared to strings.
   - Append.
   - List and string combo into text parser.
** Dictionary
   - The central data structure of Python.
   - Dictionary: key-value pair
     - As opposed to List: ordered collection
   - Python itself is implemented with namespace and dictionaries.
     - What is a language namespace?
       #+BEGIN_SRC c++
         using namespace std;

         std::stdout
       #+END_SRC
   - Example: word counter.
     - get with a default counter value.
   - 2 iteration looping mode:
     #+BEGIN_SRC python
       for k,v in d.items():
     #+END_SRC
** Tuple
   - Tuple is non-mutable.
   - tuple can be used on the left-side of an assignment statement.
   - List comprehension: beauty of Python.

** 课堂教学，例子
   - 使用邮件库，文本处理
** 参考书
   - Think Python 2e
** 辅助资料
   - https://www.tutorialspoint.com/

     印度的编程样例网站，适合通过例子快速入门一项技能。

   - https://scipy-lectures.org/intro/intro.html

     由 Python 科学计算领域最资深作者亲自执笔编写。
* 用 Python 玩转数据
  http://www.icourse163.org/learn/NJU-1001571005
** Python 入门介绍
   - 主线是 Python 的广泛应用
   - 交互模式和文件执行模式
   - 缩进
   - Python 中的常量
     - stu-name 不是合法的变量名
   - 屏幕书写很适合制作 MOOC
   - 讲课很口语化，在 MOOC 上更有亲和力
** 模块
   - 模块是一个逻辑概念，文件是与之对应的实体概念
** range 迭代器
   好处：用多少就生成多少，甚至可以制作无穷的迭代器。适合大数据应用场景。
** 作业
*** 寻找第6个默尼森数
* Learn to Program -- The Fundamentals
* 计算机科学和Python编程导论
* Linux 入门基础 - 网易云课堂
  苏勇
  https://study.163.com/course/courseLearn.htm?courseId=232007
** Linux 系统安装
   - VirtualBox
     - 针对运维工作
       - 软件保守，不适合学术
       - 命令行为主，与科学计算很类似
     - 运行在 macOS
   - 使用英语环境
     - 中文的高质量资料很少，中文的社区非常薄弱且小众
     - 英语是程序的天然语言，对科技表达更丰富
     - 世界目前的约定，各国科学家都在通过英语交流
   - 如果立志建设中文社区，请先通过英语学习成为高手
** 命令行界面
   - 与计算机交互的精髓
     - 比随意点选更有助于可复现性
   - 更方便地操作远程的计算资源
** GNOME
   - 有助于渐进地加入命令行
   - 图形界面未必能真切表达人类的意图
   - 图形界面的开发更耗时费力，“易用性”是以开发难度为代价
     - 科学研究更关注本质
** CLI shell, bash / zsh
   - shell 相对于 kernel，在 kernel 之外
   - 用户通过 shell 把命令传给 kernel
   - bash 的提示
   - 命令、选项、参数
     - hostname
     - ls
     - uname
     - clear
     - id
     - passwd
   - 参数：短线、双线，GNU 约定
   - Shell 后台进程
   - Tab 自动补全
     - unique
   - zsh 可以补全参数
   - 上下方向查找历史，Ctrl-r 搜索命令。
     - emacs 快捷键约定
   - ESC-. 上一个命令的选项
   - *, ?, [0-9], {}
   - Ctrl-Z 挂起
     - jobs
     - bg
     - fg
   - 其它命令
     date, uptime, head, tail, less, cat, lspci, zip, tar, find
** 编辑器 vi, emacs
   - Unix 一切都是文本，因为一切皆可用文本编辑器修改。
** 文件系统
   - 目录结构，当前工作目录
   - "."开头的是隐藏文件
   - touch 更新文件时间，不存在则先创建
   - ls -d: list directories themselves, not their contents
   - file 类型
   - 绝对路径、相对路径
     - Linuxcast 图
   - . .. ~ -

   不仔细讲，只做练习
** 文件操作
   - cp, mv, rm, mkdir, rmdir

   不仔细讲，只做练习
** 系统目录 FHS
   - /bin, /sbin
   - /boot
   - /etc
     文本的配置文件
   - /tmp
     临时目录

** 硬盘在系统中的表示
   - /dev/sda, /dev/nvme0
* 实验楼 - Linux 基础入门（新版）
  - 交互式地学习
  - 文件的基本操作
* Data Manipulation at Scale
** Big data
   Any data that is expensive to manage and hard to extract value
   from. - Michael Franklin UC Berkeley

   - 10000 100KB Excel 表格
   - 134万条边，1万个节点的复杂网络

   - Erik Larson, 1989
     - The keepers of big data say that they do it for the consumer's
       benefit. Data have a way of being used for purposes other than
       originally intended.
* data science foundations R
  https://www.coursera.org/specializations/data-science-foundations-r
* Reproducible research: new self-paced session from March 20, 2020!
  https://learninglab.inria.fr/en/mooc-recherche-reproductible-principes-methodologiques-pour-une-science-transparente/
* 参考书：Linux Sea
  http://swift.siphos.be/linux_sea/
* GEANT4
  https://groups.lal.in2p3.fr/ED-geant4/ttt/program/

  - 从 Python 起，非常友好的入门。注重可视化。
  - Structure of Geant
    - Run
    - Event
    - Track
    - Step
    - 每天一种，一个可视化的方法
  - Run an application
  - Collect information
  - 只做入门教学，教给同学深入学习的方法
** Introduction
** Geometry
** Primary Paricles
** Physics
** Scoring
* GitHub Classroom
  Use as official homework platform.
** Assignments
   - starter code
   - generate invitation link and distribute
   - Individual assignment, review by pull request
** Skills for the future
   - Teamwork and collaboration
   - Popular industry tools
   - Project management
   - More github features is needed
   - 2-2.5 month to familiar with Github
** alternatives
   - CATSOOP https://catsoop.org/
* 平时作业
  - 细化，标准输入输出
** 学风
   ……追求短浅，境界低，不肯有更长远的设计。这是非常重要的学风问题，但是有好多人谈学风问题时，还是不抄作业，论文自己写。这个问题为什么在研究生层次更突出，就是和破五唯有深刻的联系。学生中很有市场的“攻略观”实在是很普遍。攻略就是目标函数值外部给定的，我只要多快好省，maximize 我的结果，minimize 我的 cost。这是功利的一种体现。我们在评特奖时，现在清华的某些老师，甚至某些院系都在强调“攻略观”，因为他们希望自己的院系能常年保有特等奖学金。博士选题，希望早出成果，快出成果。
* Berkeley Course
  Data science and Bayesian statistics for physical sciences

  https://data.berkeley.edu/news/new-physics-data-science-course

** Goal
   Modern tools in data science and data analysis in physics.

** Audience
   Upper division undergraduates.

** Topic
   - Theoretical, practical, their most common applications in
     physical sciences.
** Grades
   30% projects, 40% homeworks, 30% class participation.
** Table of contents
   - Numerical integration
   - Introduction to probability and Bayesian inference
   - More on Bayesian inference and intro to data modeling
   - Linear Algebra
   - Information theory
   - Nonlinear equations and 1-d optimization
   - Optimization in many dimensions
   - Monte Carlo methods for integration and posteriors
   - More advanced Bayesian analysis
   - Variational approximations
   - Interpolation and extrapolation of data
   - Fourier methods
   - Ordinary and partial differential equations
   - Classification and inference with machine learning
** Programming environment
   - Jupyter notebook

** Planck
   A series of tasks

   Use measurement of Planck satellite power spectrum to determine
   cosmological parameters.

   - Optimization, find MAP/MLE best fit parameters
   - Determine covariances of all parameters using Laplace approximation.
   - Fisher matrix experiment design predictions.
   - analyze MCMC chains burn-in phase, Gelman-Rubin statistics, and chain
     correlations.
   - Plot 1-d and 2-d distributions and compare them
     to MAP/Laplace approximation.
   - Change one parameter and use importance sampling to produce new
     posteriors.

** LIGO
   Use matched filtering methods and FFT to analyze first LIGO event
   and show it has detected gravitational waves.

** Machine learning on galaxies
   - train the ML algorithms for regression
   - test the training algorithms
   - try KNN, gaussian processes, linear and quadratic regression,
     support vector machines, neural networks, random forest...
   - classification: use galaxy zoo galaxy
     morphology (spirals ellipticals, irregulars...) training dat.
   - Use photometry first, then add image information and observe how
     the accuracy improves.
** grader
   https://okpy.org/
* 公告时间
  1. 小助教申请 7月1日24点截止
  2. 7月2日上午
  3. 大作业替代的提出 7月7日24点载止
* workstation
  |                            | Price | Link                                                   |
  |----------------------------+-------+--------------------------------------------------------|
  | ASUS Pro WS X570-Ace       |  2800 | https://product.suning.com/0070143867/11824955145.html |
  | Ryzen 9 3900X              |  3800 | https://item.jd.com/100006391096.html                  |
  | Antec HCG-X1000            |  1400 | https://item.jd.com/7356231.html                       |
  | aigo T10                   |   240 | https://item.jd.com/2209857.html                       |
  | ADATA XPG DDR4 3200 2x16GB |  1060 | https://item.jd.com/100004409761.html                  |
  |----------------------------+-------+--------------------------------------------------------|
  |                            |  9300 |                                                        |
  #+TBLFM: @7$2=vsum(@2$2..@6$2)
* 第一周第一天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p0
  :EXPORT_BEAMER_HEADER+: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-17 清华线上
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 自我介绍
   - 2005-2009 :: 在数理基科学习
   - 2009-2018 :: 在日本神冈地下实验室，学习研究中微子和暗物质
   - 2018-至今 :: 在工程物理系近代物理研究所任教

   - 主要工作：锦屏中微子实验
   - 合作研究
     1. 日本超级神冈实验
     2. 江门中微子实验
     3. 日本XMASS暗物质实验
   - 研究兴趣：中微子振荡、核子衰变、地球中微子
   - 爱好：大数据分析、高性能计算、系统架构运维

** 释义
*** 什么是“实验物理”                                         :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

    - 一切费电的物理！

      “理论学家费纸，实验学家费电，理论实验物理学家费米”

      - 欧洲核子中心(CERN)一年用电约 \SI{1.3}{\tera\watt\hour}。

        北京东城区西城区2016年用电总量 \SI{10.1}{\tera\watt\hour}，人口 200 万。

    - 观察物理现象的学科
      - 控制物理现象发生的环境？是 \to “实验”(狭义)；否 \to “观测”。
      - 实验物理的目标：发现物理规律，包括测量物理常数。

        从取得的数据出发，进行统计推断，证伪物理规律的假设。

*** 什么是“大数据”

    商业概念。“大”是相对的，大数据是指无法用一台计算机处理的数据。

** 大物理与大数据

   - 大型物理实验，产生大数据，多台计算机协同工作：分布式计算。
   - 跨地理的分布式计算称为“网格”(grid)，在早期促进和影响了互联网的发
     展。

     - FAST 天眼：每年@@latex:$\SI{\sim 1}{\peta B} = \SI{1e15}{B}$@@。

   - CERN 在 90 年代决定使用 Intel 民用计算机组成的集群来完成 LHC 的计
     算任务，是个人电脑级硬件集群成为科学计算主流的标志。

     - Intel 计算集群是当今大数据工业界的主流配置。

   - 近年来，大数据方法独立于实验物理，被工业界广泛采用，与神经网络结
     合，催生了“深度神经网络”，或“深度学习”。

     - 一系列新方法被应用到实验物理。
** 课程内容
   - 以实验物理为主题，学习大数据方法的基础。
     1. 理解数据的科学精神，从一开始养成良好的科研习惯
     2. 掌握典型工具 Git, Python 和常用命令行工具，鼓励自学
     3. 培养工具的品位，针对具体场景选择合适的工具

*** 计划安排
    - 实验物理的大数据方法(1) 五教 5105 Zoom 621 219 8453
      - 第一周 :: Git 入门，Python 入门
      - 第二周 :: Python 科学计算与可视化
    - 实验物理的大数据方法(2) 新水 301 Zoom 621 219 8453
      - 第三周 :: 数据处理的命令行工具
      - 第四周 :: 基于关系代数的数据组织
    - 上课：周一至周四，三四大节
    - 答疑：周五三四大节，地点与上课教室一致
      - Office Hour: 周一至周五晚7点至9点，刘卿楼804
      - 网络学堂“课程答疑”板块

** 数据分析的指导原则

   #+attr_beamer: :overlay <+->
   - “复现”原则 :: 以人类语言和计算机语言的形式，详细记录每一步计算。

      这是科学的基本精神，与可证伪性一起，是区分科学与伪科学的标志。

   - “透明”原则 :: 每一步的数据都应尽量可以被人类直接阅读，比如 JSON, CSV。如果不得
      不用二进制模式，一定是使用最普遍最开放的格式，比如 HDF5。

   - “一次”原则 :: Single Point of Truth, Don't Repeat Yourself. 不可在分析做任何
      重复，任何有意义的信息都应该被共享。

   - “最佳工具”原则 :: 尽量使用高级语言和语法糖，为每个子任务选择合适的工具。只有在性能
      分析之后，才在必要时使用低级语言进行性能加速。

      最佳工具会随时间变化，因此课程名不是

      +Python 数据处理与科学计算+

** 课程评估 分数标准
   按百分制记分，录入成绩时转换为等级。

*** 平时作业
    - 占 70% 成绩，覆盖课堂学习的知识要点，以 Github Classroom 形式组
      织。
      - 平时作业中的 80% 为黑盒测试，20% 为白盒测试。
      - 白盒测试重点考察
        1. Git commit 的内容必须有意义。
        2. 程序书写规范

*** 大作业
    - 占 30% 成绩，取材自实验物理不同方向的真实场景。也可以由同学自行
      提出。
      - 分两个阶段，对应前两周“生成”和后两周“分析”，互为逆过程。
** 大作业
   - 课赛结合 中微子实验数据分析
     - 分析中微子实验中，\alpha 与 \beta 粒子的区分。
     - https://dc.applysquare.com/
   - 天体分类问题
     - 巡天数据
   - 二维材料的等能面测量进阶版
     - 通过扫描隧道显微镜的数据，分析二维材料的等能面。
     - 与去年的区别：金属 \to 一般材料

*** 自定义                                                   :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

    - 如果有同学希望采用其它学科方向的大作业，请提出申请给续本达 =<orv@tsinghua.edu.cn>= ，8月24日截止。
      1. 问题描述和学科背景
      2. 数据的输入和输出的定义与格式
      3. 数据分析结果的评价标准
** 参考资料
   - Allen Downey, Think Python 2e
   - Fernando Perez et al., Scipy Lecture Notes
   - Jeroen Janssens, Data Science at the Command Line
   - David MacKay, @@latex:\scriptsize{Information Theory, Inference, and Learning Algorithms}@@
   - 2019年的课程录像：http://hep.tsinghua.edu.cn/~orv/teaching/video.html

*** 辅助资料
    - Eric S. Raymond, The Art of Unix Programming

      以道家思想剖析了设计的优美和永恒， _透明_ 原则源于此。

    - https://learnxinyminutes.com/

      从已经有编程基础迅速入门 Python。

    - http://py4e.com/

      Python for everybody，全球知名的 Python 教程，新手友好。

    - 苏勇, [[https://study.163.com/course/courseLearn.htm?courseId=232007][Linux 入门基础 - 网易云课堂]]

      通过 GNU/Linux 讲授 POSIX 环境基础。内容稍旧，思想不变。

** 教学团队
   - 教师 :: 续本达
   - 助教 :: 陈晟祺、陈嘉杰、刘学伟、张卓婧、翁俊、@@latex:{\fontspec{Noto Sans} 郑鈜壬}@@
   - 顾问 :: 郝镇齐、唐如麟、付祈安、高一川、刘晓义
   - 小助教 :: 已经有11位同学自荐
     - 李子鸣、陈烁天、尹嘉恒、王宇昂、徐大成、孙鑫礼
     - 孙嘉祎、陶泓耕、胡鸿源、王雨晴、孙泽昌
     - 95 位选课和 3 位旁听同学分成 11 个小组。

** CovID-19 时期的学习
   - 线上为主，调整心态

     1. 我们已然领先世界其它地区半年的身位；
     2. 春季学期的教学使我们领先许多高校半个身位。
   
     \pause

   - 健康第一，学业第二

     1. 2020年的目标：不染病；
     2. 其它的不苛求，善待自己；
     3. 从长计议，为祖国健康工作五十年。

     \pause

   - 这也将成为过去，我们终将怀念
     
     举例：2003年清华封校的盛况，一直在2005级学生的梦想里。

     \pause

   - 遇到困难多求助

     - 线上教学会有额外的困难，特别是那些可以把人“卡住”的“小”问题。一
       定不要自己扛，及时求助：老师、助教、小助教。

** Python
   #+attr_beamer: :overlay <+->
   - Python 是一门“解释型语言”，相对于“编译型语言”更易调试。
   - Python 的语法风格简明，即使对外行也易读。
     - 书写效率高，快速写出不错的程序。
   - Python 可以直接调用 Fortran, C/C++, R 等语言库，因此也叫“胶水”语
     言，即把不同的程序粘合在一起。
     - 易于与已有工具整合。
     - 促进团队分工，协作。
     - 大大丰富了 Python 生态系统的功能，进一步优化程序运行效率。
     - 符合 _最佳工具_ 原则。
   - Python 是一个通用语言，不仅在科学研究，在生活中的方方面面都会有用。

   - 在科学计算领域得到广泛欢迎和采用。

     https://www.python.org/
** POSIX 环境
   POSIX 是 /Portable Operating System Interface/ 的缩写，是关于计算机
   操作系统的国际标准。它规定了操作系统的基本工具和程序接口。

   - 科学研究中时间和空间跨度都很大，需要使用公开的国际标准化接口，才
     能满足 _复现_ ， _透明_ 和 _最佳工具_ 原则。

*** 满足 POSIX 标准的操作系统
   - GNU/Linux
   - Apple macOS
   - 其它类 Unix 系统
   - Microsoft Windows 本身不满足，但可以使用以下扩展:
     1. Cygwin, MinGW
     2. Windows Subsystem for Linux (WSL)
     3. 使用虚拟机安装 GNU/Linux

** 实践：安装 Python 3 和 POSIX 环境
   - GNU/Linux 用户 :: 工具都已齐备。请帮助周围的同学，并自荐小助教
   - Apple macOS 用户 :: Macports, Gentoo Prefix, Homebrew 皆可
   - Microsoft Windows 用户 :: 请注意不要使用带空格的或中文用户名。按
        照以下顺序尝试，直到成功获得 Python 和 POSIX 环境：
     1. Windows Subsystem for Linux (WSL)
     2. 使用虚拟机安装 GNU/Linux
     3. MinGW, Cygwin

** 安装 Windows Subsystem for Linux
   #+attr_beamer: :overlay <+->
   1. 控制面板 \to 所有控制面板项 \to 程序和功能 \to 启用或者关闭Windows功能
   2. 开启“适用于 Linux 的 Windows 子系统”
   3. 打开应用商店，安装 Debian
   4. 进入 Debian，增加用户名和密码
      
      注：输入密码时，无反馈提示。

   5. 修改 =APT= 源地址为清华 TUNA 开源软件镜像站

      - 使用 =nano= 编辑 =/etc/apt/sources.list=

        注：普通用户与超级用户权限。

      - 查找 =^W= 、替换 =^R= 、保存 =^O= 、退出 =^X=

        注： =^W= 代表按住 Ctrl 键，再按 W。

   6. 验证： =apt update=

** 版本控制
   - “我和同学合写文章，结果他是在昨天的版本上改的！我还得重改！”
*** 发展历史

    #+attr_beamer: :overlay <+->
    - 石器时代 :: =实验报告-v1=, =实验报告-v2=, =实验报告-v2.2=, =实验报告-v2.2-续本达更新20190629= ……
    - 青铜时代 :: diff, patch 文本差分算法
      #+BEGIN_SRC dot :file ./diff-patch.pdf :cmdline -Kdot -Tpdf
        digraph dataset {
        bgcolor="#ffffff00"

        { rank = same; B D1 }
        { rank = same; D2 M }

        B [label = "公共版本"]
        D1 [label = "差分1"]
        D2 [label = "差分2"]
        M [label = "合并"]

        B -> D1 [label = "更新第二章"]
        B -> D2 [label = "修改第一章"]

        D1 -> M [label = "修改第一章"]
        D2 -> M [label = "更新第二章"]
        }
      #+END_SRC

      #+Attr_LaTeX: :height 0.35\textheight
      #+RESULTS:
      [[file:./diff-patch.pdf]]
    - 铁器时代 :: 版本控制服务：CVS，SVN
    - 现代 :: 分布式版本控制：Git
** Git 案例
   “我上周写的程序被不小心覆盖掉了！无法找回之前的版本。”

   #+attr_beamer: :overlay <+->
   - 小强同学经过认真思考和试验，发明了一种巧妙的解决问题方法，并写成
     程序，经验证效果拔群。
     - 小强非常振奋，他把成果记了下来，并继续重构并优化解法。
     - 两个星期之后，他的优化并没有达到预期效果，反而使结果变差。
     - 令他更为懊恼的是，他已经无法达到自己两周之前的高度了，因为忘记
       了改之前的程序是怎么写的。
   - _复现_ 原则被破坏。
   - =解法-20190530.backup= ， =解法-20190608= ？重复存储， _一次_ 原则被破坏。
   - 使用 Git，养成良好的习惯，就能解决以上问题。
   - Git 由 Linus Torvalds 发明，用来支撑全世界 5000 名以上 Linux 操作
     系统内核开发者的协作。是我们的 _最佳工具_ 。
   - 安装： =apt install git=
** Git 基础
   [[./fig/pro-git_snapshots.png]]
   - 在任意时间我们都可以选择给工作区进行一次“快照”。
   - 相邻快照之间，是代表文件改动的差分量。
   - 例子：讲义
** 例子：撰写讲义
   [[./fig/tig-example.png]]
   - 查看每次提交的改动。
** Git 三种状态
   - 已提交（committed） :: 改动安全保存在数据库中
   - 已修改（modified） :: 自上一次提交，有文件被修改
   - 已暂存（staged） :: 已修改的文件被作了标记，将被包含在下一轮提交中

      [[./fig/git-modes.png]]
** Git 仓库间通信
   #+Attr_LaTeX: :height 0.7\textheight
   [[./fig/git-distributed.png]]

   - 建议：通过 SSH (secure shell) 通信。

** Git 基本命令
   - diff :: 查看改动
   - status :: 查看状态
   - add :: 添加文件
   - commit :: 提交
   - log :: 查看历史
   - pull :: 从远程下载
   - push :: 推送到远程
   - merge :: 合并分支

*** 内建手册 =man=                                           :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

    命令的具体含义可以参考 =man= 命令，例如，

    #+BEGIN_EXAMPLE
$ man git add
    #+END_EXAMPLE
** 作业：Git 练习
   #+attr_beamer: :overlay <+->
   - https://classroom.github.com/a/E_U0S1Ts
     - 点击后会自动创建你的 Git 仓库
     - 如果访问 Github 遇到问题，请使用课程专用的 HTTP/SSH 代理

   - 设置本地到 Github 的访问权限
     - 生成 SSH 密钥对
     - 上传到 Github

   - 同步你的 Git 仓库，输入你的基本信息
     #+BEGIN_EXAMPLE
我的姓名：
我的学号：
我的 Python 版本信息：

课程感言：
     #+END_EXAMPLE
   - 查看修改 (diff)，预估得分
   - 添加修改 (add)，提交 (commit)，推送 (push)
** 练习（不记分）：查看备课历史

   - https://github.com/heroxbd/physics-data

     #+BEGIN_SRC bash
git clone git@github.com:heroxbd/physics-data.git
git log -p
     #+END_SRC

   - 请小助教联系本组同学，确认每位同学都可使用 POSIX 环境、Git 版本，并将
     结果发给 续本达 =<orv@tsinghua.edu.cn>= 。

     #+BEGIN_EXAMPLE
$ git --version
git version 2.28.0.rc1
     #+END_EXAMPLE

* 第一周第二天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p1
  :EXPORT_BEAMER_HEADER: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-18 清华线上
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 此课在知识体系中的地位
   - 这是一个数据的时代。
   - 数据时代需要 *黑客技术* Hacking Skills、 *数理统计* Math & Statistics Knowledge 、 *专业知识* Substantive Expertise 等多方面技能。

   #+Attr_LaTeX: :height 0.65\textheight
   [[./fig/Data_Science_VD.png]]

** 技能树
   #+Attr_LaTeX: :height 0.4\textheight
   [[./fig/Data_Science_VD.png]]

   1. 本课程目标为数理大类的同学补齐 *黑客技术* 。
   2. 警惕 *Danger Zone!* 。
      - 黑客技术 :: 人类掌握工具的最高水平
      - 数学与统计 :: 人类理性思维的最高水平
   3. *专业知识* 根据自己的兴趣选择。
      - 物理学的思维方式和实践方法是一切专业知识的标杆。
   4. 本科时代要积极认真学习以上硬知识。

** 概论复习：黑客审美
   - 四个原则：
     1. _复现_ - 否则是伪科学
     2. _透明_ - 否则变成黑箱
     3. _一次_ - 否则到处是坑
     4. _最佳工具_ - 否则效率低下

   - 推论：
     1. 兼容比性能优先

        #+BEGIN_EXAMPLE
          Premature optimization is the root of all evil.
          -- Tony Hoare, Donald Knuth
        #+END_EXAMPLE

     2. 人类时间比机器时间宝贵

     3. 使用工具进行版本控制

** 提问的智慧
   - 作者 Eric Raymond
     http://www.catb.org/~esr/faqs/smart-questions.html

   - 原则：让他人以最小的努力复现出你的问题
     1. 不要这样说话： +救命! 我的程序坏了！哪位大神快来帮帮我！急！在线等！哭了！+
     2. 使用最简洁的语言，借助最简单的例子描述问题
        
   - 原则：努力让你的问题使更多的人受益
     1. 非隐私问题，尽可能公开提问，公开讨论。
** 命令环境
   - 基本的命令
     - ls :: list structure, 列出当前路径中的文件
     - cd :: change directory, 改变当前路径
     - sudo :: 使用管理员权限执行操作
     - apt :: Advanced Package Tool 软件管理器
     - nano :: 文件编辑器
     - vim :: 文本编辑器
   - 每个命令都完成一件确定的事

     Do one thing, do it right.

   - 命令的组合有无限可能

     作者无法预计用户如何使用他的工具

     - 组合的可能性太多，入门比较难
     - 一旦入门威力巨大

** 命令参数标准
   - POSIX 标准定义了推荐的参数格式
   - =git config --global user.name "Benda Xu"= 
   - 命令的各个部分由 *半角* 空格分隔
     - 不作为分隔符的空格由 *半角* 引号标出
   - 短参数：一条短线接一个字母
     - =ls -a=
     - =kill -9 xxxx=
     - =sudo -s=
     - 可以缩写在一起
       - =ls -lrta=
       - =sudo -sE=
   - 长参数：两条短线接一个单词
     - =ls --color=tty=
     - =git show --pretty=short --show-signature=
     - 由 GNU 推荐，是在 POSIX 标准之上的扩展
   - 更多参数，使用 =man= 查看文档
     - =man ls=
     - =man git=
        
** 我的经历 2002年
   《工具的狂热——我的 Linux 历程》
*** 安装系统
    安装画面相当帅，但帅过之后我发现自己完完全全不熟悉这东西，而且那界
    面的中文还不知道所云，调成英文我又不大认识（当时痛下决心一定学好英
    语）。---- 就这样，装了一遍两遍三遍，万物遍，从中午搞到晚上，一个
    问题一个问题在克服，最后终于每次安装失败都稳定在同一个错误上，抱着
    英汉词典查出来那个很长很长的提示好像是在说第三张盘的某某包安装错误。
*** 不知道 Password                                          :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:
    这一玩我傻了，什么 login: 啊，什么 password: 啊，我什么都不知道的
    咧（事后诸葛亮，安装不完全只要 root 不需要密码就能进的）。已经半夜
    了，我撅在床上这个憋屈啊，搞了大半天连个系统是啥样的都不知道，被一
    个 password 直接挡了回来。
** 我的经历 2003年
*** 过了一年还是不知道 Password
    但试机的时候我就木了，同样一个黑乎乎的屏幕上输 "Login:"和
    "Password:" 之后就是一圈怪怪的提示符，我把记得的 DOS 命令全部试了
    一遍，发现只有 "dir"和"cd" 可以用，就一个目录一个目录地探索起来。
    这时我前排的一个抖腿男已经是手抚键盘上下翻飞了，那屏幕蒺藜咕噜地翻
    了一页又一页，花花绿绿的不知道什么东西。我再一斜眼，左前方的小姑娘
    已经开了一个蓝蓝的 Pascal 界面正在写测试程序呢，我这才想到重要是得
    知道 pascal 在哪啊，不好意思地问了旁边的队友，才在 Free Pascal 上
    一点点搞起来，真别扭，一点状态都没有。队友大师兄指点我几下就去帮别
    人了，良久回来嫩嫩地说“我帮小妹妹调好了一个程序，小妹妹说我是牛人”。
    听得我更没心情编程了，就又 "cd" "dir" 地胡乱扯了起来。不一会儿大师
    兄开始玩 /usr/games/banner ，我也跟着弄了几下，心里飘飘忽忽一点底
    都没有。

*** URL                                                     :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:

    http://jkparadise.space/home.php?mod=space&uid=13&do=blog&id=196
** 命令环境自学教程
   - 苏勇, [[https://study.163.com/course/courseLearn.htm?courseId=232007][Linux 入门基础 - 网易云课堂]]

     通过 GNU/Linux 讲授 POSIX 环境基础。内容稍旧，思想不变。

   - 课程 FAQ，避坑指南
     
     https://faq.jiegec.net/
** Git 基础
   [[./fig/pro-git_snapshots.png]]
   - 在任意时间我们都可以选择给工作区进行一次“快照”。
   - 相邻快照之间，是代表文件改动的差分量。
** 例子：撰写讲义
   [[./fig/tig-example.png]]
   - 查看每次提交的改动。
   - 工具： =apt install tig=
** Git 三种状态
   - 已提交（committed） :: 改动安全保存在数据库中
   - 已修改（modified） :: 自上一次提交，有文件被修改
   - 已暂存（staged） :: 已修改的文件被作了标记，将被包含在下一轮提交中

      [[./fig/git-modes.png]]
** Git 仓库间通信
   #+Attr_LaTeX: :height 0.7\textheight
   [[./fig/git-distributed.png]]

   - 建议：通过 SSH (secure shell) 通信。
** Git 基本命令
   - diff :: 查看改动
   - status :: 查看状态
   - add :: 添加文件
   - commit :: 提交
   - log :: 查看历史
   - pull :: 从远程下载
   - push :: 推送到远程
   - merge :: 合并分支

*** 内建手册 =man=                                           :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

    命令的具体含义可以参考 =man= 命令，例如，

    #+BEGIN_EXAMPLE
$ man git add
    #+END_EXAMPLE
** 作业：Git 练习
   #+attr_beamer: :overlay <+->
   - https://classroom.github.com/a/E_U0S1Ts
     - 点击后会自动创建你的 Git 仓库
     - 如果访问 Github 遇到问题，请使用课程专用的 HTTP/SSH 代理

   - 设置本地到 Github 的访问权限
     - 生成 SSH 密钥对
     - 上传到 Github

   - 同步你的 Git 仓库，输入你的基本信息
     #+BEGIN_EXAMPLE
我的姓名：
我的学号：
我的 Python 版本信息：

课程感言：
     #+END_EXAMPLE
   - 安装 =apt install python3= ，查看版本 =python3 --version=
   - 查看修改 (diff)，预估得分
   - 添加修改 (add)，提交 (commit)，推送 (push)
** 作业反馈
   #+attr_beamer: :overlay <+->
   - 同学们的感言
     1. 我要好好学习
     2. 吐糟老师的发型
     3. 理解了当今实验物理、数据和计算机之间的关系
     4. 课程看起来很有趣
     5. 好难，不知道在干啥，我好菜
     6. 不过有老师、助教和同学们的热情帮助
     7. 好想来教室上课
   - 一些问题
     - =git config --global user.name "Blah Blah"=
       
       请把 =Blah Blah= 替换成自己的名字，重新运行此命令。

     - =git add introduction.txt=
       
       注意不要把无用的文件包含进来

     - commit message

** Commit message 写什么
   - =git commit= 时需要输入一段话概括本次 commit 所作的修改
   - 目标：让他人和未来的自己一目了然，只通过读此信息就知道自己做了什么
   - 反例：
     1. 数数：1,2,3
     2. 复读：Update,Update,Update
     3. 欺负键盘：aaaaa,wwwww,asdf
   - 不太好的例子：“完成作业”
   - 不错的例子：“完善了个人信息页面，并填写了课程感言”

** git commit                                               :B_ignoreheading:
   :PROPERTIES:
   :BEAMER_env: ignoreheading
   :END:

   #+BEGIN_EXPORT latex
\frame[plain]{\includegraphics[page=8,width=\textwidth]{git-commit.pdf}}
\frame[plain]{\includegraphics[page=9,width=\textwidth]{git-commit.pdf}}
\frame[plain]{\includegraphics[page=10,width=\textwidth]{git-commit.pdf}}
\frame[plain]{\includegraphics[page=11,width=\textwidth]{git-commit.pdf}}
   #+END_EXPORT

** 参考资料
   - https://zhuanlan.zhihu.com/p/34223150
   - http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html
   - https://chris.beams.io/posts/git-commit/

*** 查看备课历史                                  :B_example:
    :PROPERTIES:
    :BEAMER_env: example
    :END:

    - https://github.com/heroxbd/physics-data

      #+BEGIN_SRC bash
        git clone git@github.com:heroxbd/physics-data.git
        git log -p
        tig
      #+END_SRC
** 内容较多未成体系
   - 犹如造房子的准备材料阶段。
   - 马上会用到的，逻辑：
     - Github 是知名的协作平台，越来越多科研成果在 Github 类上发布
     - 交作业需要使用 Github，在作业中体会日常工作流程
     - Git 的客户端中，只有命令行是最可靠的。
     - Git 命令运行依赖于 POSIX 环境。
     - 在 POSIX 环境需要进行文本编辑，用到了 =nano= 。

       WSL，MacOS，GNU/Linux，远程 SSH 账户
** 文本编辑器
   [[./fig/gedit.png]]

** 文本编辑器(复古)
   [[./fig/nano.png]]

   - 没有菜单，只有快捷键
   - 快捷键是当前人类与计算机之间效率最高的通道
** 推荐的文本编辑器
   - nano :: 常用作应急编辑器，适合简单工作。
   - VSCode :: 可以与 WSL 集成，编辑 WSL 内的文件。可以从命令行打开文件。
   - Emacs :: 我正在使用的编辑器。可以图形界面，也可以命令行。
   - Vi :: 与 Emacs 齐名的，历史悠久编辑器。
           当前流行版本 VIM:=Vi IMproved 和 neovim
   - 其它

* 第一周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p3
  :EXPORT_BEAMER_HEADER: \title{Git 进阶}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-20 清华线上
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 自定义大作业
   - 如果有同学希望采用其它学科方向的大作业，请提出申请给续本达 =<orv@tsinghua.edu.cn>= ，8月24日 12:00 截止。
     1. 问题描述和学科背景
     2. 数据的输入和输出的定义与格式
     3. 数据分析结果的评价标准

   - 请准备自定义大作业的同学，在 8 月 21 日星期五 21:00 之前，告知续本达
     =<orv@tsinghua.edu.cn>= 。

     1. 准备定制什么样的大作业
     2. 当前遇到了什么困难

** Git 三种状态
   - 已提交（committed） :: 改动安全保存在数据库中
   - 已修改（modified） :: 自上一次提交，有文件被修改
   - 已暂存（staged） :: 已修改的文件被作了标记，将被包含在下一轮提交中

      [[./fig/git-modes.png]]
** Git 仓库间通信
   #+Attr_LaTeX: :height 0.7\textheight
   [[./fig/git-distributed.png]]

   - 建议：通过 SSH (secure shell) 通信。
** Git 基本命令
   - diff :: 查看改动
   - status :: 查看状态
   - add :: 添加文件
   - commit :: 提交
   - log :: 查看历史
   - pull :: 从远程下载
   - push :: 推送到远程
   - merge :: 合并分支
   - config :: 配置 Git

*** 内建手册 =man=                                           :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

    命令的具体含义可以参考 =man= 命令，例如，

    #+BEGIN_EXAMPLE
$ man git add
    #+END_EXAMPLE

** 常见问题
   - 如何改 Github 界面，VSCode 上显示的 Git 状态？

     - Git 最有效的界面在命令行。可视化界面都有问题，至多可作为参考。

     - 以 =git log= 查看已有 commit 为准。

     - 大家可以探索其它方法，但是课程教学和一切评估规则都以命令行 Git 为准。

   - 没有设置好作者的姓名和邮箱
      
     #+BEGIN_SRC bash
       git config --global user.name "Benda Xu"
       git config --global user.email "orv@tsinghua.edu.cn"
     #+END_SRC

     这一设置改变整个用户的 Git 状态，会影响所有此后的 commit。

** 常见问题
   #+attr_beamer: :overlay <+->
   - 可以修改 =git push= 之后的 commit 吗？
     
     - 不可以。
     - 可以加一个新的 commit，说明前一个 commit 哪里错了，是如何修改的。

   - 还没有 =git push= 的 commit 可以修改吗？

     - 可以。
     - 如果只修改 commit message

       =git commit --amend=

     - 作者信息也要改

       =git commit --amend --reset-author=

     - 需要修改 commit 本身

       使用 =git rebase -i=

** git-rebase
   - @@latex: {\huge 勿对已 push 的 commit 做任何修改！}@@
   - 以下操作仅限于尚未 push 还在本地的 commit。
   - ...
* 第二周第一天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p4
  :EXPORT_BEAMER_HEADER: \title{问卷总结和反馈}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-24 清华线上
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 问卷结果
   - 难度如何？
   [[./question2020a.jpeg]]
   - 你掌握了吗？
   [[./question2020b.jpeg]]
** 问卷结果（续）
   - 小助教有帮助吗？
   [[./question2020c.jpeg]]
** 同学们的建议反馈（一）
   #+attr_beamer: :overlay <+->
   - 希望可以多一点写代码的指导
     
     课上的例子是写代码的指导。如果不够，同学之间和小助教多讨论切磋。

   - 希望自己学好，谢谢助教和老师（约占 40%）
     
     好！我们一起努力克服困难。

   - 希望学到更多对实验物理研究有用的工具

     好！这是本人十几年来一直不变的初心。

   - 希望作业能简单一点，分高一点

     作业的难度和给分高低服务于课程目标的设计。

     世界上本没有水课，太简单分太高就成了水课。

** 本人心目中的理想给分梯度
   #+attr_beamer: :overlay <+->
   - D :: 学会了用 Git，以 Git 提交了大多数作业。理解了数据处理的复现、透明、
          一次和最佳工具原则。
   - C :: 在同学、小/助教、老师的帮助下完成作业的基本要求。
   - B :: 遇到困难，可以独立分析出错信息，独立查清原因并解决。遇到知识
          盲点，可以通过自学围绕实现需要快速入门。
   - A :: 独立思考，提出大作业的创新解决方法，效果出众。
   - $A^+$ :: 解决大作业中涉及的科学界的开放问题。

** 同学们的建议反馈（二）
   - 我实在是太菜了，助教总是凶巴巴，可以温柔一点吗？

     有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一
     个极端 —— 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这
     既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令
     人反感。

     别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清
     楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。

     —— Eric Raymond，提问的智慧

** “菜”问题
   #+attr_beamer: :overlay <+->
   - 解决未知问题是本课程的教学目标，也是数据时代黑客技能的基本组成部分，不要放弃宝贵的学习机会。

   - 希望同学在提问之前，做一些努力，尝试先自己解决问题。

   - 查找 FAQ 和群聊天记录，可能已经有人遇到并解决了同样问题。

   - 提问时，把问题描述清楚，不要说自己“菜”“弱”。

   - 不要遇到问题不假思索随手拍照，请先思考分析原因。

   - 老师一直在暗中观察，会及时制止助教无端以不好的态度与同学对话。
     但是本人看到的所有助教语气激烈的情形，都是同学无视了以上的建议。

   - 人非生而知之者，基础弱可以不断学习。但提菜问题必须批评。

   - 幸亏助教只是凶一下，随后还是帮助了同学，如果遇到老师……

*** 课堂豁免 :B_alertblock:
    :PROPERTIES:
    :BEAMER_env: alertblock
    :END:
    - 在课堂上，没有时间作系统调研，以上规则不适用。
    - 课堂上遇到疑惑，请你大声发问！这也是在帮助同学和老师。

** 同学们的建议反馈（三）
   - 作业难度跳跃太大

     是这样的。

   - 从以往的大作业项目看，强烈建议大作业中给出更加详细的公式、推导过
     程和计算方法，以便没有选修过相关课程的同学可以更好地理解项目的背
     景知识、数值计算方法等。期待不要把作业中没有讲的东西都扔给自学。

     参考老师理解的给分梯度，请在遇到知识盲点时，通过自学补足。大作业
     的设计目标是模拟科研环境，客观世界从不在乎你已经学过什么。

   - 希望讲授的时候能够慢一些（约占 15%）

     请在课堂上遇到困难时直接发问，本人会加入更多的反馈机制。

   - 希望讲授的时候能够快一些（约占 10%）

     请帮助周围的同学，或直接去解决大作业中的开放问题。

   - 同学间的交流氛围不是很好
     
     我也这样觉得！线上授课形式是原因之一。和小助教一起探讨可能的解决方法。

** 同学们的建议反馈（四）
   - 希望能简单的列出之后的上课大纲，方便同学们预习
     
     好。

   - 期待马上上手机器学习，希望学习神经网络
     
     #+Attr_LaTeX: :height 0.4\textheight
     [[./fig/Data_Science_VD.png]]
     
     - 炒菜式的机器学习非常简单，不用上课也可以学会。

     - 有了 Hacking skills 和数理统计的功底，机器学习才能发挥出作用。

** 同学们的建议反馈（五）

   - 希望详细演示下debug的过程

     好！

   - 希望了解更多的linux的骚气操作
     
     好！第三周。

   - 希望老师多讲解每个知识点的具体应用的意义。少讲语法，突出物理

     好！

   - 建议作业和课件在课程开始时就全部发放

     课件可以，作业课后发。

   - 将所有同学问过的问题整理到某个地方。助教群里答疑是提供详细的说明，而非提一个从来没有听说过的关键词

     - https://faq.jiegec.net/

     - 你学习如何通过关键词提示找到答案

** 如何通过关键词提示找到答案
   - 搜索引擎的用法演示

     https://zh.lmgtfy.com/

     https://www.google.com/

     http://www.bing.com/

     https://duckduckgo.com/

     其它的搜索引擎都强烈不推荐。

** 同学们的建议反馈（五）
   - 希望老师多举一些例子，整理出来发给大家。优秀代码分享。

     好！

   - 能约答疑嘛
     
     没问题。

** 提问的智慧节选
   - 如果你的问题被人无视了，请对号入座：

   - 问题：我能在哪找到 X 程序或 X 资源？

     - 回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？

   - 问题：我怎样用 X 做 Y？

     - 回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。

   - 问题：如何设定我的 shell 提示？？

     - 回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。

   - 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？

     - 回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。

** 提问的智慧节选（续）
   - 问题：我的{程序/设定/SQL 语句}不工作

     - 回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种

     1. 你还有什么要补充的吗？
     2. 真糟糕，希望你能搞定。
     3. 这关我有什么屁事？

** 新规则
   - 具体问题，请到 https://github.com/physics-data/faq/issues
     
     方便遇到类似问题的同学快速找到。

   - 当你的问题得到解答后，助教可能觉得此问题非常有价值。请配合助教发
     Pull Request，将它收集到 https://faq.jiegec.net/ 。

* 第二周第三天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p6
  :EXPORT_BEAMER_HEADER+: \title{大作业}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-26 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 作业中过度借鉴代码
   - +抄袭+ 过度借鉴代码

   - 作业的意义

     1. 学生验证自己是否掌握课程内容
     2. 为课程分数提供客观教学评价依据

   - 课程分数的意义
     
     1. 告诉学生对课程的掌握程度
     2. 未来的导师参考

** 还原场景
   - A 同学帮助 B 同学；
   - 面临交作业截止，B 同学还是没法及时完成；
   - A 同学把代码给 B 同学参考；
   - B 同学把代码稍加修改，提交上去；
   - 因为代码雷同，两位同学都疑似抄袭。

   \pause

*** B 同学
    - 作业可以迟交，但不要复制其他同学的代码；
    - 消化理解参考代码，开成自己的方法，Github 上补交作业。

    \pause

*** A 同学
    - 请继续帮助同学，注意授人以渔；
    - 请保持对同学的信任。

** 柏拉图世界观
   [[./fig/SCI.png]]

   - 数学世界独立存在，由它推演出物理世界
** 实验物理
   #+Attr_LaTeX: :height 0.6\textheight
   [[./fig/SCI.png]]
   - 实验仪器是从物理世界到人类的一条信息通道
     - 实验仪器的分辨率有限，我们在进行有损通信

** 举个例子
   [[./fig/reconstruction.png]]
   - 建立模型解释物理世界发生的现象，通过统计方法反推本质。
** 大作业安排
   - 2020.8.27 - 2020.9.12
     - 模拟实验测量
     - 包含只选《实验物理的大数据方法（1）》前两周课同学的队伍截止到 2020.9.19

   - 2020.9.10 - 2020.9.28 （草案）
     - 分析实验数据
     - 测量物理模型参数
     - 发现物理规律

** 实验测量的模拟
   - 输入 :: 物理对象的信息，随机因素的概率分布
   - 输出 :: 多阶段，最终输出为模拟的实验测量原始数据
   - 可视化 :: 中间结果用图表描述
   - 采分 :: 各阶段的实现，最终输出的正确性，作业报告

** 分组
   - 同学们先联络好，具体操作在 Github Classroom 上进行
   - 每队至多三人
     - 单人队：大作业得分 $\times 1.05$
     - 三人队：每人大作业得分 = 队伍得分 $\times 0.95$
     - 不同队伍间请勿直接交换代码

   - 大作业带有较高难度的附加任务，至多在满分基础上加 10%。

** 二维材料等能面测量的模拟
   - 第一阶段与去年基本一致，难度稍有增加。
   - https://github.com/physics-data/tpl_isoenergy2020
   #+BEGIN_SRC dot :file ./isoenergy-pipeline.pdf :cmdline -Kdot -Tpdf
     digraph dataset {
     bgcolor="#ffffff00"

     H [label = "二维金属的等能面\n态密度"]
     R [label = "普通散射中心在原点时的\n实空间态密度"]
     H -> R [label = "动量序对积分"]

     RD [label = "普通散射中心\n扫描电子显微镜图像"]
     R -> RD [label = "衰减"]

     M [label = "磁性散射中心在原点时的\n实空间态密度"]
     H -> M [label = "动量序对积分\n且带额外相位"]

     M -> MD [label = "衰减"]
     MD [label = "磁性散射中心\n扫描电子显微镜图像"]
     }
   #+END_SRC

   #+Attr_LaTeX: :height 0.7\textheight
   #+RESULTS:
   [[file:./isoenergy-pipeline.pdf]]
** 液闪中微子实验 $\alpha$ 与 $\beta$ 响应的模拟
   - 内容是去年的超集，难度有增加。
   - https://github.com/physics-data/tpl_PID

** 造父变星的光变曲线模拟
   - 内容与去年无关，原理有关联，难度增加
   - https://github.com/physics-data/tpl_cepheids

** ViTables 问题的解决 - Debug 举例
   - 解决方案在
     
     https://github.com/physics-data/faq/issues/5

   - 从临时方案到最终方案

   - 临时方案的重要性：给出了可复现的正确例子

     - 正解的条件 ABCD

     - 错误的条件 A'B'C'D'

     - 控制变量，找到错误的根本因素 A-A'? B-B'?

     - 排除无关的因素：确定 D-D' 不会影响结果，问题简化为 ABC vs. A'B'C'
** Debug：从 backtrace 找到出错的点
   - PySide 是什么？—— APT、搜索引擎
   - 为什么是 PySide？—— Python debug
     - 读代码
   - 为什么不是 PyQt5
     - GNU/Linux 可用，WSL 依旧不可用。——思考两者的本质区别
   - 分步执行程序
     - PyQt5 导入失败
     - 导入失败的原因是 libQt5Core.so.5 找不到文件？
     - 文件在那里为什么找不到——搜索引擎
   - 得到解决方案

** Jupyter
   - Jupyter 从 IPython 的网页界面发展而来
   - 安装使用

     1. apt install jupyter
     2. 配置文件
     3. 安装 jupyter kernel
     4. 本地网络测试
   
* 第二周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p7
  :EXPORT_BEAMER_HEADER+: \title{Jupyter LIGO}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-27 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习：大作业
   - 物理学是实验科学
   - 实验研究的两个方向：
     1. 演绎，模拟
     2. 分析
     
   - 三份可选的大作业
     - https://github.com/physics-data/tpl_isoenergy2020

       凝聚态物理方向

     - https://github.com/physics-data/tpl_PID

       粒子物理方向，与 Ghost-Hunter 2020 中微子数据分析排位赛结合

     - https://github.com/physics-data/tpl_cepheids

       天体物理方向

** Makefile 对流程的定义

   - 安装

     =apt install make=

   - 基本结构

#+BEGIN_SRC makefile -i
输出目标: 输入源
    执行的命令 $^ $@
#+END_SRC

      - =$^= 代表输入源
      - =$@= 代表输出目标

** 复习：调试
   - ViTables 是 Python 程序，解决其无法启动的 bug 的过程有借鉴价值。

   - 灵活使用搜索引擎和帮助系统

     - 理解程序崩溃给出的错误信息

     - 理解 backtrace 中的函数调用过程

   - 控制变量，排除无关因素

     - 缩小包围圈，聚焦到极小可复现例子 (Minimal Working Example)。
       
       Minimal not Working Example

   - 组合使用多种 debug 工具：
     1. 使用 print() 输出变量的值
     2. 交互式运行程序，REPL
     3. 使用 breakpoint()
** Jupyter
   - Jupyter 从 IPython 的网页界面发展而来
   - 安装使用

     1. apt install jupyter
     2. 配置文件
     3. 安装 jupyter kernel
     4. 本地网络测试

** Jupyter 的特点
   - 最强大的优势：

     - 程序与文本混合编排，literate programming，鼓励了科学结果的复现。

     - 文章和程序既然在描述同一件事，可以自然地写在一起。体现“一次”原则。

   - 其它优势：

     - 图文混排

     - 支持 Python 之外的其它语言环境

   - 弱点：

     - 网页上打字，没有强大的编辑器。(Emacs IPython Notebook，填补了空白)

     - 要进行高强度大规模的运算，需要与其它工具配合。不够成熟。

     - 代码的复用需要额外步骤。

* 第三周第三天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pa
  :EXPORT_BEAMER_HEADER+: \title{GNU Make 的数据生产线}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-09-02 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 批量处理海量数据
*** 命令行探索之后，要将数据处理方法自动化
    - 调用很多命令和程序
    - 写很多自定义的脚本
    - 处理很多数据，有很多中间结果
      - 中间结果的间的依赖关系可以很复杂
    - 程序有更新怎么办？数据有更新怎么办？
*** _复现_ 原则的要求 :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:
    要记录下来以什么样的顺序和参数运行什么命令，执行什么程序。

** 数据流水线的构造目标
   - 把流程系统化成输入、输出与过程三要素。
     - 而向数据编程，data-driven programming
   - 系统表达输入数据、输出数据和中间结果的依赖关系。
   - 高效执行，包括并行处理和整合超级计算机等。
   - 错误恢复
     - 修正错误后，可以从最后一步正确的数据开始继续执行。

** Make
   - =make= 工具已经有 40 多年的历史，最初是用来管理 C 语言程序的编译。
     - 根据依赖关系决定命令执行顺序
     - 正好满足我们的所有需求
   - =GNU make= 是 =GNU= 运动中，对 =make= 进行的招展，更加适合管理数据
     - =GNU= : =GNU is Not Unix=
     - 注意其与 BSD Make 的区别，必要时请使用 =gmake= 。
     - 通过 =make --version= 查看版本
*** 作用
    1. 实现 _复现_ 原则
    2. 管理程序运行，在超级计算机上运行
    3. 从错误中恢复
** Makefile
   - 安装
     #+BEGIN_SRC bash
apt install make-guile make-doc
     #+END_SRC

     - =make-guile= 在 =make= 的基础上提供了 =scheme= 语言的支持。

     - =scheme= 语言是 =LISP= 语言的一支，是历史悠久的人工智能语言。
       - =LISP= 与 =fortran= 是最早的高级编程语言，都出现在 1960 年代。

   - 文档
     #+BEGIN_SRC bash
info make     
man make
     #+END_SRC
     
     参考书：John Graham Cumming, The GNU Make Book

   - 基本语法：清晰写明输入数据，输出数据和计算方法

     #+BEGIN_SRC makefile -i
target: source
	program source target #如何做
     #+END_SRC

** 变量
   - 变量取值
     #+BEGIN_SRC makefile -i
a:=1
$(info $(a))
     #+END_SRC

     - 调用时使用 =$( )=
   - _一次_ 原则，避免重复
     #+BEGIN_SRC makefile -i
target: source
	program source target #如何做
	program $^ $@ #如何做
     #+END_SRC

     #+BEGIN_SRC makefile -i
target: source1 source2 source3
	program $< --reference $(word 2,$^) \
		--location $(word 3,$^) -o $@
     #+END_SRC

** 调用命令
   - Makefile 里可以调用 shell 命令，将其标准输出作为值。

   #+BEGIN_SRC makefile -i
sequence:=$(shell seq -w 00 99)
file_list:=$(shell find . -name "*.h5")
   #+END_SRC

*** 字符串操作
    进行字符串替代，可以使用

    #+BEGIN_SRC makefile -i
     obs:=$(sequence:%=observation-%.h5)
     # 等价于
     obs:=$(patsubst %,observation-%.h5,$(sequence))
    #+END_SRC

** 一般匹配关系 pattern
   - 处理 *.h5 文件，生成对应文件名的 =s/.h5/.png= 图形。
     #+BEGIN_SRC makefile -i
filelist:=...
all: $(filelist:%.h5=%.png)

%.png: %.h5
	./plot-celestial.py $^ -o $@
     #+END_SRC

   - 与 shell 脚本比较：
     #+BEGIN_SRC bash
       for f in *.h5; do
           ./plot-celestrial.py $f -o ${f/.h5/.png}
       done
     #+END_SRC

** Makefile 脚本的程序要素
   - Makefile 更像一个 Functional Programming （函数式编程）的语言。
   - 不再关注“执行什么操作”，而是关注“输入到输出的映射”。
   - 循环：
     
     #+BEGIN_SRC makefile -i
# radius list
rl:=$(shell seq -w 0.10 0.01 1.00)
profile:=$(foreach d,x y z,$(rl:%=1t_+%_$(d).h5))
     #+END_SRC
   - 函数
     #+BEGIN_SRC makefile -i
define video
$(1)/%.avi: $(1)/%.mp4
	ffmpeg -i $$^ $$@
endef

$(eval $(foreach d,up down transverse,$(call video,$(d))))
     #+END_SRC

** 特殊目标
   - =.PHONY= 代表无对应文件的目标
   - =.DELETE_ON_ERROR= 如果出错就把坏文件删掉
   - =.SECONDARY= 保留中间结果

     #+BEGIN_SRC makefile -i
.PHONY: all
all: xxxx

# Delete partial files when the processes are killed.
.DELETE_ON_ERROR:
# Keep intermediate files around
.SECONDARY:
     #+END_SRC

* 第三周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pb
  :EXPORT_BEAMER_HEADER+: \title{课堂综合练习：Python, Git, Shell, Make}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-09-03 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习 GNU Make
   - 写明数据的依赖关系和转换步骤
     - 实现 _复现_ 的数据分析流程
     - 进行并行计算
   - Makefile 要点
     1. 文档 (info, man)
     2. 变量
     3. 循环结构
        #+BEGIN_SRC makefile -i
$(foreach d,x y z,$(s:%=%_$(d).h5))
        #+END_SRC
     4. 函数
     #+BEGIN_SRC makefile -i
define video
$(1)/%.mp4: %.avi
	xxxx
endef
$(eval $(call video,up))
     #+END_SRC

** GNU Make 选择结构
   - 数据处理中不太常用
     #+BEGIN_SRC makefile -i
ifeq ($(a), $(b))
target: source
	xxxx
else
target: source
	yyyy
endif
     #+END_SRC

** JUNO 蒙卡 Production 的例子
   - 互动环节：圈出你不理解的地方
     #+BEGIN_SRC makefile -i
# 1=model, 2=imh, 3=dist, 4=iter
define SN-tpl

output+=data/det/$(1)/$(2)/$(3)/ith/$(4).root

data/$(1)/$(2)/$(3)/%.root:
	./genSN.sh $(1) $(2) $(3) $$@

data/det/%/$(4).root: data/%.root
	./exeDet.sh $$^ $$@ $(4)
endef

$(eval $(foreach i,$(imod),$(foreach j,$(imh),\
	$(foreach k,$(dist),$(call SN-tpl,$(i),$(j),$(k),0))\
	$(foreach l,$(ip),$(call SN-tpl,$(i),$(j),10,$(l))))))

all: $(foreach i,$(ith),$(subst ith,$(i),$(output)))

# Delete partial files when the processes are killed.
.DELETE_ON_ERROR:
# Keep intermediate files around
.SECONDARY:

     #+END_SRC
** FAQ pull request 游戏
   - 我们希望大家把课程中遇到的问题连同解决方法提交到 FAQ 上。
   - 请大家思考你遇到的最坑的技术问题是什么，如何解决的。
   - Pull request 2nd round：vitables
   - 游戏规则：
     1. 全班分成 14 个组，在组内进行讨论：我遇到的最坑的问题
     2. 组内讨论决定出一个本组推荐的问题和解决方法
     3. 小组派出一位代表，向
        https://github.com/physics-data/faq
        
        提交 pull request。

        可选方案：学号同余 14 最小的同学成为代表。
     4. PR 过程中按照 pair programming 形式进行：
        - 一人操作，多人围观
        - 边操作边解说，推荐开摄像头
        - 围观同学出谋划策
     5. 老师现场演示合并 Pull Request

** 综合练习
   - 协同完成 LIGO 数据的批量处理框架

     1. 画出 specgram，进行 time-frequency 联合分析

     2. Generate raw waveform

     3. 画出原始数据的 asd 图

     4. 生成音频文件

     5. ...
** 回顾
*** 科学数据处理的原则 :B_alertblock:
    :PROPERTIES:
    :BEAMER_env: alertblock
    :END:
    _复现_ _透明_ _一次_ _最佳工具_

*** 版本控制
    Git 与队友分工协作，与明天的自己协作

*** 数据流水线
    GNU Make 管理数据的依赖与转换，实现错误恢复和并行计算

*** 命令环境
    POSIX 环境中强大的小工具组合，开发与使用相融合

*** 计算语言
    Python 语法友好，工具丰富，统领 C/C++/Fortran 库
** 引力波探索回顾
   - 人类正在全球建设引力波观测网络：美国 LIGO，欧洲 Virgo，日本 KAGRA
     - 更好地定位引力波信号源
   - 开放科学：LIGO 公开了引力波观测的关键数据。 _复现_ 的典范
     - 开放数据经简化之后用于教学，[[https://www.gw-openscience.org/s/events/GW150914/LOSC_Event_tutorial_GW150914.html][传送门]]
     - ...因此有了 UC Berkeley 的 /Data science and Bayesian statistics for physical sciences/ 课程大作业
       [[https://phy151-ucb.github.io/seljak-phy151-fall-2018][传送门]]
     - ...因此有了这门课
   - 我们借助 LIGO 的数组进行了科学数据可视化的初步。Jupyter 随手画图，
     - 分析其它源需要手动修改，影响 _复现_ 性
     - 数据如果有变化程序也要修改，容易违背 _一次_ 原则
** 综合
   #+attr_beamer: :overlay <+->
   1. 整理 LIGO 原数据，放在 =data/= ，加入 =.gitignore=
   2. 把 =readligo.py= 加入 Git 管理
   3. 建立 Makefile，写入画图过程
   4. 进行 Fourier 变换，画出频谱
   5. 算出振幅密度，画图
   6. 读取广义相对论预言的波形，画图
   7. 算出信噪比相对强度谱，画图
   8. 对相对谱进行滤波，找到信号
   9. 通过 =specgram= 寻找信号，作图
* 第四周第一天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pc
  :EXPORT_BEAMER_HEADER+: \title{Hack the universe with data and statistics}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-09-07 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 科学范式的演化 Scientific Paradigm Shift

   #+attr_beamer: :overlay <+->
   - 经验时代：占星术等等
   - 理论时代(17世纪起)：牛顿力学，微积分，麦克思韦方程，相对论等等
   - 计算时代(20世纪中)
     - 理论一般由程序描述，大规模数值模拟成为可能
     - 计算物理、计算化学等等
   - 数据时代(21世纪初)
     - 从数据中直接总结经验模型，与理论模型同等重要
     - 虚拟天文台等等
** 数据时代的要素
   - 存储空间
     - 存储介质物美价廉：小于 1GB/元
   - 计算能力
     - 每 18 个月翻一倍
   - 传感器
     - 取数能力大大增强

*** 数据本身具有价值
    数据在被采集之外的目的中发挥作用

    - 通过人们对感冒症状相关的搜索预测流感爆发
    - 黑洞吸积盘“照片”，多个射电望远镜联合交换数据组成相干阵列

** 工商业与科学的融合
   - 工商业的决策开始基于数据
     - 市场调查，AB 测试，用户隐私数据收集
     - 分析消费习惯，预测需求，进行定价
     - 制定生产、物流、仓储策略
   - 金融交易：基于历史数据建立模型，半自动或全自动交易

** 知识储备与技能组合
   #+Attr_LaTeX: :height 0.65\textheight
   [[./fig/Data_Science_VD.png]]

   - 数据时代需要专业知识、数理统计和黑客技术等多方面技能

** 本课程的技能树
   - Python
     - 程序的数据类型
     - 程序的基本结构
     - 函数、类
     - 数值计算工具

   \pause

   - 外部驱动 Python
     - 管理：Git
     - Shell 命令和 Shell 脚本：文件组织
       - 独立语言，命令组成脚本，脚本变成命令
     - GNU Make 和 Makefile：数据处理流水线
       - 独立语言，内嵌 Shell script 和 Guile Scheme
     - Jupyter

   \pause

   - 内部增强 Python
     - 正则表达式
       - 一门微型的独立语言：也可以增强 Shell Script

     - 数据类型
       - csv :: 最透明
       - json :: 贴近 Python，适合有结构层次的混合数据
       - hdf5 :: 效率高，适合大规模的数值型数据

** 物理学是“硬科学”
   以知识的量化程度排序：

   #+attr_beamer: :overlay <+->
   - 0类学科：努力区分偶然统计关联和因果关系

     - 到底哪些是决定性因素？

     - X基因决定了此性状，Y基因决定了此性状？XY一起决定？
     - X +Y+ ， +X+ Y？

   - 1类学科：努力变量之间影响的趋势

     - “房价加速增长的势头”

   - A类学科：努力算出具体的数字

     - 地球的年龄是46亿年

   - Z类学科：没有不确定度的结果不是科学结论！
     
     - 电子磁矩，以玻尔磁子 $\mu_B$ 为单位

       \[ g/2 = 1.001 159 652 180 73 (28) \]

       Ref: Phys.Rev.Lett.100:120801,2008

** 结果的不确定度
   - 结果的不确定度如何给出？
     
     1. 建立演绎的模型，预测观测现象

        大作业第一阶段

     2. 在此基础上，从观测现象定出模型中的参数，或者从诸多模型中选出最
        符合数据的模型

        大作业第二阶段

*** 某某学家的对话
   - 数学家：一切都是确定且自洽的
   - 物理学家：一切都是不确定且纷乱的
   - 统计学家：我赞同物理学家

** 本周预告
   - 从黑客技能出发学习统计回归

     - 与从概率论出发学习统计回归互补

     - 学习新语言 R

   - 学习如何有序组织数据，尽一切努力让统计分析更容易进行
     
     - 关系代数

     - 学习新语言 SQL

* 第四周第二天
  :PROPERTIES:
  :EXPORT_FILE_NAME: w4-1
  :EXPORT_BEAMER_HEADER+: \title{关系代数}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2019-07-19 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: seahorse
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** Git 的 Remote 与 Merge

** Makefile 的高级应用示范

   - 本课程讲的都是黑客技术，没有讲统计方法？ \to 其它课程

** 数据的存储格式

   - CSV :: 文本表格
   - JSON :: 文本字典结构
   - HDF5 :: 二进制树状结构组织的表格

   - 有没有一种抽象的数据表示，把引擎与应用分离？
     - 关系代数：一切都是关系，关系都是表格

** Numpy Structured Array
   - 复合型 =dtype=

     #+BEGIN_SRC python
       import numpy as np
       np.zeros(3, dtype=[("i", np.int), ("v", np.float), ("w", np.int, 3)])
     #+END_SRC

   - =PE-info.h5=

** Structured Array 基本操作
   - indexing 取数
   - 取列

** Pandas
   - Python 中处理表格类数据的工具

     =apt install python3-pandas=

   - indexing 取数
   - 取列
   - 连接
     - 左，右
   - 笛卡尔积
   - 集合运算

** 关系代数
   #+attr_beamer: :overlay <+->
   - 关系：${(r, s)|r \in R, s \in S}$
   - 关系代数：在集合基础上定义关系运算的封闭系统
     - 封闭系统：运算作用于一个或多个关系上来生成一个关系

   - 围绕关系代数设计的关系数据库是存储海量数据的标准
     - 代表：Structure Query Language (SQL) 语言
   - 关系代数的思想具有一般性：
     - 管理数据
     - 添加数据
     - 分析数据

** 基本动机
   - 关系代数设计师 Todd，图灵奖工作
   - 数据都应该自我描述
     - 即使数据的存储形式变了，对程序进行操作的程序也不应该改变
     - 反例：链表
     - 反倒：随意写成的 Excel 表格
   - 方便扩展到大规模的数据库中

*** 实用价值
   - 引擎优化与应用分工
   - 引擎：自动 out-of-core computing (超出内存的运算)
   - 引擎：自动并行计算

** 直观理解：一切都是表格

   | Event | Channel | Time | Weight |
   |-------+---------+------+--------|
   |     0 |       0 |    1 |    1.1 |
   |     0 |       0 |  1.1 |   1.15 |
   |     0 |       2 |  1.2 |    1.3 |
   |     1 |       3 |  0.8 |    0.9 |

   | Event | Channel | Wave          |
   |-------+---------+---------------|
   |     0 |       0 | [0,0.1,...,0] |
   |     0 |       2 | [0,0.2,...,0] |

** 关系代数的基本运算
   - 集合运算：交、并、差
   - 连接(Join)
   - 投影(Projection)
   - 笛卡积(Product)
   - 分类运算(Groupby)
* 第四周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pf
  :EXPORT_BEAMER_HEADER+: \title{面向未来}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-09-10 清华线上
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 大作业网站
   https://dc.applysquare.com/

   - 如果算力不够，请向教学团队求助
   - 联系物理系和工物系学生科协

** 技能集合
   #+Attr_LaTeX: :height 0.65\textheight
   [[./fig/Data_Science_VD.png]]

   - 数据时代需要 *专业知识* 、 *数理统计* 和 *黑客技术* 等多方面技能。
** 黑客技能
*** 科学数据处理的原则 :B_alertblock:
    :PROPERTIES:
    :BEAMER_env: alertblock
    :END:
    黑客的审美： _复现_ _透明_ _一次_ _最佳工具_

*** 版本控制
    Git 与队友分工协作，与明天的自己协作

    Git 是“搬砖工地安全帽”，无头盔禁止上岗

*** 关系代数
    数据表示成关系，数据的操作表示成关系代数运算

*** 数据格式
    _透明_ CSV, HDF5, JSON, 数据库 SQL

** 黑客技能（二）

*** 数据流水线
    GNU Make 管理数据的依赖与转换，实现错误恢复和并行计算

    实现数据层次的 Python/R/Bash/Scheme/SQL 多语言融合

*** 正则表达式
    描述字符串的微型语言，数学模型

*** 命令环境
    POSIX 环境中强大的小工具组合，开发与使用相融合
    
*** 计算语言
    Python 语法友好，工具丰富，统领 C/C++/Fortran/R/SQL 库

** 本课程之外的知识点
   - 函数式编程：一切都是函数
     - 无状态，从而容易从错误中恢复
   - MapReduce：分布式大数据系统的开始
     - Map: 映射
     - Reduce: 总结
   - 信号处理：《信号与系统》课程们
   - 统计学习与机器学习
     - 数学课们，其它课程们
     - “深度学习”是商业概念，即多层神经网络加大数据训练
     - 黑客技术基础，为统计学习与机器学习提供了基本环境
     - 有许多优秀的公开课程
    
** 计算历史：大型机
   [[./fig/main-frame.jpg]]

   - 一台大型计算机，用户通过终端 (Terminal) 连接
** 计算历史：个人计算机
   - 1981年

   [[./fig/ibm-pc.jpg]]
** 计算历史：个人计算机组成集群
   - 1990s 个人计算机组成集群 "beowulf"

     #+Attr_LaTeX: :height 0.65\textheight
     [[./fig/computer-cluster.jpg]]

** 高性能计算与超级计算机
   [[./fig/supercomputer.jpg]]

   - 更大的计算机集群，优化节点间的通信，共享存储。

** 虚拟机与云计算
   - 虚拟机：软件模拟计算机
   - 云计算：开放平台，自动生成虚拟机

** 技术问题：TUNA 协会
   - 清华大学学生开源软件与网络技术协会
   - TUNA 主页 https://tuna.moe/

   - TUNA 技术群，黑客（广义）技术问题探讨

** 中微子 NUS Seminar
   - 9月11日下午1点，新水301与 zoom 621 219 8453

     答疑现场+远程

   - The Saga of Neutrino Oscillation

** 教学团队
   #+attr_beamer: :overlay <+->
   - 教师续本达 :: 对，我就是那个最菜的。
   - 助教 :: 他们是最强的：
     - 郑鈜壬 :: 请叫我红人，星际玩家，我的 bug 全都是 feature。
     - 陈嘉杰 :: 嘿嘿嘿，这不够好玩，为什么不讲 Rust。
     - 陈晟祺 :: 我是 +Harry Chen+ 蛤蜊橙，bug 小王子，不信你试试。
     - 刘学伟 :: 哇，这也太强了吧，但是我早已搞定，呵呵。
     - 张卓婧 :: 卓卓什么资料都有，卓卓什么都会。
     - 翁俊 :: 这也太简单了吧，你套个公式不就算出来了。
     - 少年爱迪生 :: 学长们作业做得开心吗？不要问我谁是迪生，问[[https://cloud.tsinghua.edu.cn/d/ca4dc48637e4432b88f0/][这里]]。
** 教学团队
   #+attr_beamer: :overlay <+->
   - 快乐的学长 :: 暗中观察受不了的时候就会说话。
     - 高一川 :: 我会七十二般变化，高二川、高三川、大一川、大二川、大三川、大四川、研一川
     - 付祈安 :: 我见到学弟学妹就会触发 _付钱_ 的被动技能
     - 刘晓义 :: 喵喵跑得快
   - 小助教 :: 来自同学中间
     - 李子鸣、陈烁天、尹嘉恒、王宇昂、徐大成、孙鑫礼
     - 孙嘉祎、陶泓耕、胡鸿源、王雨晴、孙泽昌
** 致谢
   - 顾问 :: 毛淑德教授、郝镇齐博士、冯骅教授、翟荟教授
     - 阮东教授、陈少敏教授
* 总结
** 海天盛筵
   8月份，教学团队享用了一顿海天盛筵，故而有这个名字，只是可惜没有拍照。我很喜欢这个词，我觉得上课的过程真是一场享受，用这个词描绘再好不过了。我希望能把其中的敏感引申义去掉，把这个词从废青们那里夺回来。

   从 2019 年小学期上过课到现在，我几乎每次和朋友的闲谈都会无意中谈起小学期上课的感觉。这好比一个刚生了娃的母亲，三句话之内必提起自己的孩子一样，我好像入戏太深了。

   感谢助教呕心沥血的付出，感谢同学们在课上课下与我热情地互动，讨论和吐槽，帮助和鼓舞我完成了一个我和前辈们无法想象的高强度课程。到了最后一周，我已经没有了力气在课内休息时走到同学中间和大家聊天，只是默默坐在窗子旁边，静静看着大家还在对课上的内容进行着分享和讨论。那一天，我在课间倚着窗台望着洒在树梢的斜阳，听着教室里同样细细簌簌的讨论声音，不禁感叹我定会很快怀念并迷恋这种感觉。果然，结课之后，我还是会经常想起那时内心的宁静的感觉。

** 备课，焦虑并欢乐着
   开始我觉得授课的强度将是不可想象的：每天4节课，每周4天，从零开始设计课程，没有参考，想想都会觉得自己会累得飞起来，找不到东南西北。所以一开始的设想是，提前把讲义写完，这样能让自己整个七月份压力相对小一点。故而我想6月份 Ghost Hunter 决赛之后，就好好备课吧。然而我真的应了戈亮总结的青年教师第一定律：永远希望开课前备足课，但是永远无法达到。到了6月底，我还是没有把讲义写好，只是有一个细化的大纲，眼看着同学们都已经开始开心地选小学期课程了，我真的想穿越回去把自己捏死。

   不过这期间也没有完全闲着，我参考了一门 Charles Russell Severance 的 Python for Everyone 的课程，一门苏勇的《Linux 入门基础》，一门南京大学张莉的《用 Python 玩转数据》。希望把听课时做的笔记变成我的讲义。可是最后发现笔记是记了不少，但是与我想要讲授的内容重叠并不多。此外，最重要的事，是请到了蛤蜊、杰哥和爱强做我的助教。似乎有个谣传说小学期是不设助教的，我也没有求证。但是我很清楚这门课如果没有助教，会被我祸害到什么程度。可是到了月底快开课时，我还是很焦虑，毕竟第一次课要讲什么都还没有想清楚。

   第一次开会是2019年6月24日，教学团队以及所有对课程感兴趣的同学都到了，有郑煦韬、龙翔云（讨论大作业设计）、杰哥、付主席、刘喵喵、张爱强、唐如麟、一川。我还从校外赶回来光荣地迟到了。会上，同学们给我的压力比教学委员会还大。一个焦点是，为什么要设计这么难的大作业，而且还要每周一个大作业，占大多数分数。大家本来开心上小学期水水更开心，我压了这么大的担子，同学们会起义的。我说如果难，我们可以降低难度，但是还是要模拟科研的场景，为同学们大三进入科研训练做好准备。大家争论不休，最后各方达成一致采用唐如麟的大作业方案：同学只需要做一个大作业，占30%，分成两个阶段，第一阶段是生成，第二阶段是分析。这样，同学有充分的时间深刻理解大作业所描述的物理实验场景和内部机制，而且也可以放弃做大作业以70%的小作业成绩低空水过。事实证明这个方案设计得非常巧妙，我真的幸运在开课之前组织了这一场讨论。

   第二个焦点是讲义要不要详细写，我知道自己的德性，看起来是万难写出来的。于是我狡辩说：“我还是列一条主线，直接讲，作为实践性课程，真的那么需要讲义吗？”一川和付主席异口同声道：“你觉得同学们会听课吗？过去会的听了课还是会，不会的听了课还是不会，完全没有用啊！你还不如厚道一点，贴出个讲义，大家至少还能参考着写作业。”我也急了：“那还要我开课做甚么！我把参考书一指定，写一点学习材料，大家都快活，把课取消算了。”大家齐声道：“当然要开课啊！不然怎么拿学分，怎么完成培养方案。”接着有同学说：“我觉得教编程的课都没什么用，看语言定义就能高效完成的事，为什么还要讲一个月课。”我在争论中，陷入了无限的自我怀疑之中，再想想我自己也是自学的，同学们的讨论真是给我进行了一场长达几小时的灵魂拷问，让我死去活来。在这个信息爆炸的时代，学习资料极大丰富，还要课堂做什么？还要老师和大家面对面上课做什么？不回答这个问题，就真的没办法开课。这使我更加压抑，如同泰山压顶一般，过了好多天，我才勉强有了一个回答：我只讲前人没有讲过的或者以某种方式表述过的内容，一切网上有的资料我都以参考资料给出。但是如果我只讲新内容，我的专业水平够吗？这也是我回答不了的，最幸运的是，我得到了蛤蜊、杰哥、喵喵等计算机系科班同学的帮助，还有宇翔和主席的内容建议，他们保证了我讲授的内容不至于出现根本错误。

   最后，我在付主席的挟持下，写出了第一周细化的大纲。会上付主席一直保持批判的态度，说的最多的是三句话：“你这样做会坑死助教的”，“你这样做会坑死同学的”，“心疼助教心疼同学”。我被拍得怀疑人生，所以当付主席说“那么我们来把每天讲什么定下来吧！”我非常振奋地照做了，大家七嘴八舌，总算把第一周和后面要讲的内容定了下来。半夜，我拖着疲惫的身躯，揣着对教学的怀疑，翻来覆去睡不着。唯一让我感到一丝欣慰的，就是一张写着第一周详细教学计划的纸。


   到了马上开课的时候，爱强、蛤蜊、杰哥、一川和我又开了个会，确定了小作业的形式为 GitHub Classroom，这样可以保证大家即使忘了课上学了什么，至少通过作业题入门了 Git，也算是我的最低目标了。作业给分为黑盒 80%，白盒 20%。小作业不使用 Online Judge，大作业第二阶段借用竞赛平台实行课赛结合。这次会和前一次的风格完全不同，课程准备进行得非常顺利。我突然觉得面对迷茫，无论从生活跳到哲学，还是从哲学跳到生活，只要切换了模式，都可以对自己起到稳定的作用。

   开课的那一天，好多人潜到了最后一排来棒场，看我的开场白。从前来听课的大佬们的反馈来看，效果蛮不错的。我才舒了一口气，看来我已经进入了教学的激跃状态。

** 小学期奇遇记
   不论如何，每天四学时，每周四天的教学强度都是很难扛得住的。我和老教授们交流时，大家都觉得第一次开课就这么高的强度，真是比登天还难。于是最初的设计是上一堂课，练习一堂课，相当于我每天只讲两学时，让同学们在课堂上就把作业都做完了，大家都很开心。然而现实非常不一样，课上大家都很放松，和我的互动很多，大家像在一起谈心一样就上完了四节课。实际上，讲授和练习没有分开，融为一体了，这是我始料未及的局面。同学们驱动了上课的形态，比我预先设定的更好。这让我非常开心，也非常自豪。

   课程预备会上顾问们对我提出的最大质疑“课备好了吗？”真的应验了。我首先备了三天的课，但是课程进展得太快，我的备课速度根本追不上讲课，最后变成了“敏捷备课”。“敏捷备课”看起来很高大上，实际上是助教和顾问们黑我的。在软件工程中“敏捷开发”的意思是把工作流程变成一个 pipeline，没有阶段性准备，一直都在生产(上课)一直都在开发(备课)，边生产边开发，开发出来的东西马上投入生产。现备课现上课，这在课堂上是要出教学事故的，因此除了最开始的三天，后面我一直都是如履薄冰。在那一个月中，我连做梦都能梦见助教们围着我说“敏捷备课”“教学事故警告”，神经高度紧张。好在一年以来，我自己学习了大量类似的课程，做了很多笔记，一些“教学定势”留在了脑海里。同时，在 TUNA 协会的金枪鱼之夜活动 (tunight) 中，技术分享的风格非常适合技术实践类的小学期课程，给了我巨大的启发。最重要的是，同学们的互动和快速反馈，为课程的内容做出了巨大贡献，让课堂时间更有针对性，弥补了我备课上的严重不足。所以我每天的生活状态是，上午在焦虑中度过，总是觉得下午的课准备得太少。下午，开始上课，我就神奇地进入了宠辱偕忘的状态，不知不觉就完成了课程。而且，我觉得自己遇到一个很难的教学挑战，反而抛弃了心中的完美主义执念，不对自己要求太高，彻底放飞了自我。如果一次上课准备的内容太少，三节课讲完了四节课的内容，没问题，直接放学就好了。如果我课上给大家要展示的效果没实现，翻车了，没问题，告诉大家这就是技术不同于科学之处，翻车和调试就是日常，老司机也会翻车。大家七嘴八舌打乱我原有的教学设计，没问题，同学们对一个问题感兴趣，我们就深入讨论下去，把疑问搞透。于是在这一个月里，我最焦虑的是每天晚上，最忙的是每天上午，最开心的是每天下午。

   论欢快的课堂气氛，一位奇才同学功不可没。我第一天走进教室，奇才就跟我打招呼说“学长，我是特地为了来支持您工作选的您的课，顺便鄙视一下 XXX 同学，他作为您的直系校友竟然在关键时刻叛逃了”，我觉得有趣，以为只是玩笑。但是后面的课程里，奇才简直成了课程的主角。在课上，她非常积极地思考，心直口快地提问题，把我没有讲到的知识点都彻底覆盖了一遍。这让我这个“敏捷备课”的不合格教师在课堂现场实现了迅速迭代，迅速弥补了知识的盲点。她的提问还激励了其他同学积极提问和讨论，原来大家都怕自己的问题太幼稚不敢说话——这是当前教育环境不争的事实——但是看到奇才的问题都那么基础，大家也就没有了心理负担，经常还能大范围讨论起来。我觉得我作为一名教师，上课最幸福的时刻莫过于被同学们打断，我静静地站在一旁，看着同学们就我刚才讲的话题自发地讨论，那种感觉，真是太美好了。大家知道，这样做其实是有风险的，许多人是不太喜欢经常接老师话头并打断老师思路的同学的，所以奇才同学确实是在支持我的工作。令人惊叹的是，奇才生成了一种傻白甜的形象，浑然天成地活跃了课堂气氛，引出了更大范围同学的讨论和参与。为什么说是“生成”的傻白甜，而不是真傻白甜呢？因为到了大作业的第二阶段，奇才露出了她学霸的凶恶原形，硬生生用双眼看了大作业中的几万张图片，总体出近十条经验公式，烧10个G的手机流量，屠了大作业的积分榜。我也在反思，几万张图片是不是罔称“大数据”，2020年的大作业得从一百万起步。线上听课的同学和朋友们不止一次问我，在课上一直提问的同学到底是不是我的托，但是我自己也不知道啊。我知道的是，在改革开放初期，我们辽源人确实是这样闻名全国的。

   我都已经把课上成了“敏捷备课”，一个月以来没有任何精力做备课和上课以外的事，甚至是作业的设计和批改都没有精力顾及。学校并没有为小学期设助教岗位。可以想见，如果只是我一个人承担这些任务，必然是一直捉襟见肘，必然是顶不住的。事实上，我一人在教学团队中的工作和发挥的作用甚至不到一半，剩下的一大半都是助教同学完成了。我真是非常幸运有蛤蜊、杰哥、爱强的全程鼎力相助，还有一川、宗煜、镇齐和喵喵从各个方面的支持，不然这门课会变成样子简直不堪设想。为什么这样说呢？课程的内容决定了它是任务驱动的，大作业贯穿整个课程。这相当于一场集训，如果不把所学内容马上应用到实践上，纸上谈兵就不会有任何意义。从这个角度来讲，这门课的作业是比较课堂讲授更重要的，甚至说讲授完全是为了作业服务都不为过。这也是我完全没有要求出勤的原因，即使学生不来上课把作业完成，也是可以拿 A+ 的。大作业的设计思路沿用了唐如麟的方案，第一阶段生成，第二阶段分析，思路清晰，同学们非常好理解。但实际操作起来需要消耗大量心血。在生成阶段，需要准备详细的物理学背景说明。有许多知识点，是我的盲区，我发现自己确实力不从心。镇齐和宗煜友情出场和文档准备，爱强配合镇齐完成了衔接工作，把作业设计得非常有科学意义和严谨性同时又非常有趣。从某位同学的评价中，“这是我做过的最 Cool 的大作业”，可见一斑。而另一份课赛结合的大作业也是凝聚了科协同学们的心血，整整 用了一年的时间筹备才锤炼出来。这不仅包括文档，还有第二阶段大作业的竞赛平台，它们给同学们以非常新的作业体验，可以看到大家做作业的过程都很开心。蛤蜊是整个大作业的汇总者和质检员，文档、数据最后都由他来把关发布，所以几次突击，他都是最后一位睡下的。作业的批改需要花的精力更多，因为每一位同学都有独特的解法，是一个很烧脑的过程，这里杰哥为课程特地开发的批作业工具与蛤蜊写的网络学堂 learn-helper 一起发挥了有力的支撑，把批作业过程中的重复劳动都自动完成了，让大家专注于本质。大作业的工作量还是很大，爱强、宗煜、蛤蜊、一川和杰哥都上了，一连批改了一个多星期才完成。

   我也鼓励同学们自己提出大作业，有两位同学尝试，但是最后没有能够设计完全。是这次的一个遗憾，今后如何让同学们做自己大作业，值得深入地探究。

   不用提大作业，小作业中更是体现了几位助教是多么用心。为了增强作业的趣味性，蛤蜊带头按照 OI 竞赛和 ACM 竞赛的出题风格，给每个作业都加了一段童话故事。不仅如此，童话故事们还是连载的，故事的主角芃芃秒天秒地，一个未成年人就已经开启了开挂的人生，在通往人生淫家的路上飞奔。芃芃的故事影响力太大，连物理系科协的伟大内容建设运动“维饥百渴”都采用了与芃芃相关的名字。更刺激的是，芃芃还从童话世界走进现实，每天都混进课堂暗中观察，不时露出邪恶的得意的微笑，给本来欢快的课堂平添了几份魔幻现实的色调。除去小作业的魔幻部分，它们的任务设计都紧扣课程内容，甚至对课程内容作出了指引。几位助教一直在观察着大家的反馈，及时调整了小作业的难度，给同学们提供了贴心的反馈。杰哥的自动批作业工具表现出色，许多作业只要设计好，基本上是一键出分。在杰哥自己的主页上，他把这个工具打出了最高的趣味性，令我深感欣慰。蛤蜊的 learn-helper 也在批作业的过程中，加入了助教和老师的功能，格外好用。而蛤蜊的最得意之作，GPA calculator，是我们在月夜下躺在紫操上，伙同宇翔和主席，喝着快乐水咬着坏人的哈尔滨红肠想出来的。也是在在那个夜晚，宇翔和主席的几点鼓励和肯定，与助教们的“药丸”、“教学事故预定”、“敏捷备课”等担心奇妙地中和了，在我自我怀疑的关头，给了我信心。作业的提交完全通过 Git 进行，这是我的最低要求。当代的科研项目中，团队协作是最基本的要求，Git 正是代码和论文协作的神器。即使学生从课堂上什么都没有学到，在一个月作业的潜移默化中，学会使用 Git，理解版本控制也是值得的。使用 Git 的另一个深远的影响是，它大大提高了作业抄袭和伪造的成本，为良好的学风建设发挥了不可磨灭的作用，在第一年就彻底逆转了物理系小学期祖传作业的陋习。出人意料的是，这一副产品得到了已经毕业的系友们的高度评价。

   令我最为开心的是，即使我没有要求出勤，即使我课程在暑假小学期，大家来上课的热情都非常之高。第一天到最后一天，我没有看到显著的人数变化。而从最后一天的匿名问卷的回收结果来看，除了一名同学提前去实践请假、一名同学电脑损坏缺席、一名同学申请网上上课，所有同学都出席了。真是太令我振奋了。一些同学的水平确实已经不必上课，但是他们以小助教的形式帮助周围的同伴，课上课下和大家一起讨论，对整个教学的效果也做出了不可替代的贡献。令我惊讶的是，这门课还有校外的同学和几位博士生来旁听，有不少朋友在线旁听，好不热闹。

   在课程的匿名问卷统计中，大多数同学都给了课程很高的评价，但也有同学提出了批评。其中一个批评是课的难度太低了，没有挑战性。这一点很中肯，从同学们最后的得分来看，确实有点简单。解决方法很直接，加大大作业难度，甚至引入学术界的开放问题。还有的批评是课程难度太高了，上课云里雾里，跟不上。解决方法我也想好了，把2019年的课程录像整理好供同学们课下观看，并根据录像提取出讲义，可以解决课上教材过多过繁的问题，让学着吃力的同学能在复习中得到支持。还有的同学看穿了我的“敏捷备课”，委婉地劝我要注意身体，不要临时抱佛脚彻夜备课。第二年，有了课程视频和讲义，情况会好不少。有同学不适应小作业中自动评分的规则，觉得不近人情，我跟同学们讲了其中的原因是在科研的场景中的输入输出标准要很严格，不然会返工耗费大量精力，同学们支持了这个观点。

   课上也有暂时学习有困难的同学。一位同学的完美主义情怀比较强，在学习里遇到巨大困难。实践课程的风格与物理课不一样，许多时候在没有搞清原理之前也得先迈出第一步，之后再回过头来领悟。所以这位同学就一直在原地打转，无法行动起来。我非常理解这种状态，因为我本科时也是这样的学习态度。我和他有了几次长谈，连他自己都觉得他在给自己不写作业找理由，我还是可以理解那种无法行动时的痛苦。最后，我给了他一个外部条件：在我的办公室里做作业。这样做是有争议的，一个大学生，不能想小学生一样被监督着写作业。但是我相信，在完美主义者中，有了一个最初行动的种子才可以继续行动下去。如果我恰好能提供这个种子，就是我的荣幸了。

   还有一位同学有了极大的困难，生活中受家长的管束比较多。他已经修满学分，但还是来自愿选课。上课期间他的电脑坏了，也就自然没有办法做作业和学习，他没有求助，只是默默等着电脑修好，顺便看点课程相关的书，打打手机游戏。我也想在办公室监督他把作业做了。他表现出非常强的求知欲，令我有些奇怪对问题这么感兴趣的同学为什么无法上课无法写作业。反思起来，我并没有理解这位同学的思维方式，他好像会自然无视各种 deadline 在自己的世界里探索，电脑坏了，只不过是推迟一下这种探索。然而当他慢慢恢复进度时，他父亲给我打电话，要求他假期快点回家。回家之后，他被家长带去串了几天亲戚，也就松懈下来。到了开学，他依然没有写完作业，而且他已经不回应我的电话、信息和邮件了。在和辅导员与班主任沟通之后，我也想过实在不行就挂了这位同学。然而录成绩的最后一天，我还是想试试，就请了一川去宿舍找他，他不在，舍友说他的手机确实坏了。晚上11点，就在我即将放弃准备睡觉的时候，这位同学借舍友的手机给我打了电话。我兴奋地起床和他约到了办公室，他的电脑上还在查找如何解决手机接不到电话的 bug。我给他讲了大作业的目标，他越来越起劲，一个任务一个任务地完成，让我很是感动。最后到了凌晨4点多我快顶不住的时候，他把大作业的基本要求做了出来。我们伴着熹微的晨光各自回到宿舍，我才长舒了一口气。

   记得尚仁成老师在基科二十年的发言中，并没有像其他老师那样如数家珍地讲他世界各地的学生都多么优秀，而是讲了几位在本科阶段遇到很大困难的同学，讲了他如何帮助这些同学走出心理的怪圈，讲了院系和学校可以为暂时掉队的同学们做点什么。我的印象非常深刻。我眼睁睁看着我的舍友和隔壁的好同学们无助退学或肄业的过程，我对大学阶段的这种无法上课完成学业的状态有着切肤之痛和刻骨的感受。此时，作为一名教师，我可以做的事比十年前更多了，这是我的幸运。

   大家可能已经发现了，这样一门课，我和它的感情非同一般。那么它是从哪里来的呢？这可就说来话长了。

** 缘起基科二十年
   我是基科2005级的学生，当年大二小学期的课程是 Windows MFC C++ 编程。上课时我没有太理解培养计划中的用意，直到2009年我毕业时才从阮老师那里了解到，设置计算机类课程是为了加强同学们在物理研究中使用计算机的能力。后来我一直和科协的学弟们保持有联系，听到了科协的一些技术大牛对大二小学期的看法和希望。当时朦胧觉得或许有朝一日我可以假期回学校开个学习小组，带着大家学习一点数据分析的新技术。

   时间快进到2018年的基科二十年庆祝纪念活动和学术交流会。一次和阮老师在王刚的办公室里闲聊，正好说到暑假小学期。阮老师说从十多年的毕业生座谈中，许多同学希望能在计算机课程和物理课程之间，加一门课帮助大家把两者联系起来。我说是啊，从我跟师弟师妹们的交流来看，大家在把编程技能迁移到物理研究实践中时普遍遇到很多困难。实际上同学开始进入研究时，要么是自己摸索，要么是接受学长指导，一不留神会掉坑，或者在赶时间的过程中图省事养成一些不良习惯。阮老师说确实很苦恼，原来是 Windows 下的 C++，后面他发现物理研究中使用 Linux 系统很多，就在培养方案中换成了 Linux 下的 C++。可是计算机系的老师会从自身的学科要求出发，不会照顾物理系同学，物理系的老师又比较难支撑整个计算机类课程。我抚掌道，我本科时代不务正业，在科协玩了不少计算机类的奇怪东西，神奇的是，它们现在正好都对应着商界工业界造出的云计算、大数据的概念，而且我在粒子物理实验中，恰好把这些曾经歪门斜道的屠龙之技发挥到了极致。如果有大二同学想做实验物理，我倒是一直有组织一个讨论班的想法。阮老师笑道：“对啊，你赶快入职吧，今年暑假马上就开一门课。”

   我打了个机灵，锅从天降，任重而道远啊。我说既然如此，我愿意试试，只是现在开始准备估计很难来得及啊。好在后来阮老师联系了教务部门询问开课事宜，得知最早开课也是2019年的暑假。我才长出了一口气，不然自己肯定上课挂白菜了。

   这事我越想越美，越想越激动，就直接写了一个课程大纲推到了 [[https://github.com/heroxbd/physics-data/blob/master/pd.org][Github]] 上 。我为何如此振奋呢？仔细想来主要有四点：

   其一，这个课程的内容，代表我作为一名以物理为主业的人，十几年以来探索出的一条计算机技术的整体方案。从前，我没有在物理系的培养方案中习得如何用编程帮助我做研究，为了寻找好的方法，我甚至在本科阶段花的精力超过了我学习物理。而和我一起研究这些技能的系科协学弟们都发现自己更热爱计算机，转行做CS研究或（年薪百万的）程序员，只有我还在留在物理界抱着自行研发的技术自娱自乐。我也曾经试着给同课题组的同学们介绍一些当代的高级计算机技术，大家都不是很适应，觉得为了工具改变习惯太不值得了。因此最终我还是一名独行者，我早年一直在怀疑自己探索这些是否值得，直到最近才坦然了：管它有用没用，我高兴就好，没用就当作业余爱好嘛。通过开课来把这些技能教给我的学弟学妹，让我感到特别兴奋。大二的同学们正好没有既有程序风格惯性，更乐于接受新技术。我自己也可以从同学的反馈中验证十年前来一直让我感到人格分裂的难题：我在物理研究中所玩的，看似很专业实际三脚猫的计算机技能，到底是独门绝技还是自娱自乐，全靠我的学弟学妹们是否授受来评判了。

   其二，这件事情是受阮老师的委托，受各个年级系友的委托。我应当仁不让，把担子挑起来，不论如何也应把同学们的在物理和计算机之间建一架桥，削除数物大类学生对计算机的神秘感和畏惧，溶解“我只对物理感兴趣，不学别的”和“学计算机？不就是修电脑吗？”的物理系式误区。

   其三，我正在组建中微子实验的研究团队，工物系的同学有很多了解的渠道，我也希望能吸引到物理系的同学。本来在清华中微子物理这样的基础物理学研究在工物系就是历史路径依赖的，我希望我的研究能被物理系的同学了解。一门以大规模实验数据分析为主线的课程，正好代表了我研究工作的日常，对大二同学进入实验室之前，肯定会发挥非常切实的体验作用。想到今后在我的组里，会有工物系和物理系的同学一起研究讨论，大家大类分流之后再聚到一起，也是非常令人激动的。

   其四，一门四学分的小学期课，实在是太适合我了！作为教研系列青年教师，每年的教学任务是64学时，即4学分。以一个月的奋斗，换取一年自由身，学期中开会访学都不会受到上课的限制，还有余力帮助同事代课，简直无法想象有比这个更美好的事情了。目前青椒的考核重点还是科研，但是教学的工作量必须与科研相等，这对刚起步的教师有非常大的压力。部分院系给出了入职几年以内允许不达到教学工作量的优惠政策，正好从侧面反映了这个事实。这样一门课会让我一下子进入非常稳定的教学状态和格局。

   这四点，任何一点单独拿出来，都足够我欢喜雀跃地去达成，何况有四点！所以我高兴得一下子就把课程大纲想出来了，之后很快就落实在书面上。

** 开课路漫漫
   实际开课的过程还是很扣人心弦的，大概有5个时间点。

   第一个节点让恢复理性。我很有兴趣地把开课计划和陈老师讲了。陈老师比较担心课程缺乏特色，因为工物系已经有粒子物理的数据分析研究生课程了。我说可以把重心放在当代计算机科学技术发展的新工具上，陈老师表达了我并非科班出身，是否能讲得专业的顾虑。这让我心里的热锅冷静了下来，仔细思考我的课除了满足我的需求和院系培养方案的需要之外，会给同学带来什么。于是在多方征求意见的同时，我自己也和自己进行了一场旷日持久的大辩论：到底有开课的必要吗，我开计算机为主的课是不是不务正业？

   第二个时间点上，我被注入了一轮兴奋剂。2018年11月我十分不务正业地与冬波、振齐、欣彤和卓卓组队打了一场计算机系组织的论文作者去重的比赛。本来我是来体验一下竞赛的，以更好地准备之后的 Ghost Hunter 中微子数据分析排位赛。比赛准备时，欣彤提出了数据格式的规定，我按照这个规定使用 `Makefile` 把整个复杂的处理流程都串了起来。本来我心里没底，比较担心大家是否能接受 `Makefile` 这样鬼畜的上古语法，没想到大家非常开心地使用了。这让我无比振奋！因为我们虽然号称是基科战队，但是完全是五种人类。诚然，这也从侧面反映了基科的多元性。我是物理系大凝聚态传统下的另类，再加上对计算机的洁癖，代表小众的物理审美。冬波是去文科世界使用数据进行跨界打劫的理科学者，他用严谨的数学和物理思维对不确定的世界进行建模讲故事，自成一派为数据工程学，这次竞赛正是他的主场。镇齐代表物理系的主流，既有强大的直觉又有深刻的思想，做实验一丝不苟，使用计算机模式是对师兄的（祖传）代码进行改进，渴望学习新技术但为精力所限。欣彤在机器学习和大数据领域研究，代表当代数据处理的尖端，建模、拟合、调参更如入无人之境，已有成熟的数据处理流水线。卓卓代表应用数学和统计学习，进入所有学科的后花园，对一切新事物具有如饥似渴的学习热情。这样一个采样，基本上覆盖了物理系的同学的所有可能的形态，样本甚至神奇地囊括了团委、学生会和科协，大家竟然一致认为 Git 加 Makefile 的工作流程太科学太强大太神奇了。我对工物系的同学并不担心对我未来的课的接受程度，工物系的同学们已经有学习工具软件的课程，反而物理系的同学的偏好我确实心里没底。这一经历对我的触动有多么深刻和强大，它一下子消解了我对开课意义本身的怀疑。

   于是我又行动起来，把几个月前写的大纲放在了饥渴乐园征求意见。大家很开心，七嘴八舌提建议。这期间得到了唐如麟、史冬波、孙慧辰、吕铭、付祈安、魏胜禹、郑鑫宇、陆思锐、王泉、陈思维、代一、鲍亦澄的多角度评论和指点。在大家的热烈讨论中，很多方案和设计都保留在了最后，比如课程名，课程录像，Git/Makefile 主线，GitHub Classroom，大作业的风格等等。这一稿被拍得最多的是：太难了，给学弟学妹们留条活路吧！还有课程不要变成 Installation party。同学们也奔走相告，大纲被传到各个年级群里，引发了各种争论。我也不断修改着课程的设计，融合集体的智慧。霍师兄也正有此意，正在筹备到大学开天体物理数据类的硬课，我们围绕大纲交换了不少看法。这时，箭已在弦畜势待发，我的担心变成了这门课得能满足行政审批的要求，按时开课。

   到了新课申请的季节，我先和阮老师讨论了一次。我拿着大纲先卖了个关子没有给阮老师看，请阮老师谈对课程的期待。阮老师说，要让同学们在物理研究中熟练使用计算机，为大三开始 seminar 进入科研训练打好基础。我拿出了大纲，教学目标竟然和阮老师说得一模一样！讨论非常顺利，阮老师在物理系教学委员会上提议进行了讨论，课程获得通过，物理系向工物系发出教学任务书。教学委员会的一个反馈是，取名为《实验物理的大数据方法》是否太大，何不按课程内容取名为《Python 数据分析入门》。我的回答是课程专注于讲授当代的计算机技术和工具，此时 Python 最结合进行数据分析，但未来可能被其它更好的语言取代，课程的侧重点不应在 Python。

   在工物系，我依旧没有把握，因为系里所开新课较多，驳回率偏高。陈老师帮我分析了课程设计的主题，指出教学委员会评估的开课必要性时的考查点。我对课程在在工物系培养方案中的地位进行了重点阐述，对国内外和其它院系开设的类似课程进行了深入调研。在教学委员会上，开课受到的质疑在于使用4学分学习软件的必要性：理工科学生，通过阅读文档和说明书，就可以快速上手一件工具，有必要用正式的课程来达到目的吗？这个质疑一针见血，也是我与自己辩论的焦点。我举了两个例子，讲述了在实际工作中，同学们的数据分析工作上手很难，缺乏系统性和良好的习惯，会浪费时间或者弱化科研成果。总体上，我还是得到了委员会比较多的支持。系里的老教授还跟我讲暑假要来听我的课，和我一起分析最新物理实验的公开数据，这给了我莫大的鼓励。工物系大二小学期已经安排得很满，高老师最终建议了完美的解决方案：把课程分成两部分，各两学分，工物系同学选第一门课，物理系同学选两门课，两系的同学统一给分。

   接下来我在两系教务办公室穿梭了多次，在（小）陈老师和葛老师的帮助下，最终完成了开课手续。

** 结语
   我很幸运能得到工物和物理教学委员会的认可和支持，也很幸运有这么多同学与我合作最终把课程开了起来。我还非常感谢关心这门课并不断出谋划策的系友们。此时，我可以欣慰地讲，我最初的四个愿望，都达成了。作为我教学生涯的开始，这门课的点点滴滴，都将被我铭记。
* 2020 凝聚态讨论会
  :PROPERTIES:
  :EXPORT_FILE_NAME: wproject
  :EXPORT_BEAMER_HEADER+: \title{实验物理的大数据方法：大作业介绍}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-11 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: seahorse
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 实验物理的大数据方法
   - 工程物理系(2学分)和物理系(2+2学分)的限选课
   - 大二与大三之间的暑假小学期进行

     \pause
   - 以实验物理为主题，学习大数据方法的基础
     1. 理解数据的科学精神，从一开始养成良好的科研习惯
     2. 掌握典型工具 Git, Python 和常用命令行工具
     3. 培养针对具体场景选择合适的工具的品位
** 大作业
   - 从实际的科研场景中抽象出相对独立的核心子问题，供同学们探索
   - 第一阶段：生成——基于物理规律模拟实验观测。
   - 第二阶段：分析——从实验观测反推物理规律。

     数据分析平台自动打分，实时更新排名。

** 大作业实时排名
   #+Attr_LaTeX: :height 0.8\textheight
   [[./isoenergy.png]]

** 大作业选题
   - 2019 年粒子物理方向：中微子探测器的光电子信号识别
     - 2020 年：中微子探测器的 \alpha/\beta 粒子鉴别
       \pause
   - 2019 年天体物理方向：射电干涉阵测量天体在天球的位置
     - 2020 年：（讨论中）天体分类问题
       \pause
   - 2019 年凝聚态物理方向：扫描隧道显微镜求二维金属等能面
     - 2020 年：讨论中
