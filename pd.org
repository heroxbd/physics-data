#+LaTeX_CLASS_options: [aspectratio=169]
#+latex_HEADER: \usepackage{siunitx}
#+latex_HEADER: \usepackage[version=3]{mhchem}
#+latex_HEADER: \usepackage{mathrsfs}
#+latex_HEADER: \usepackage[export]{adjustbox}
#+latex_HEADER: \usepackage{pgf,tikz}
#+latex_HEADER: \usepackage{wasysym}
#+latex_HEADER: \usepackage{tipa}
#+latex_HEADER: \usetikzlibrary{arrows}
#+LATEX_HEADER: \usepackage[UTF8]{ctex}
#+LaTeX_HEADER: \usepackage{appendixnumberbeamer}
#+LaTeX_HEADER: \setCJKsansfont{Noto Sans CJK SC}
#+PROPERTY: header-args :eval never-export :exports both
#+PROPERTY: header-args:dot :eval yes :cmdline -Kdot -Tpdf :exports results
#+sTARTUP: beamer

#+name: savefig
#+begin_src python :var figname="plot.pdf" width=5 height=4 :exports none
  return f"""fig = plt.gcf()
  fig.set_size_inches(w={width}, h={height})
  plt.savefig('{figname}')
  plt.clf()
  '{figname}'"""
#+end_src

#+name: largefig
#+begin_src python :var dpi=100 :exports none
fig, ax = plt.subplots()
fig.set_dpi({dpi})
#+end_src

* 价值
  - 工具审美

    学物理的同学亟需

  - 实践性的课程：没有必要记忆，但一定要在短时间内实践.
* 参考课程
** Python for everyone -- control flow
*** Why do we program?
    - Delegate repeatative tasks
    - Record what you did
**** Digital age
     - We just buy device, use devices.
     - How about we understanding devices, fixing devices and making devices?
     - Programming is one important step. You build your world, change
       the world and participate in creating and nurturing of
       civilization by programming in this age.
     - If you don't know programming, someone else will design your world for you.
**** Not only a programmer needs to learn program
     - Not even a physicist.
     - Everyone needs to a bit of programming
       - Secretary
       - Sales champion
       - Accountant
       - Manager
       - Cab driver
*** Why Python?
    - Python is a self-organized community.
*** Python environment
    - Real GNU/Linux
      + Debian
      + Gentoo
    - Jupyter based
    - Windows based

      Windows based Python installation has caveats, because Python is
      developed under Unix.  Be prepared for unexpected bugs if you
      decide to use Python on windows.

    - Can't or don't want to install software on your computer?  Check
      out PythonAnywhere, Trinket, Cloud9, or CodeAnywhere.

*** Choose an editor
    - Emacs
      https://github.com/redguardtoo/mastering-emacs-in-one-year-guide
    - Vi
    - Others
      - Visual Studio Code
      - Atom Both Emacs and Vi have steep learning curves, they are not
        easy to learn.  But if you master any of them, they pays you.

        Don't use Microsoft Word or Windows Notepad, they are not for
        programs.  Because we need an editor that do plain text and
        syntactically correct.
*** Playground
    https://www.py4e.com/tools/pythonauto

    Do we need one?  I don't think so.

*** Jupyter
    - Causal way to completing classes.
*** Installing Python
    + Windows
      - Not impossible.
      - No good package manager.
        - ... what is package manager?
        - pip on windows is a hack.
      - Snipping tool.
    + macOS
      - No good package manager.
        - Need extra care when using pip, easy to screw up.
    + GNU/Linux
      - steep learning curve.
      - not everything is obvious.
      - pays you back if you are committed to deal with data and
        programs: experimental physicist, data scientist, quant, etc.
        That is the main audience this course is targeting.
      - I am going to give lectures, examples, demonstrations on
        GNU/Linux with Emacs.
    + You can try them if you are brave, and you are encouraged to find
      your own work style.
*** Submit screen shots
    - Needed skill for online discussion.
    - Anonymous discussion groups, piazza "Not good", commented by
      Harry
    - git
      classroom
      https://github.com/CS50Demo/assignment-1-introduction-to-programming-heroxbd-1
*** Version control and Git
    - jiegec's lectures.

    https://cloud.tsinghua.edu.cn/d/f3f13a46ed4c4b5386f9/
*** Write paragraphs of code
    - Basic
 programming
 structures
      - sequential
      - conditinoal
      - iterative
      - recursive
    - Early
 exit


**** Further Reading
     - A proof that all reasonable programs can be decoupled into
       combinations of the 3 constructs. ???
     - Structured program theorem
       - Goto statement considered harmful

     - https://en.wikipedia.org/wiki/Structured_programming
     - https://en.wikipedia.org/wiki/Goto#Criticism
*** Expressions (including statements)
    - Reserved words.  Not used for anything else.
    - Variable
      - Case sensitive
    - Insane vs letter vs mnemonic
    - Covered in 程序设计基础
      - 设计成练习，作为 git 和 jupyterhub 的熟练练习
    - Keyword is historical
      - **
      - *
      - /
      - %
*** How to debug
    - Read error message
    - type()
    - duanzi: 不要用浮点数表示钱——电影 Office Space
      银行用浮点数记账，有误差，被主角用来薅羊毛
*** User input
    - 在数据分析中没什么用
*** Branching
    - Python 语法的特殊之处
    - 强制缩进: 程序员编辑器非常重要
      - Tab vs space
    - Conditionals: if.. elif..  else
    - Try... except
      - Why can't it be replaced by if.. else?
*** Loops and iteration
    - Computers to repetitive task human don't want to do.
    - while loop
    - for loop
    - counting in loop
    - filtering
    - 都作为习惯考察，视同学的基础压缩授课时间
*** Types
    - None
*** Functions
    - Reuse code

      Dont repeat yourself
    - Function with a return

      consistant with mathematical definition
    - Argument variable
    - 太简单了，引入递归

    通过练习保证同学们掌握
** Python for everyone -- data structure
   What python distinguishes itself from C
*** String
    - length
    - indexing, slicing
    - Why index starting with 0?
      Dijkstra argument
    - string concatenation, compare with C
      - unicode string
    - in: logical operator
    - string library is a set of toolkit to use
      - dir(str): very useful tools
*** 参观科学博物馆 可选
*** Files
    - read text files: just use for to loop through.
    - open, close and `with` context
*** List
    - List a powerful container.
    - Indexing compared to strings.
    - Append.
    - List and string combo into text parser.
*** Dictionary
    - The central data structure of Python.
    - Dictionary: key-value pair
      - As opposed to List: ordered collection
    - Python itself is implemented with namespace and dictionaries.
      - What is a language namespace?
        #+BEGIN_SRC C++
          using namespace std;

          std::stdout
        #+END_SRC
    - Example: word counter.
      - get with a default counter value.
    - 2 iteration looping mode:
      #+BEGIN_SRC python
        for k,v in d.items():
      #+END_SRC
*** Tuple
    - Tuple is non-mutable.
    - tuple can be used on the left-side of an assignment statement.
    - List comprehension: beauty of Python.

*** 课堂教学，例子
    - 使用邮件库，文本处理
*** 参考书
    - Think Python 2e
*** 辅助资料
    - https://www.tutorialspoint.com/

      印度的编程样例网站，适合通过例子快速入门一项技能。

    - https://scipy-lectures.org/intro/intro.html

      由 Python 科学计算领域最资深作者亲自执笔编写。
** 用 Python 玩转数据
   http://www.icourse163.org/learn/NJU-1001571005
*** Python 入门介绍
    - 主线是 Python 的广泛应用
    - 交互模式和文件执行模式
    - 缩进
    - Python 中的常量
      - stu-name 不是合法的变量名
    - 屏幕书写很适合制作 MOOC
    - 讲课很口语化，在 MOOC 上更有亲和力
*** 模块
    - 模块是一个逻辑概念，文件是与之对应的实体概念
*** range 迭代器
    好处：用多少就生成多少，甚至可以制作无穷的迭代器。适合大数据应用场景。
*** 作业
**** 寻找第6个默尼森数
** Learn to Program -- The Fundamentals
** 计算机科学和Python编程导论
** Linux 入门基础 - 网易云课堂
   苏勇
   https://study.163.com/course/courseLearn.htm?courseId=232007
*** Linux 系统安装
    - VirtualBox
      - 针对运维工作
        - 软件保守，不适合学术
        - 命令行为主，与科学计算很类似
      - 运行在 macOS
    - 使用英语环境
      - 中文的高质量资料很少，中文的社区非常薄弱且小众
      - 英语是程序的天然语言，对科技表达更丰富
      - 世界目前的约定，各国科学家都在通过英语交流
    - 如果立志建设中文社区，请先通过英语学习成为高手
*** 命令行界面
    - 与计算机交互的精髓
      - 比随意点选更有助于可复现性
    - 更方便地操作远程的计算资源
*** GNOME
    - 有助于渐进地加入命令行
    - 图形界面未必能真切表达人类的意图
    - 图形界面的开发更耗时费力，“易用性”是以开发难度为代价
      - 科学研究更关注本质
*** CLI shell, bash / zsh
    - shell 相对于 kernel，在 kernel 之外
    - 用户通过 shell 把命令传给 kernel
    - bash 的提示
    - 命令、选项、参数
      - hostname
      - ls
      - uname
      - clear
      - id
      - passwd
    - 参数：短线、双线，GNU 约定
    - Shell 后台进程
    - Tab 自动补全
      - unique
    - zsh 可以补全参数
    - 上下方向查找历史，Ctrl-r 搜索命令。
      - emacs 快捷键约定
    - ESC-. 上一个命令的选项
    - *, ?, [0-9], {}
    - Ctrl-Z 挂起
      - jobs
      - bg
      - fg
    - 其它命令
      date, uptime, head, tail, less, cat, lspci, zip, tar, find
*** 编辑器 vi, emacs
    - Unix 一切都是文本，因为一切皆可用文本编辑器修改。
*** 文件系统
    - 目录结构，当前工作目录
    - "."开头的是隐藏文件
    - touch 更新文件时间，不存在则先创建
    - ls -d: list directories themselves, not their contents
    - file 类型
    - 绝对路径、相对路径
      - Linuxcast 图
    - . .. ~ -

    不仔细讲，只做练习
*** 文件操作
    - cp, mv, rm, mkdir, rmdir

    不仔细讲，只做练习
*** 系统目录 FHS
    - /bin, /sbin
    - /boot
    - /etc
      文本的配置文件
    - /tmp
      临时目录

*** 硬盘在系统中的表示
    - /dev/sda, /dev/nvme0
** 实验楼 - Linux 基础入门（新版）
   - 交互式地学习
   - 文件的基本操作
** Data Manipulation at Scale
*** Big data
    Any data that is expensive to manage and hard to extract value
    from. - Michael Franklin UC Berkeley

    - 10000 100KB Excel 表格
    - 134万条边，1万个节点的复杂网络

    - Erik Larson, 1989
      - The keepers of big data say that they do it for the consumer's
        benefit. Data have a way of being used for purposes other than
        originally intended.
** data science foundations R
   https://www.coursera.org/specializations/data-science-foundations-r
** Reproducible research: new self-paced session from March 20, 2020!
   https://learninglab.inria.fr/en/mooc-recherche-reproductible-principes-methodologiques-pour-une-science-transparente/
** 参考书：Linux Sea
   http://swift.siphos.be/linux_sea/
** 参考书：Introduction to Computation in Physical Sciences
https://link.springer.com/book/10.1007/978-3-031-17646-3
** Berkeley Course
   Data science and Bayesian statistics for physical sciences

   https://data.berkeley.edu/news/new-physics-data-science-course

*** Goal
    Modern tools in data science and data analysis in physics.

*** Audience
    Upper division undergraduates.

*** Topic
    - Theoretical, practical, their most common applications in
      physical sciences.
*** Grades
    30% projects, 40% homeworks, 30% class participation.
*** Table of contents
    - Numerical integration
    - Introduction to probability and Bayesian inference
    - More on Bayesian inference and intro to data modeling
    - Linear Algebra
    - Information theory
    - Nonlinear equations and 1-d optimization
    - Optimization in many dimensions
    - Monte Carlo methods for integration and posteriors
    - More advanced Bayesian analysis
    - Variational approximations
    - Interpolation and extrapolation of data
    - Fourier methods
    - Ordinary and partial differential equations
    - Classification and inference with machine learning
*** Programming environment
    - Jupyter notebook

*** Planck
    A series of tasks

    Use measurement of Planck satellite power spectrum to determine
    cosmological parameters.

    - Optimization, find MAP/MLE best fit parameters
    - Determine covariances of all parameters using Laplace approximation.
    - Fisher matrix experiment design predictions.
    - analyze MCMC chains burn-in phase, Gelman-Rubin statistics, and chain
      correlations.
    - Plot 1-d and 2-d distributions and compare them
      to MAP/Laplace approximation.
    - Change one parameter and use importance sampling to produce new
      posteriors.

*** LIGO
    Use matched filtering methods and FFT to analyze first LIGO event
    and show it has detected gravitational waves.

*** Machine learning on galaxies
    - train the ML algorithms for regression
    - test the training algorithms
    - try KNN, gaussian processes, linear and quadratic regression,
      support vector machines, neural networks, random forest...
    - classification: use galaxy zoo galaxy
      morphology (spirals ellipticals, irregulars...) training dat.
    - Use photometry first, then add image information and observe how
      the accuracy improves.
*** grader
    https://okpy.org/
* GEANT4
  https://groups.lal.in2p3.fr/ED-geant4/ttt/program/

  - 从 Python 起，非常友好的入门。注重可视化。
  - Structure of Geant
    - Run
    - Event
    - Track
    - Step
    - 每天一种，一个可视化的方法
  - Run an application
  - Collect information
  - 只做入门教学，教给同学深入学习的方法
** Introduction
** Geometry
** Primary Paricles
** Physics
** Scoring
* 平时作业
  - 细化，标准输入输出
** 学风
   ……追求短浅，境界低，不肯有更长远的设计。这是非常重要的学风问题，但是有好多人谈学风问题时，还是不抄作业，论文自己写。这个问题为什么在研究生层次更突出，就是和破五唯有深刻的联系。学生中很有市场的“攻略观”实在是很普遍。攻略就是目标函数值外部给定的，我只要多快好省，maximize 我的结果，minimize 我的 cost。这是功利的一种体现。我们在评特奖时，现在清华的某些老师，甚至某些院系都在强调“攻略观”，因为他们希望自己的院系能常年保有特等奖学金。博士选题，希望早出成果，快出成果。
* 第一周第一天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p0
  :EXPORT_LaTeX_CLASS_options: [aspectratio=169,handout]
  :EXPORT_BEAMER_HEADER+: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2023-07-10 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 认识大家
*** 自我介绍
    - 2005-2009 :: 在数理基科学习 （科协）
    - 2009-2018 :: 在日本神冈地下实验室，学习研究中微子和暗物质
    - 2018-至今 :: 在工程物理系近代物理研究所任教

    - 主要工作：锦屏中微子实验
    - 合作研究
      1. JUNO江门中微子实验
      2. 日本SuperK超级神冈实验
      3. 日本XMASS暗物质实验
    - 研究兴趣：中微子质量、核子衰变、地球中微子
    - 爱好：大数据分析、高性能计算、系统架构运维

*** 教学团队
    #+attr_beamer: :overlay <+->
**** 助教
      - 王宇逸 :: 物理系本科毕业（科协），工物系博士生
      - 刘晓义 :: 计算机系本科毕业，物理系后援
      - 刘学伟 :: 工物系本科毕业、博士生
      - 刘明昊 :: 物理系本科生（科协）
      - 盘笛 :: 物理系本科生（科协）
      - 徐闯 :: 工物系本科毕业、博士生
      - 陶嘉燊 :: 物理系本科毕业
      - 孙迅 :: 计算机系本科毕业（科协）
      - 吴致颉 :: 物理系本科毕业，德国马普所博士生
      - 陈嘉杰（线上） :: 计算机系本科毕业（科协）、博士生
*** 教学团队（续）
**** 顾问
      - 陈晟祺 :: 计算机系本科毕业、博士生
**** 小助教
- 已经有 5 位同学自荐，请踊跃报名。
**** 算力支持
工物系科协
** 为什么
*** 我为什么在这里？
#+beamer: \pause
**** 培养方案要求？
  + 本课程的“性价比很低”！（由某巨佬结课后评价道）
***** 班主任的观察 :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
（学长）每年都劝退（学弟学妹），每年都劝不住……然后劝不住的学完开始劝退下一届

#+beamer: \pause
**** 听说这门课讲 Python？
- 现在猴子都会 Python，我不会的话会很焦虑

*** “实验物理”和“大数据方法”哪个更重要
#+beamer: \pause
- 课程名的中心语在“大数据方法”，所以后者重要？
- 服务于“实验物理”，所以前者重要？
- 思考：如果两者去掉其一，你能否接受？
#+beamer: \pause
**** 形式逻辑与实验同等重要
- 计算机是形式逻辑演绎机，计算机的原理植根于逻辑。

***** 爱因斯坦 1953 给 J.S.Switzer 的信                             :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
西方科学的发展是以两个伟大的成就为基础：希腊哲学家发明形式逻辑体系(在欧几里得几何中)，以及(在文艺复兴时期)发现通过系统的实验可能找出因果关系。

*** 释义
**** 什么是“实验物理”                                        :B_exampleblock:
     :PROPERTIES:
     :BEAMER_env: exampleblock
     :END:

     - 一切费电的物理！

       “理论学家费纸，实验学家费电，理论实验物理学家费米”

       - 欧洲核子中心(CERN)一年用电约 \SI{1.3}{\tera\watt\hour}。

         北京东城区西城区2016年用电总量 \SI{10.1}{\tera\watt\hour}，人口 200 万。
     #+beamer: \pause
     - 观察物理现象的学科
       - 控制物理现象发生的环境？是 \to “实验”(狭义)；否 \to “观测”。
       - 实验物理的目标：发现物理规律，包括测量物理常数。

         从取得的数据出发，进行统计推断，证伪物理规律的假设。

**** 什么是“大数据”

     商业概念。“大”是相对的，大数据是指无法用一台计算机处理的数据。

*** 实验物理与计算机
    - 逻辑电路的起源
      - 盖革计数器，电离辐射通过时给出脉冲信号
      - 需要构造：顶端探测器无计数，中间有计数的逻辑
      - 真空电子管“与”、“或”、“非”等逻辑门出现
      - 真空电子管通用电子计算机：ENIAC （1945）
    - 中子和辐射输运问题
      - 第一代电子计算机大多用来进行 Metropolis Monte Carlo 算法
      - 模拟预测氢弹中的输运过程
    - 半导体逻辑电路
      - 晶体管替代真空电子管
      - 计算机功耗和体积大幅减小
    - Monte Carlo 算法成为大型物理实验设计的一部分
*** 大物理与大数据

    - 大型物理实验，产生大数据，多台计算机协同工作：分布式计算。
    - 跨地理的分布式计算称为“网格”(grid)，在早期促进和影响了互联网的发
      展。

      - FAST 天眼：每年@@latex:$\SI{\sim 1}{\peta B} = \SI{1e15}{B}$@@。
      - JUNO 江门中微子实验：每年 \(\SI{\sim 2}{\peta B}\) 。

    - CERN 在 90 年代决定使用 Intel 民用计算机组成的集群来完成 LHC 的计
      算任务，是个人电脑级硬件集群成为科学计算主流的标志。

      - X86(Intel 和 AMD) 计算集群是当今大数据工业界的主流配置。

    - 近年来，大数据方法独立于实验物理，被工业界广泛采用，与神经网络结
      合，催生了“深度神经网络”，或“深度学习”。

      - 一系列新方法被应用到实验物理。
*** 此课在知识体系中的地位
    - 这是一个数据的时代。
    - 数据时代需要 *黑客技术* Hacking Skills、 *数理统计* Math & Statistics Knowledge 、 *专业知识* Substantive Expertise 等多方面技能。

    #+Attr_LaTeX: :height 0.65\textheight
    [[./fig/Data_Science_VD-r1.pdf]]
*** 技能树
    #+Attr_LaTeX: :height 0.4\textheight
    [[./fig/Data_Science_VD.png]]

    1. 本课程目标为数理大类的同学补齐 *黑客技术* 。
    2. 警惕 *Danger Zone!* 。
       - 黑客技术 :: 人类掌握工具的最高水平
       - 数学与统计 :: 人类理性思维的最高水平，欢迎选修《概率统计分析及量测技术》
    3. *专业知识* 根据自己的兴趣选择。
       - 物理学的思维方式和实践方法是一切专业知识的标杆。
    4. 本科时代要积极认真学习以上硬知识。
*** 物理学是“硬科学”
    以知识的量化程度排序：

    #+attr_beamer: :overlay <+->
    - 0类学科：努力区分偶然统计关联和因果关系

      - 到底哪些是决定性因素？

      - X基因决定了此性状，Y基因决定了此性状？XY一起决定？
      - $X \bar{Y}$ ， $\bar{X} Y$ ？

    - 1类学科：努力确认变量之间影响的趋势

      - “房价加速增长的势头得到遏制”

    - A类学科：努力算出具体的数字

      - 地球的年龄是46亿年，45--47亿年，还是 46--48 亿年？

    - Z类学科：没有不确定度的结果不是科学结论！
     
      - 电子磁矩，以玻尔磁子 $\mu_B$ 为单位

        \[ g/2 = 1.001 159 652 180 73 (28) \]

        Ref: Phys.Rev.Lett.100:120801,2008
** 课程概论
*** 数据分析的指导原则

    #+attr_beamer: :overlay <+->
    - “复现”原则 :: 以人类语言和计算机语言的形式，详细记录每一步计算。

       这是科学的基本精神，与可证伪性一起，是区分科学与伪科学的标志。

    - “透明”原则 :: 每一步的数据都应尽量可以被人类直接阅读，比如 JSON, CSV。如果不得
       不用二进制模式，一定是使用最普遍最开放的格式，比如 HDF5。

    - “一次”原则 :: Single Point of Truth, Don't Repeat Yourself. 不可在分析做任何
       重复，任何有意义的信息都应该被共享。

    - “最佳工具”原则 :: 尽量使用高级语言和语法糖，为每个子任务选择合适的工具。只有在性能
       分析之后，才在必要时使用低级语言进行性能加速。

       - 最佳工具会随时间变化，因此课程名不是 +Python 数据处理与科学计算+
       - 推论：入手研究之前，应当优先调研现有工具。

*** 课程内容
    - 以实验物理为主题，学习大数据方法的基础。
      1. 理解数据的科学精神，从一开始养成良好的科研习惯
      2. 掌握典型工具 Git, Python 和常用命令行工具，鼓励自学
      3. 培养工具的品位，针对具体场景选择合适的工具
#+beamer: \pause
**** 计划安排
     - 实验物理的大数据方法(1) 三教1103
       - 第一周 :: Git 入门，Python 入门
       - 第二周 :: Python 科学计算与可视化
     - 实验物理的大数据方法(2) 三教1102
       - 第三周 :: 数据处理的命令行工具
       - 第四周 :: 基于关系代数的数据组织
     - 上课：周一至周四，三四大节
     - 答疑：周一至周四课后 4:55--5:30
*** 课程评估 按百分制记分 录入成绩时映射为等级
**** 平时作业 62%
     - 覆盖课堂学习的知识要点
       - 平时作业中的 80% 为黑盒测试，20% 为白盒测试。
       - 白盒测试重点考察：Git commit 的内容必须有意义，程序书写规范
**** 大作业 30%
     - 取材自实验物理不同方向的真实场景。也可以由同学自行提出。
       - 分两个阶段，对应前两周“生成”和后两周“分析”，互为逆过程。
**** 捌分 8%
     - 小助教(A)，贡献 FAQ 内容(B)，审校讲义内容(C)，课堂贡献(D)，娱乐作业(E)
     - 计入总评 \( \min(8, \sqrt{A^2 + B^2 + C^2 + D^2 + E^2}) \)
*** 教材
    - 自编讲义：《实验物理的大数据方法》
**** 参考资料
    - 往年课程录像：http://hep.tsinghua.edu.cn/~orv/teaching/physics-data/
**** 辅助资料
      - Allen Downey, Think Python 2e
      - Fernando Perez et al., Scipy Lecture Notes
      - Jeroen Janssens, Data Science at the Command Line
      - David MacKay, Information Theory, Inference, and Learning Algorithms
      - https://learnxinyminutes.com/ 从已经有编程基础迅速入门 Python。
*** 大作业预告
    - 课赛结合：Ghost Hunter 2023 中微子实验数据分析
      - MeV Gamma 射线的能量沉积模型
    - 粒子天体物理
      - 宇宙射线缪子测量
    - 凝聚态物理
      - noise spectrometer

**** 自定义                                                  :B_exampleblock:
     :PROPERTIES:
     :BEAMER_env: exampleblock
     :END:

     - 如果有同学希望采用其它学科方向的大作业，请提出申请给续本达 =<orv@tsinghua.edu.cn>= ，7月17日截止。
       1. 问题描述和学科背景
       2. 数据的输入和输出的定义与格式
       3. 数据分析结果的评价标准
*** 有智慧地提问
    - 遇到困难多求助
      - 特别是那些可以把人“卡住”的“小”问题。一定不要自己扛，及时求助：
        老师、助教、小助教。
      - 学长忠告 +不要问我是怎么知道的系列+
        #+beamer: \pause
        - 不要用某度，用 Google 或 Bing 海外版
        - 以 CSDN 为代表的中文网站 99% 的信息都是错的（或过时的）
        - stackexchange 系列英文网站 70% 信息可信，其它英文网站 50% 可信
        - 官方文档 100% 可信
        - 综合多种信息来源，作出自己的判断，不要轻信小学生博主。
    #+beamer: \pause
**** [[http://www.catb.org/~esr/faqs/smart-questions.html][求助时要有智慧]] 作者 Eric Raymond
    - 原则：让他人以最小的努力复现出你的问题
      1. 不要这样说话： +救命! 我的程序坏了！哪位大神快来帮帮我！急！在线等！哭了！+
      2. 使用最简洁的语言，借助最简单的例子描述问题
        
    - 原则：努力让你的问题使更多的人受益
      1. 非隐私问题，尽可能公开提问，公开讨论。 _不要私信_
*** 如何使用 Gitlab 提问和解答
- issue （议题）
- merge request （合并请求）
** 计算环境
*** GNU 环境
    - POSIX 是 /Portable Operating System Interface/ 的缩写，是关于计算机
      操作系统的国际标准。它规定了操作系统的基本工具和程序接口。

    - GNU 是 /GNU is not Unix/ 的缩写，是自由软件运动形成的 POSIX 环境。

    - 科学研究中时间和空间跨度都很大，需要使用公开的国际标准化接口，才
      能满足 _复现_ _透明_ 和 _最佳工具_ 原则。

**** 可使用 GNU 环境的操作系统
    - GNU/Linux :: 天然大佬。请帮助周围的同学，并自荐小助教。
    - Apple macOS :: 使用 =Gentoo= 、　=homebrew= 、 =nix= 、 =macports= 配置
    - Microsoft Windows :: 本身不满足，但可以使用以下扩展
      1. Windows Subsystem for Linux (WSL)
      2. Cygwin, MinGW
    - 权威指南：https://physics-data.meow.plus/faq/

*** GNU 环境的基本操作
    #+attr_beamer: :overlay <+->
    - ls :: list structure, 列出当前路径中的文件
    - cd :: change directory, 改变当前路径
    - sudo :: 使用管理员权限执行操作
    - apt :: Advanced Package Tool 软件管理器
      - =apt update=
      - =apt install nano diffutils patch=
    - nano :: 文件编辑器，与 emacs, vi, VSCode 等互换

      - 查找 =^W= 、替换 =^R= 、保存 =^O= 、退出 =^X=

         注： =^W= 代表按住 Ctrl 键，再按 W。
*** 命令参数标准
    - GNU 标准定义了推荐的参数格式
    - =git config --global user.name "Benda Xu"= 
    - 命令的各个部分由 *半角* 空格分隔
      - 不作为分隔符的空格由 *半角* 引号标出
    - 短参数：一条短线接一个字母
      - =ls -a=
      - =kill -9 xxxx=
      - =sudo -s=
      - 可以缩写在一起
        - =ls -lrta=
        - =sudo -sE=
    - 长参数：两条短线接一个单词
      - =ls --color=tty=
      - =git show --pretty=short --show-signature=
      - 由 GNU 推荐，是在 POSIX 标准之上的扩展
    - 更多参数，使用 =man= 查看文档 =man ls=, =man git=
** 学习建议
*** 学术共同体意识
- 我们在一个月的时间里，共同理解物理和逻辑，沉淀下来我们的探索过程
*** 网站的使用
- 收藏夹
*** 邮件
- 客户端
*** 编辑器
**** 程序编辑器三大流派
    - Emacs
    - Vi
    - Visual Studio Code

** 版本控制
*** 版本控制
    - “我和同学合写文章，结果他是在昨天的版本上改的！我还得重改！”
**** 发展历史
     #+attr_beamer: :overlay <+->
     - 石器时代 :: =实验报告-v1=, =实验报告-v2=, =实验报告-v2.2=, =实验报告-v2.2-续本达更新20190629= ……
     - 青铜时代 :: diff, patch 文本差分算法
       #+BEGIN_SRC dot :file ./diff-patch.pdf
         digraph dataset {
         bgcolor="#ffffff00"

         { rank = same; B D1 }
         { rank = same; D2 M }

         B [label = "公共版本"]
         D1 [label = "差分1"]
         D2 [label = "差分2"]
         M [label = "合并"]

         B -> D1 [label = "更新第二章"]
         B -> D2 [label = "修改第一章"]

         D1 -> M [label = "修改第一章"]
         D2 -> M [label = "更新第二章"]
         }
       #+END_SRC

       #+Attr_LaTeX: :height 0.35\textheight
       #+RESULTS:
       [[file:./diff-patch.pdf]]
     - 铁器时代 :: 版本控制服务：CVS，SVN
     - 现代 :: 分布式版本控制：Git
*** Git 案例
    “我上周写的程序被不小心覆盖掉了！无法找回之前的版本。”

    #+attr_beamer: :overlay <+->
    - 小强同学经过认真思考和试验，发明了一种巧妙的解决问题方法，并写成
      程序，经验证效果拔群。
      - 小强非常振奋，他把成果记了下来，并继续重构并优化解法。
      - 两个星期之后，他的优化并没有达到预期效果，反而使结果变差。
      - 令他更为懊恼的是，他已经无法达到自己两周之前的高度了，因为忘记
        了改之前的程序是怎么写的。
    - _复现_ 原则被破坏。
    - =解法-20190530.backup= ， =解法-20190608= ？重复存储， _一次_ 原则被破坏。
    - 讨论：你遇到的最难受的问题，如何解决？
*** Git 基础 安装： =apt install git=
    - 使用 Git，养成良好的习惯，就能解决以上问题。
    - Git 由 Linus Torvalds 发明，用来支撑全世界 5000 名以上 Linux 操作
      系统内核开发者的协作。是我们的 _最佳工具_ 。
    #+attr_latex: :height 0.5\textheight
    [[./fig/pro-git_snapshots.png]]
    - 在任意时间我们都可以选择给工作区进行一次“快照”。
    - 相邻快照之间，是代表文件改动的差分量。
*** 例子：撰写讲义
    #+attr_latex: :width 0.7\textwidth
    [[./fig/tig-example.png]]
    - 查看每次提交的改动。工具 =tig= ，可由 =apt install tig= 安装。
*** Git 三种状态
    - 已提交（committed） :: 改动安全保存在数据库中
    - 已修改（modified） :: 自上一次提交，有文件被修改
    - 已暂存（staged） :: 已修改的文件被作了标记，将被包含在下一轮提交中

       [[./fig/git-modes.png]]
* 第一周第二天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p1
  :EXPORT_LaTeX_CLASS_options: [aspectratio=169]
  :EXPORT_BEAMER_HEADER: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2023-07-11 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 准备与复习
*** 预备
- 查看是否已经安装 Python
  #+ATTR_LATEX: :environment verbatim
  #+begin_example
    python3

    Python 3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0] on linux
    Type "help", "copyright", "credits" or "license" for more information.
    >>> 
  #+end_example
  - 退出输入 =exit()= 或者按 =Ctrl-d= 。
  - =Ctrl-d= 代表文件（标准输入）的终止。
- 如果没有 Python（可能性不大），或想升级 Python
  #+begin_src bash
    apt install python3 # Debian @ WSL
    emerge -vt python:3 # Gentoo Prefix @ macOS
  #+end_src

*** 黑客审美
    - 当代文明的两大支柱是 _实验_ 和 _逻辑_ 。
    - 四个原则：
      1. _复现_ - 否则成伪科学
      2. _透明_ - 否则玄学黑箱
      3. _一次_ - 否则到处是坑
      4. _最佳工具_ - 否则效率低下

#+beamer: \pause

    - 推论：
      1. 兼容比性能优先

         #+BEGIN_quote
           Premature optimization is the root of all evil.
           -- Tony Hoare, Donald Knuth
         #+END_quote

      2. 人类时间比机器时间宝贵

      3. 使用工具进行版本控制

*** 最佳工具
     - GNU 环境、 POSIX 标准：用于促进程序有几十年跨度的兼容性。
**** Git：当代的版本控制
     - 快照与差分
     - 三个状态：
       - 已提交 committed （未改动 unmodified）
       - 已修改 modified
       - 待提交 staged
     
**** 程序编辑器三大流派
     请完成网络学堂的“课程问卷”，计划帮助大家掌握一款编辑器。
     - Emacs
     - Vi
     - Visual Studio Code
      
** Git
*** 作业：Git 练习
    - [X] DONE 你会在 [[https://git.tsinghua.edu.cn][清华 GitLab]] 收到一个新仓库，是今天的作业
    - [X] DONE 设置本地到 [[https://git.tsinghua.edu.cn][清华 GitLab]] 的访问权限
      - [X] 生成 SSH 密钥对
      - [X] 上传到 https://git.tsinghua.edu.cn

    - [X] DONE 同步你的 Git 仓库，输入你的基本信息
      #+BEGIN_EXAMPLE
 我的姓名：
 我的学号：
 我的 Python 版本信息：

 课程感言：
      #+END_EXAMPLE
    - [ ] TODO 查看修改 (diff)，预估得分
    - [ ] TODO 添加修改 (add)，提交 (commit)，推送 (push)
      
*** Git 基本命令
    - diff :: 查看改动
    - status :: 查看状态
    - add :: 添加文件
    - commit :: 提交
    - log :: 查看历史
    - pull :: 从远程下载
    - push :: 推送到远程
    - merge :: 合并分支

**** 内建手册 =man=                                          :B_exampleblock:
     :PROPERTIES:
     :BEAMER_env: exampleblock
     :END:

     命令的具体含义可以参考 =man= 命令，例如，

     #+BEGIN_EXAMPLE
 $ man git add
     #+END_EXAMPLE
*** Git 的状态与命令
    #+BEGIN_SRC dot :file ./git-stages.pdf
      digraph git {
      rankdir="LR";

      C -> M [label = "编辑\ngit diff"]
      C [label = 已提交]
      M [label = 已修改]
      M -> S [label = "git add\ngit reset\ngit rm"]
      S [label = 待提交]
      S -> C [label = "git diff --cached\ngit commit"]
      }
    #+end_src

    #+RESULTS:
    [[file:./git-stages.pdf]]

*** 提交说明 commit message
    - =git commit= 时需要输入一段话概括本次 commit 所作的修改
    - 目标：让他人和未来的自己一目了然，只通过读此信息就知道自己做了什么

**** commit 样例
- 不错的例子：“完善了个人信息页面，并填写了课程感言”
- [[https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=78ede4d591c8c16e65e14414389ab9b6a58f21eb][短的]] ，把事情讲清楚，把涉及到的人讲清楚。
- [[https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=71a6a81929f88171feb6e829ff0b87b2ed396d91][较长的]] ，把所有的改动概括清楚。
- [[https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=ed66572a4917c140825ef8cb0a4150bd69296d0c][更长的]] ，在 commit 里说明为什么要这样做，引用相关的讨论。

*** 反例
      1. 数数：1,2,3
      2. 复读：Update,Update,Update
      3. 欺负键盘：aaaaa,wwwww,asdf

    - 不太好的例子：“完成作业”

**** 来自学长的忠告：作业得分不重要，重要的是优雅地得分        :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:
我看到的无意义commit message有：“这是一个描述”，“xX”，“1234567899”等等。由于git的特性，后续的提交没有办法覆盖这些无意义的commit，所以这个操作在
很大程度上是不可逆的。也就是说，批阅作业的助教可以看到这些无意义的提交信息，然后或许会给你的白盒扣上2分。虽然我相信批改作业的助教不会这么残忍，但
请一定要有“提交信息要有意义”的意识。

请查看白盒标准：https://physics-data.meow.plus/faq/rules/whitebox/

- 如果想要自己玩一下Git的相关操作（强烈推荐这么做，尤其是要学会add和commit如何取消。我个人对于一个操作是否可逆是有追求的），可以自己在GitLab上面创
建一个项目练习。

*** Git 与编辑器的整合
**** 禁止使用 Gitlab 网页上传和修改工具
     - 远远次于命令行的功能，无推广价值
     - 禁止使用，防止养成不良习惯

**** 在命令行调用相应的编辑器
      - =git= 会调用 _环境设定_ 的编辑器
        - 临时调整：使用 =EDITOR=xxxxx= 前缀
          + EDITOR="code --wait" 见 [[https://git.tsinghua.edu.cn/physics-data/faq/-/issues/88][李禹锋的 issue 88]]
          + EDITOR="vim"
          + EDITOR="emacsclient" 见 [[https://git.tsinghua.edu.cn/physics-data/faq/-/issues/109][黄宇同的 issue 109]]
            
      - Debian 上永久调整系统的默认编辑器，管理员权限执行
        #+begin_src bash
          update-alternatives --config editor
        #+end_src

        选择需要的编辑器

      - 配置 git 的编辑器：查看文档配置，关键字是 =core.editor=
        #+begin_src bash
          man git config
        #+end_src

*** 精心撰写提交说明
    - 说明既要给人类读，也要易于自动处理
    - 第一行：高度概括改动
    - 空一行后，撰写具体改动内容
      - 形式不限，可分段、分要点。
      - 篇幅不限，以描述清楚为目标。
    - 备注：感谢其他贡献者。

**** 何时提交 commit ？
     - 完成一件事，有一个较独立的“版本”：添加一个功能，修复一个问题，
       重构一块代码。
     - 初学者可尝试多提交，可以充分练习 Git 操作，也可以获得更细致的开
       发历史。
       - _不要_ 把多个不相关的修改攒成一次巨大的提交。
*** 参考资料
    - Git 提交说明的白盒采分项：
      
      https://physics-data.meow.plus/faq/whitebox/#git

    - 写好提交说明的七大原则 by cbeams
      https://chris.beams.io/posts/git-commit/
      
    - 提交说明编写指南 by 阮一峰

      http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html

** 对 FAQ 和讲义作贡献
*** 有突出贡献的同学可得 8% 左右的总评鼓励
     - 课程 FAQ 
       - https://git.tsinghua.edu.cn/physics-data/faq/
       - 提出好问题，整理问题解答，提交 merge request，……
     - 课程讲义
       - 修正错别字、语言错误、常识错误
       - 指出逻辑不明的地方
       - 补充课堂讲授但讲义遗漏的内容
       - ……
     - 贡献方式
       - [X] Git
       - [X] GitLab issue
       - [ ] GitLab Merge Request
*** GitLab issue
    - https://git.tsinghua.edu.cn/physics-data/faq/-/issues/
    - https://git.tsinghua.edu.cn/physics-data/lecture/-/issues

    - 创建 issue
      - 标题：概括问题
      - 正文：详细描述问题
        1. 给出复现问题的方法，提供 _最小可复现单元_
        2. （可选）分析问题，提出可能的解决方法
    - 回复 issue ，参与讨论
    - 关注 issue ，打开 “Notifications”

*** Git 仓库间通信
    #+Attr_LaTeX: :height 0.7\textheight
    [[./fig/git-distributed.png]]

    - 建议：通过 SSH (secure shell) 通信。
*** SSH 通信
   - 通信的认证问题：如何证明我是“我”？
     #+latex: \pause
     - 手机验证码
     - 一次性密码（one-time password，OTP）
     - 用户名密码
     - 非对称加密（银行 U 盾）
   - 生成 SSH 非对称密钥对
     - 一个公钥：公布， =id_rsa.pub=
     - 一个私钥：私密， =id_rsa=
     - 在网页界面把 =id_rsa.pub= 交给 =git.tsinghua.edu.cn=
     - =git.tsinghua.edu.cn= 用我的公钥加密挑战码，只有我的私钥才能解密
       - =git.tsinghua.edu.cn= 知道了我是“我”
       - 我也需要知道它是真的 =git.tsinghua.edu.cn=
     - 建立了与 =git.tsinghua.edu.cn= 的可靠通信

*** 分支
[[https://gitlab.airelinux.org/xmass/waveform/][例子]]

- 关系
*** Git 仓库间通信的各阶段
    - fork :: Gitlab 类 Git 平台的术语，对应于 =git clone=
      - 在本人帐号创建复本，用于自己修改和提交
      - 提交说明的备注：关闭哪个 issue
    - remote :: Git 的远程仓库
        #+begin_src bash
          git remote -v
        #+end_src
        #+begin_example
          origin  git@git.tsinghua.edu.cn:physics-data/lecture.git (fetch)
          origin  git@git.tsinghua.edu.cn:physics-data/lecture.git (push)
        #+end_example
    - pull, push :: 从远程下载和上传改动，单元为差分 commit
    - merge :: 与其他仓库或分支通过交换差分来整合
    - merge request :: GitLab 平台术语，发送 merge 请求。请他人整合自己的差分贡献。

** Python 入门
*** 为什么用 Python
    #+attr_beamer: :overlay <+->
    - Python 是一门“解释型语言”，相对于“编译型语言”更易调试。
    - Python 的语法风格简明，即使对外行也易读。
      - 书写效率高，快速写出不错的程序。
    - Python 可以直接调用 Fortran, C/C++, R 等语言库，因此也叫“胶水”语
      言，即把不同的程序粘合在一起。
      - 易于与已有工具整合。
      - 促进团队分工，协作。
      - 大大丰富了 Python 生态系统的功能，进一步优化程序运行效率。
      - 符合 _最佳工具_ 原则。
    - Python 是一个通用语言，不仅在科学研究，在生活中的方方面面都会有用。

    - 在科学计算领域得到广泛欢迎和采用。

      https://www.python.org/
*** 特点和用途
    - Python 是一门“解释型语言”，相对于“编译型语言”更易调试。
    - Python 的语法风格简明，即使对外行也易读，大大降低了程序设计的门槛
    - Python 可以直接调用 Fortran, C/C++, R 等语言库，因此也叫“胶水”语 言，即把不同的程序粘合在一起。
    - Python 是一个通用语言，不仅在科学研究，在生活中的方方面面都会有用。
      - 操作系统生成器和管理器 ([[https://wiki.gentoo.org/wiki/Portage][Gentoo Portage]])
      - 网站 ([[https://www.djangoproject.com/][Django]])
*** 参考资料
    - Allen Downey, Think Python 2e

      简明通俗的入门书

    - http://py4e.com/

      Python for everybody，全球知名的 Python 在线教程，新手友好。

    - Learn X in Y minutes

      https://learnxinyminutes.com/docs/python3/

      已经掌握若干门语言的同学，可以通过此提纲快速入门

*** Python 环境
安装了 Python 之后，在命令行界面可以直接进入 Python 的交互模式：

#+ATTR_LATEX: :environment verbatim
#+begin_example
  $ python3
  Python 3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0] on linux
  Type "help", "copyright", "credits" or "license" for more information.
  >>> 
#+end_example

**** IPython （Jupyter 前身）增强的额外交互功能环境

#+ATTR_LATEX: :environment verbatim
#+begin_example
  # apt install ipython3
  $ ipython3
  Python 3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]
  Type 'copyright', 'credits' or 'license' for more information
  IPython 8.5.0 -- An enhanced Interactive Python. Type '?' for help.

  In [1]: 
#+end_example

*** 查看 Python 的基本信息
#+begin_src python :results output :session local :exports both
  import sys
  print(sys.version)
#+end_src

#+RESULTS:
: 3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]

#+begin_src python :results output :session local :exports both
  print("\n".join(sys.path))
#+end_src

#+RESULTS:
: 
: /usr/lib/python311.zip
: /usr/lib/python3.11
: /usr/lib/python3.11/lib-dynload
: /usr/local/lib/python3.11/dist-packages
: /usr/lib/python3/dist-packages
: /usr/lib/python3.11/dist-packages

*** Python 之禅
#+begin_src python :results output :session local :exports both
import this
#+end_src

#+RESULTS:
#+begin_example
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
#+end_example

*** 算术基本运算
+ =+= 加， =-= 减， =*= 乘， =/= 除， =//= 整除， =%= 取余， =**= 乘方
+ 其它运算由函数来定义
#+begin_src python :results value :session local :exports both
2+1
#+end_src

#+RESULTS:
: 3

#+begin_src python :results value :session local :exports both
2*7, 2**7, 3/2, 3//2, 3%2
#+end_src

#+RESULTS:
| 14 | 128 | 1.5 | 1 | 1 |

#+begin_src python :results value :session local :exports both
  import math
  math.factorial(10) # 10!
#+end_src

#+RESULTS:
: 3628800

*** 整数是高精度的
- 计算机上标准整数运算有界；
- 高精度整数并没有硬件的底层支持，是 Python 的软件实现，以一些性能损失为代价给予用户便利。

#+begin_src python :results value :session local :exports both
math.factorial(66)
#+end_src

#+RESULTS:
: 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000

#+begin_src python :results value :session local :exports both
2**100
#+end_src

#+RESULTS:
: 1267650600228229401496703205376

*** 整除的基本约定
负数整除：向小的方向截断。

#+begin_src python :results value :session local :exports both
5 // 3, -5 // 3, 5.0 // 3.0, -5.0 // 3.0
#+end_src

#+RESULTS:
| 1 | -2 | 1.0 | -2.0 |

#+begin_src python :results value :session local :exports both
5 % 3, -5 % 3, 5.0 % 3.0, -5.0 % 3.0
#+end_src

#+RESULTS:
| 2 | 1 | 2.0 | 1.0 |

#+begin_src python :results value :session local :exports both
(-5 // 3) * 3 + (-5 % 3) == -5
#+end_src

#+RESULTS:
: True

*** 布尔运算：真与假
Python 的设计目标是“符合直觉”

#+begin_src python :results value :session local :exports both
not True, not False
#+end_src

#+RESULTS:
| False | True |

#+begin_src python :results value :session local :exports both
True and False, False or True
#+end_src

#+RESULTS:
| False | True |

#+begin_src python :results value :session local :exports both
True + True, True * False # True 实际上是 1, False 实际上是 0
#+end_src

#+RESULTS:
| 2 | 0 |

#+begin_src python :results value :session local :exports both
True * 8, False - 5 # 只为了说明 True 和 False 的内部表示，不要这样写代码
#+end_src

#+RESULTS:
| 8 | -5 |

*** 条件判断
- 等号写两次用于判断，写一次用于赋值。
#+begin_src python :results value :session local :exports both
1 == 1, 2 == 1
#+end_src

#+RESULTS:
| True | False |

#+begin_src python :results value :session local :exports both
1 != 1, 2 != 1
#+end_src

#+RESULTS:
| False | True |

#+begin_src python :results value :session local :exports both
1 < 10, 1 > 10, 2 <= 2, 2 >= 2
#+end_src

#+RESULTS:
| True | False | True | True |

*** 数据类型
=int= 指整型，没有上限； =float= 是浮点型，一般为双精度； =str= 是字符串

#+begin_src python :results value :session local :exports both
type(1)
#+end_src

#+RESULTS:
: <class 'int'>

#+begin_src python :results value :session local :exports both
type(1.5)
#+end_src

#+RESULTS:
: <class 'float'>

#+begin_src python :results value :session local :exports both
type('Hello')
#+end_src

#+RESULTS:
: <class 'str'>

#+begin_src python :results output :session local :exports both
print(type("a"), type("你好")) # 单个字符和汉字都是字符串
#+end_src

#+RESULTS:
: <class 'str'> <class 'str'>
*** 字符串
与高精度整数一样，字符串也没有硬件的对应，是 Python 的软件实现。这极大方便了使用 Python 进行文本处理。

#+begin_src python :results value :session local :exports both
"今天" + "要下雨"
#+end_src

#+RESULTS:
: 今天要下雨

#+begin_src python :results value :session local :exports both
"1" + "2"
#+end_src

#+RESULTS:
: 12

*** 标准输入输出
- 标准输出默认与屏幕连接， =print()= 默认向标准输出写
- 标准输入默认与键盘连接， =input()= 默认从标准输入读

#+ATTR_LATEX: :environment verbatim
#+begin_example
q = input() # 下面由现场输入
print(q)

frog
#+end_example

**** Python 的注释
- 注释使用 '#' 号引出，多行注释则多用几次 '#' 号
#+ATTR_LATEX: :environment verbatim
#+begin_example
# 在这个程序中，我们将使用计算球谐函数对任意
# 球面上的连续函数进行拟合
#+end_example

*** 正式入门 Python：输出 Hello World!
#+begin_src python :results output :session local :exports both
print("Hello World!")
#+end_src

#+RESULTS:
: Hello World!

**** 创建脚本文件
使用编辑器创建 =hello.py= ，写入以下内容，第一行是标注脚本由什么来解释。
#+begin_src python
  #!/usr/bin/env python3

  print("Hello World!")
#+end_src

给予脚本可执行权限并执行
#+begin_src bash
  chmod +x hello.py
  ./hello.py
#+end_src

** Python 变量
*** 变量创建与使用
- Python 是“弱类型语言”，创建变量可不指定类型。
#+begin_src python :results output :session local :exports both
message = "This is an new era. 新时代"
print(message)
#+end_src

#+RESULTS:
: This is an new era. 新时代

- 变量在使用中可以改换类型
  #+begin_src python :results value :session local :exports both
    message = 1
    type(message)
  #+end_src

  #+RESULTS:
  : <class 'int'>

*** 字符串函数
字符串的操作相对于硬件调用，是一项高级功能。Python 有强大的字符串处理工具。

#+begin_src python :results value :session local :exports both
len('123456'), len('654321') # 字符串长度
#+end_src

#+RESULTS:
| 6 | 6 |

#+begin_src python :results value :session local :exports both
s = "我正在上课。"
s[0], s[2:4], s[-1] # 字符串可以取子串
#+end_src

#+RESULTS:
| 我 | 在上 | 。 |

#+begin_src python :results value :session local :exports both
"啊" * 10 + "哈" * 20
#+end_src

#+RESULTS:
: 啊啊啊啊啊啊啊啊啊啊哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈

*** 字符串与变量的联合操作
#+begin_src python :results value :session local :exports both
"{} 乘以 {} 等于 {}".format(3, 5, 3*5) # 把其它类型的值嵌入字符串
#+end_src

#+RESULTS:
: 3 乘以 5 等于 15

**** f-string 用来把变量值嵌入字符串
#+begin_src python :results value :session local :exports both
b=50
f"b 的取值是 {b}"
#+end_src

#+RESULTS:
: b 的取值是 50

*** None 值
- =None= 是一个特殊的值，代表空集、无、无法表达或者非法的结果

#+begin_src python :results value :session local :exports both
None
#+end_src

#+RESULTS:
: None

#+begin_src python :results value :session local :exports both
x = None # None 可以被赋值
1 is None, x is None # 可以被判断
#+end_src

#+RESULTS:
| False | True |

- 使用场景：判断某个结果是否是 =None= 有助于我们了解操作是否成功

#+begin_src python :results value :session local :exports both
bool(None) # None 也可以当作“假”被判断
#+end_src

#+RESULTS:
: False

** Python 的程序结构
*** 程序结构
- 顺序结构
- 选择结构
- 循环结构
    
* 第一周第三天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p2
  :EXPORT_LaTeX_CLASS_options: [aspectratio=169,handout]
  :EXPORT_BEAMER_HEADER: \title{实验物理的大数据方法}
  :EXPORT_OPTIONS: H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2023-07-12 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习
*** 课前准备
下载选课统计数据

#+begin_src bash
wget http://hep.tsinghua.edu.cn/~orv/teaching/physics-data/departments.csv
#+end_src

*** Python 入门
- 基本数据类型和基本运算
  + 整型、浮点型和字符串
- 基本程序结构
  + 顺序、选择和循环结构
- Python 的脚本
  #+begin_src python
    #!/usr/bin/env python3

    # Python 的语句
    # ...
    # ...
  #+end_src
*** 学习建议：认真阅读英语提示
- 人生第一次遇到英语不是“屠龙之技”的场景，值得庆贺！
- 下一个场景：阅读英语科技文献
- 再下一个场景：与国际同行讨论争吵

#+ATTR_LATEX: :environment verbatim
#+begin_example
"1" + 1

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate str (not "int") to str
#+end_example

#+ATTR_LATEX: :environment verbatim
#+begin_src
IMPORT　ＳＹＳ

  File "<stdin>", line 1
    IMPORT　ＳＹＳ
          ^
SyntaxError: invalid non-printable character U+3000
#+end_src

** 复合数据类型
*** 简介
     - Python 的基本类型，比如整型、浮点型、布尔型、字符串。
     - 它们可以复合起来，成为tuple（元组）、列表或字典。
       - 复合类型之间可以嵌套，变化丰富

** 列表 list
*** 简介
    - 把单元前后排成一列，单元为任意类型。

    #+NAME: 3c5d6d1e-2009-43fb-9685-a81b0643da1e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      [1,2,3], ["天","地","人"], ["物理",3.1415926]
    #+end_src  

    #+RESULTS: 3c5d6d1e-2009-43fb-9685-a81b0643da1e
    : ([1, 2, 3], ['天', '地', '人'], ['物理', 3.1415926])

    #+NAME: 64cbe8d7-dbb3-4728-a476-fd709defeab1
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      [], [[]], [[],[[]]], [[],[[],[[]]]] # 可以构造自然数
    #+end_src

    #+RESULTS: 64cbe8d7-dbb3-4728-a476-fd709defeab1
    : ([], [[]], [[], [[]]], [[], [[], [[]]]])

    #+NAME: a7d82c7e-e151-4522-95f3-81a1252e5929
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      xl = [1, 2, 3]
      xl[1]= 5
      print(xl)
    #+end_src

    #+RESULTS: a7d82c7e-e151-4522-95f3-81a1252e5929
    : [1, 5, 3]

*** 用于汇总
    - 生成空列表出发，逐步加入元素

    #+NAME: 5af34db6-b824-4800-a54b-b8806d481fce
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      li = []
      li.append("手机")
      li.append("钥匙")
      li.append("身份证")
      print(li)
      for i in li: # 作为迭代器
          print(f"出门之前，别忘了带{i}")
    #+end_src

    #+RESULTS: 5af34db6-b824-4800-a54b-b8806d481fce
    : ['手机', '钥匙', '身份证']
    : 出门之前，别忘了带手机
    : 出门之前，别忘了带钥匙
    : 出门之前，别忘了带身份证

*** 元素操作
**** 取出
     #+NAME: fc06d8e2-c4de-4c7b-89f1-c18cf31cfa7e
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
     li[0], li[1:3], li[-1]
     #+end_src

     #+RESULTS: fc06d8e2-c4de-4c7b-89f1-c18cf31cfa7e
     : ('手机', ['钥匙', '身份证'], '身份证')

**** 判断是否属于
     #+NAME: 1f9aa74d-8b41-4229-af89-759f9c6858b8
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       '手机' in li, "眼镜" in li
     #+end_src

     #+RESULTS: 1f9aa74d-8b41-4229-af89-759f9c6858b8
     : (True, False)

** 元组 tuple
*** 简介
    - 元组与列表类似，区别在于它不可修改
    #+NAME: c4e751ef-611f-4987-b72f-d258e785015e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
(1,2,3), ("天时","地利","人和"), (),(()), ((),(())), ((),((),(())))
    #+end_src

    #+RESULTS: c4e751ef-611f-4987-b72f-d258e785015e
    : ((1, 2, 3), ('天时', '地利', '人和'), (), (), ((), ()), ((), ((), ())))

    #+NAME: f0d7a7a7-c359-4051-bfa7-27c77cb59f58
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
xt=(1,2,3)
xt[1]=5
    #+end_src

    #+RESULTS: f0d7a7a7-c359-4051-bfa7-27c77cb59f58
    : ---------------------------------------------------------------------------
    : TypeError                                 Traceback (most recent call last)
    : Input In [11], in <module>
    :       1 xt=(1,2,3)
    : ----> 2 xt[1]=5
    : 
    : TypeError: 'tuple' object does not support item assignment
*** 无法像列表一样 =append= ，但可以重新生成
    #+NAME: 71666e65-3790-49cb-9f5b-ee1aa40a1ed4
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      tu = tuple(li); print(tu)
      tu += ("眼镜",); print(tu)  # 对比 list.append("眼镜")
    #+end_src

    #+RESULTS: 71666e65-3790-49cb-9f5b-ee1aa40a1ed4
    : ('手机', '钥匙', '身份证')
    : ('手机', '钥匙', '身份证', '眼镜')
    #+NAME: 5073bc17-6224-4d80-aba8-8331ce064cda
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      "眼镜" in tu, "帽子" in tu
    #+end_src

    #+RESULTS: 5073bc17-6224-4d80-aba8-8331ce064cda
    : (True, False)
** 字典 dict(ionary)
*** 简介
    - 字典是一个可以索引的数据结构
      #+begin_example
工物 => 42
物理 => 52
致理 => 4
未央 => 8
      #+end_example
    #+NAME: 22a1aa7c-2d91-48f6-9eca-881e1f512ba3
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      sc = {'工物': 42, '物理': 52}
      sc['工物'], sc['物理']
    #+end_src

    #+RESULTS: 22a1aa7c-2d91-48f6-9eca-881e1f512ba3
    : (42, 52)
*** 在字典中填加词条
    #+NAME: fc1414cd-de1c-40dd-a96a-a9c552cb5664
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
sc['致理'], sc['未央'] = 4, 8 # 元组赋值
print(sc["致理"], sc['未央'])
    #+end_src

    #+RESULTS: fc1414cd-de1c-40dd-a96a-a9c552cb5664
    : 4 8

**** 判断是否属于
     #+NAME: f56c70fa-83d5-456d-9f14-75dafbb38d66
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       print('数学' in sc, '工物' in sc)
     #+end_src

     #+RESULTS: f56c70fa-83d5-456d-9f14-75dafbb38d66
     : False True

*** 简化条件语句
    - 在需要多重判断时，使用字典会有奇效。
      #+NAME: 19b1fa10-2461-41df-a86a-2a3dd3c62986
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        OS = "macOS"
        package_manager = {
            "GNU/Linux": "请用 apt",
            "macOS": "请用 Gentoo，而后用 emerge",
            "Windows": "请安装WSL，而后用 apt"
        }

        print("大佬，", end="")
        if OS in package_manager:
            print(package_manager[OS])
        else:
            print("壮士，请您到主席台上来")
      #+end_src

      #+RESULTS: 19b1fa10-2461-41df-a86a-2a3dd3c62986
      : 大佬，请用 Gentoo，而后用 emerge
*** 迭代器基本操作
    - 从字典中取出词和值。 =list()= 把迭代器转成列表。
    #+NAME: d8684788-ccef-46ee-bac9-859658744152
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      list(sc.keys()), list(sc.values())
    #+end_src

    #+RESULTS: d8684788-ccef-46ee-bac9-859658744152
    : (['工物', '物理', '致理', '未央'], [42, 52, 4, 8])

    #+NAME: fdb8f0a1-277b-4e1a-b23c-5b024e4bea04
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      for k in sc:
          print(k)
      for v in sc.values():
          print(v)

    #+end_src

    #+RESULTS: fdb8f0a1-277b-4e1a-b23c-5b024e4bea04
    : 工物
    : 物理
    : 致理
    : 未央
    : 42
    : 52
    : 4
    : 8

*** 元组迭代器
    - =items()= 返回“词”和“值”组成的二元组。
      #+NAME: 353bba20-eef1-4e4b-848d-4aa346ba8674
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        for k,v in sc.items():
            print(f"教室里有{k}学生{v}人")
      #+end_src

      #+RESULTS: 353bba20-eef1-4e4b-848d-4aa346ba8674
      : 教室里有工物学生42人
      : 教室里有物理学生52人
      : 教室里有致理学生4人
      : 教室里有未央学生8人

*** 字典中的数据类型
    - 词 key 应当是“不可变” immutable 类型
      - 列表不能是字典的词
      - 元组可以是字典的词
      - 字典不能是字典的词
    #+NAME: f89e8205-a2cb-4a1f-b8a8-de20a7706a1a
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      坐标系 = {(0,0): "原点", (1,1): "第一象限", (-1,1): "第二象限"}
      print(坐标系[(0,0)])
    #+end_src

    #+RESULTS: f89e8205-a2cb-4a1f-b8a8-de20a7706a1a
    : 原点

    - 值 value 可以是任意类型

** 高级数据结构
*** defaultdict -- 带有默认值的字典
    #+NAME: 7947f42e-020b-4930-b5e0-5c9ee543209d
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      k = "数学"

      if k in sc:
          v=sc[k]
      else:
          v=0
      print(f"来自{k}的同学有{v}人")
    #+end_src

    #+RESULTS: 7947f42e-020b-4930-b5e0-5c9ee543209d
    : 来自数学的同学有0人

    #+NAME: 01f8c3ff-0c81-41a0-aab8-8d64a27564cd
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      from collections import defaultdict

      dsc = defaultdict(int)
      dsc["工物"] = 42; dsc["物理"] = 52
      print(dsc["工物"], dsc["数学"])

    #+end_src

    #+RESULTS: 01f8c3ff-0c81-41a0-aab8-8d64a27564cd
    : 42 0

*** 普通的字典不能强取
    #+NAME: 08b218b3-340b-423c-905b-4ba3870a2b96
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      sc["数学"]
    #+end_src

    #+RESULTS: 08b218b3-340b-423c-905b-4ba3870a2b96
    : ---------------------------------------------------------------------------
    : KeyError                                  Traceback (most recent call last)
    : Input In [39], in <module>
    : ----> 1 sc["数学"]
    : 
    : KeyError: '数学'

*** Counter -- 高效地计数
    #+NAME: be493df6-806e-48f3-9f50-3c6cea84955e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      deps = ["物理","物理","工物","工物","物理"]
      numbers = defaultdict(int)

      for d in deps:
          numbers[d]+=1
      print(numbers)
    #+end_src

    #+RESULTS: be493df6-806e-48f3-9f50-3c6cea84955e
    : defaultdict(<class 'int'>, {'物理': 3, '工物': 2})

    #+NAME: 9e783fda-3a7c-42f5-8115-045afceee56a
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      from collections import Counter

      cnumbers = Counter(deps)
      print(cnumbers)
    #+end_src

    #+RESULTS: 9e783fda-3a7c-42f5-8115-045afceee56a
    : Counter({'物理': 3, '工物': 2})

*** namedtuple -- 带有元素名字的 tuple
    #+NAME: 26d87e22-c2d2-4539-b862-e8dbc5f3d023
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      from collections import namedtuple

      Point = namedtuple("point", field_names=("x", "y"))
      p = Point(1,2)
      print(p)
    #+end_src

    #+RESULTS: 26d87e22-c2d2-4539-b862-e8dbc5f3d023
    : point(x=1, y=2)

    #+NAME: 06e2a48b-f9fc-4c5e-92e3-8380d903ca4b
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      print(p.x, p.y)
      print(p[0], p[1])
    #+end_src

    #+RESULTS: 06e2a48b-f9fc-4c5e-92e3-8380d903ca4b
    : 1 2
    : 1 2

** 命令行参数
*** 命令行参数从终端向 Python 内部传递信息
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
     import sys

     print(sys.argv)
   #+end_src

调用 =sys= 模块， =sys.argv= 是一个列表，内含程序调用的参数

   #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
$ python3 sys-demo.py 第一个参数 第二个参数
['sys-demo.py', '第一个参数', '第二个参数']
  ^sys.argv[0]  sys.argv[1]  sys.argv[2]
   #+end_src
** 函数
*** 简介
    - 函数是程序的基本组成部分。
    - 函数可以直观看作是多段代码组成的功能单元。
    - 函数的输入输出。
    - 函数方便代码复用，体现 _一次_ 原则。
    #+NAME: 09635af2-2a7d-468d-ac28-b952e24b7686
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      def add(x, y):
          print(f"x is {x} and y is {y}")
          return x + y  # Return values with a return statement
      add(3, 5)
    #+end_src

    #+RESULTS: 09635af2-2a7d-468d-ac28-b952e24b7686
    : x is 3 and y is 5
    : 8
*** 函数定义互换操作
    #+NAME: 6cb0a7ce-c0de-4810-987d-1132d7eae3d1
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      def swap(x, y):
          return y, x
      a = '左'
      b = '右'

      print(a,b)
      a, b = swap(a,b)
      print(a,b)
      a, b = b, a
      print(a,b)
    #+end_src

    #+RESULTS: 6cb0a7ce-c0de-4810-987d-1132d7eae3d1
    : 左 右
    : 右 左
    : 左 右
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      tmp = a; a = b; b = tmp # 对比
    #+end_src
*** 迭代器函数调用
    - 使用 `map` 可以把迭代器的映射到另一个迭代器

    #+NAME: a3213184-6430-485a-95bd-2fd8e219b6ee
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      def squared(x):
          return x*x

      list(map(squared, [1,2,3,4,5,6]))
    #+end_src

    #+RESULTS: a3213184-6430-485a-95bd-2fd8e219b6ee
    : [1, 4, 9, 16, 25, 36]
**** 无名函数
     函数名不重要时，可以使用无名函数
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       list(map(lambda x: x*x, range(6)))
     #+end_src
*** 名字空间 -- 函数自己的变量存储空间
    #+NAME: e6f86e51-a44a-4be8-ae13-66a644cf44e5
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      x = 1
      def scope():
          x = 2
      scope()
      print(x)
    #+end_src

    #+RESULTS: e6f86e51-a44a-4be8-ae13-66a644cf44e5
    : 1
**** 强行使用全局变量（不推荐！）
     #+NAME: 10ecee2c-7a07-4397-b9f7-d6f0ef3e4629
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       def gscope():
           global x; x = 2
       gscope()
       print(x)
     #+end_src

     #+RESULTS: 10ecee2c-7a07-4397-b9f7-d6f0ef3e4629
     : 2
*** 递归调用
    - 考虑循环
    #+NAME: c3e41892-7059-4d96-9f95-cbc74debb983
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      n=123
      while n>=1:
          print(n)
          n //= 2 # n = n // 2 的简写
    #+end_src      

    #+RESULTS: c3e41892-7059-4d96-9f95-cbc74debb983
    : 123
    : 61
    : 30
    : 15
    : 7
    : 3
    : 1

*** 递归调用（二）
    - 等价于下列的递归调用
    #+NAME: 7b917075-86a9-44fa-bf6b-c5a7ad0b5058
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      def div2(n):
          print(n)
          if n > 1:
              div2(n // 2)
      div2(123)
    #+end_src      

    #+RESULTS: 7b917075-86a9-44fa-bf6b-c5a7ad0b5058
    : 123
    : 61
    : 30
    : 15
    : 7
    : 3
    : 1

** 文档
*** 函数文档
    - 在函数定义后，紧跟一个字符串，可以定义函数的文档。
    - 用多行字符串很方便。
    #+NAME: 43cf7a90-4183-4bfb-afb7-e8039347ad94
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      def spherical_harmonic_fitter(grid, order):
          "求球谐函数拟合的系数"
    
          # 具体实现省略
          pass

      help(spherical_harmonic_fitter)
    #+end_src

    #+RESULTS: 43cf7a90-4183-4bfb-afb7-e8039347ad94
    : Help on function spherical_harmonic_fitter in module __main__:
    : 
    : spherical_harmonic_fitter(grid, order)
    :     求球谐函数拟合的系数
    : 
*** 多行文档
    #+NAME: a4814cf2-5122-4e29-8497-59b14d9b2cca
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      def spherical_harmonic_fitter(grid, order):
          '''
          求球谐函数拟合的系数
    
          输入
          ~~~
          grid: 球面上连续函数在固定格点上的取值
          order: 拟合时球谐函数近似截断的阶数
          '''
          pass
      help(spherical_harmonic_fitter)
    #+end_src

    #+RESULTS: a4814cf2-5122-4e29-8497-59b14d9b2cca
    #+begin_example
    Help on function spherical_harmonic_fitter in module __main__:

    spherical_harmonic_fitter(grid, order)
        求球谐函数拟合的系数

        输入
        ~~~
        grid: 球面上连续函数在固定格点上的取值
        order: 拟合时球谐函数近似截断的阶数

    #+end_example

*** 文档的普适性
    - 任何 Python 的标准函数都有文档，大家都应认真写文档
    #+NAME: a72f50bc-7adf-43a5-b7e4-0712bf48fc25
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      help(None)
    #+end_src  

    #+RESULTS: a72f50bc-7adf-43a5-b7e4-0712bf48fc25
    #+begin_example
    Help on NoneType object:

    class NoneType(object)
     |  Methods defined here:
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.

    #+end_example
** 调试
*** 程序调试
    - 透明原则：程序运行的中间结果应当被人类理解
    - 调试方法：
      - =print()=
      - REPL 试验
      - pdb, Python Debugger
        - =breakpoint()=
        - bt 给出函数调用关系
        - next 执行下一步
        - where 给出当前位置
        - list 列出附近的程序
        - help
** 测试
*** 程序的正确性保证
- 如果保证修改程序不引入新的问题？
  - 修改越多，引入新问题的概率越大吗？
- 使用 Git 会有什么帮助吗？
  - 除了 Git 还需要什么？
- 实验室为何会有谁都不敢动的“祖传代码”出现？
*** 编写测试数据
- 根据需求，用已知的输入输出检验程序是否正确
  - 单元测试：对函数进行测试
  - 集成测试：对各部分总体进行测试
- 测试程序与功能程序可以交替进行：

  #+begin_example
,-------       ,-------
| 测试         | 测试
`-------       `-------
       ,-------       ,-------
       | 功能         | 功能
       `-------       `-------
  #+end_example
*** 作业中的评分器是测试
- 评分器定义了功能，即程序期待得出的结果
  - 自动测试是目前为止，软件工程中最有效的保证程序可靠性的做法
  - 不仅保证程序逻辑正确，还要保证输入输出符合约定
- 可以在本地手动运行
- 也可以在线自动触发：课程使用的是 gitlab runner
  - 实现了持续集成（Continuous Integration）
  - 一旦哪个 commit 有了问题可以迅速通知：谁在什么时候弄坏了什么功能
*** 实验的数据处理
  - 上游程序的输出是下游程序的输入
  - 程序仅仅被人类理解是不够的
  - 如果不符合格式约定，后一个程序或者会崩溃，或者误读数据造成不易察觉的错误
  - 一旦科学结果被发表，纠正错误将牵扯诸多非科学因素
**** 测试框架可以促进协作
- 上游程序使用测试器模拟下游的读入
- 下游程序使用测试器模拟上游的输出

- 请主动设计测试输入样例，与同学分享刁钻的测试输入

** 代码风格
*** 原则：人类阅读友好
There should be one-- and preferably only one --obvious way to do it.

- 写程序，也只有一种推荐的风格
- 由 PEP-8 定义
  - PEP := Python enhancement proposal
  - https://www.python.org/dev/peps/pep-0008/
  - This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.
- Python 哲学：Readability counts.
*** 缩进
- 建议 4 个空格
- 避免一行过长，一切行必须在 80 字符以内
  - 人类读过长的行时，眼球不停转动，肌肉易疲劳
  - 限制行宽，方便把代码并列对比

#+begin_src python
# Aligned with opening delimiter.
foo = long_function_name(var_one, var_two,
                         var_three, var_four)

# 如果与开括号对齐导致空白过多，也可只加4个空格的缩进量。
def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)
#+end_src

*** 多参数写法
    #+begin_src python
my_list = [
    1, 2, 3,
    4, 5, 6,
    ]
result = some_function_that_takes_arguments(
    'a', 'b', 'c',
    'd', 'e', 'f',
    )
    #+end_src

*** 空格
    - 恰当使用空格。过多或过少使用空格，都会使代码的可读性降低。
    - 开括号之后和闭括号之前，不留空格。
    - ",)"之间不留空格

      #+begin_src python :exports both
        spam(ham[1], {eggs: 2})

        foo = (0,)
      #+end_src

   - 逗号之前不留空格，之后最好由一个空格
     #+begin_src python :exports both
       a, b = b, a
     #+end_src

*** 空格：数学表达式
    - 等号左右留空格
    - 加号类左右留空格数应相等

      #+begin_src python :exports both
i = i + 1
submitted += 1
x = x*2 - 1
hypot2 = x*x + y*y
c = (a+b) * (a-b)
      #+end_src
    - 但是，函数调用中的等号不留空格
      #+begin_src python :exports both
magic(r=real, i=imag)
      #+end_src
*** 辅助工具
    - pylint3
    #+begin_src bash :exports both
      apt install pylint3
    #+end_src
    - 编辑器的自动重排功能
      - 学习一款编辑器非常重要：Emacs、Vi、Visual Studio Code
**** 参考资料
     - [[https://www.python.org/dev/peps/pep-0008/][PEP-8]]
     - [[https://physics-data.meow.plus/faq/rules/whitebox/#_2][FAQ 的相应说明]]
** 小助教与互助限度
*** 小助教分组
    :PROPERTIES:
    :ORDERED:  t
    :END:
    - 7 名同学自荐成为小助教（谢谢大家！），经过教学团队审核通过，将学
      生分组公布于网络学堂“课程文件”栏。
     
*** 小助教的职责范围
    - 将本组同学的共性问题及时反馈给助教和老师，帮助老师根据实际情况调
      整教学方案。
    - 帮助同学掌握课程内容，协助助教和老师答疑。
    #+latex: \pause
**** 什么程度的帮助与借鉴可以促进学习
     1. AB 讨论解决问题的思路；
     2. AB 讨论关键的技巧，A 给出参考资料，引导 B 自学；
     3. A 将自己的程序逐句用人类语言描述给 B，B 按照自己的理解写了一份逻辑一模一样的程序；
     4. A 将自己的源码交给 B，B 在理解了原理之后丢掉了 A 的程序，自己凭记忆和理解重写了一份；
     5. A 将自己的源码交给 B，B 在读懂之后进行了简单的变量名和函数定义替换；
     6. A 将自己的源码交给 B，B 把程序原样提交。
*** 抄袭零容忍
    - +抄袭+ 过度借鉴代码

    - 作业的意义

      1. 学生验证自己是否掌握课程内容
      2. 为课程分数提供客观教学评价依据

    - 课程分数的意义
     
      1. 反馈学生对课程的掌握程度
      2. 未来的导师参考
**** 本课程对抄袭的处理规则
     1. 抄袭者与被抄袭者同样按抄袭处理，视情节严重程度
        - 警告，该次作业记0分；
        - 严重警告，该次作业记0分，倒扣 100%-200% 本次作业分数；
        - 总评记 F，报教务部门。
*** 案例
    - A 同学帮助 B 同学，面临交作业截止，B 同学还是没法及时完成；
    - A 同学把代码给 B 同学参考；
    - 虽然 B 向 A 承诺只是“参考”，但由于时间紧迫 B 把代码稍加修改，提交上去；
    - 因为代码雷同，两位同学都疑似抄袭。

    \pause

**** B
     - 作业即使迟交，也不要复制其他同学的代码。
     - 迟交作业不会在网络学堂上得分，但可以作为总评时的参考。
     - 消化理解课堂样例代码、助教参考代码，形成自己的方法。
     - 如果感到吃力，应当在课后投入更多精力尽更大的努力地练习。

     \pause

**** A
     - 请继续帮助同学，注意授人以渔；
     - 请保持对同学的信任。

*** 参考资料
    学术诚信规则、更多案例与具体解读，详见：

https://physics-data.meow.plus/faq/plagiarism/

* 第一周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p3
  :EXPORT_LaTeX_CLASS_options: [aspectratio=169]
  :EXPORT_BEAMER_HEADER: \title{对象与模块}
  :EXPORT_OPTIONS: H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2023-07-13 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习
*** 复合数据结构
    - 列表、元组、字典
    - =defaultdict= 、 =Counter= 、 =namedtuple=
    - 迭代器可以逐个访问它所包含的值的。 Python 的复合数据结构都可以看成迭代器。
**** 函数
     - 定义，名字空间
     - 局部变量，全局变量（不推荐！用类的变量替代）
** 文件读写
*** 大批量输入输出
    - =input()= =print()= 适合少量的信息传递
    - 大批量的读写宜直接操作文件
*** 准备样例文件
    #+NAME: abd137f2-b1aa-4cce-bc60-f497b9dad931
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install wget
      wget 'http://hep.tsinghua.edu.cn/~orv/pd/iterator.txt'
    #+end_src

    #+RESULTS: abd137f2-b1aa-4cce-bc60-f497b9dad931
    #+begin_example
    --2022-07-14 11:34:39--  http://hep.tsinghua.edu.cn/~orv/pd/iterator.txt
    Resolving hep.tsinghua.edu.cn... 101.6.6.219, 2402:f000:1:416:101:6:6:219
    Connecting to hep.tsinghua.edu.cn|101.6.6.219|:80... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 268 [text/plain]
    Saving to: ‘iterator.txt’

    
iterator.txt          0%[                    ]       0  --.-KB/s               
iterator.txt        100%[===================>]     268  --.-KB/s    in 0s      

    2022-07-14 11:34:39 (39.2 MB/s) - ‘iterator.txt’ saved [268/268]

    #+end_example
*** 文本文件读
    - 文件是迭代器，逐行。每行是字符串。
    #+NAME: 236d063d-85b1-4e3c-b8f4-c30455581035
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      with open("iterator.txt") as f_input:
          for l in f_input:
              print(l, end="")
    #+end_src

    #+RESULTS: 236d063d-85b1-4e3c-b8f4-c30455581035
    : Iterator Types
    : 
    : Python supports a concept of iteration over containers. This is
    : implemented using two distinct methods; these are used to allow
    : user-defined classes to support iteration. Sequences, described below
    : in more detail, always support the iteration methods.
    - =with= 用来帮助在文件用完后及时关闭，防止占用和争夺资源。

*** 文本文件写
    #+NAME: 5b4d4307-732a-45bb-953b-b32ed48ce797
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      with open("log.txt", "w") as f:
          f.write("第一天 概论\n")
          f.write("第二天 Python 入门\n")
    #+end_src

    #+NAME: 1ed3df42-b045-47b8-a1c1-51f1ade8acad
    #+RESULTS: 5b4d4307-732a-45bb-953b-b32ed48ce797
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      cat log.txt
    #+end_src

    #+RESULTS: 1ed3df42-b045-47b8-a1c1-51f1ade8acad
    : 第一天 概论
    : 第二天 Python 入门

*** 字符处理
    - Python 内建了丰富的字符处理函数
    #+NAME: 974e3fbb-e800-4012-8dbe-6e576b97ab8e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      s = "今天的气温是 30 摄氏度，明天是 29 摄氏度"
      print(s.count("度"))
      print(s.startswith("今天"))
      print(s.split("，"))
    #+end_src

    #+RESULTS: 974e3fbb-e800-4012-8dbe-6e576b97ab8e
    : 2
    : True
    : ['今天的气温是 30 摄氏度', '明天是 29 摄氏度']
*** 字符处理（二）
    - 娱乐[[https://ljl.li/oreooo/][奥利奥生成器]]
    #+NAME: 6dc92ea5-378a-4995-9192-20258ae1552b
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      seed = bin(2324)
      print(seed)
      print(seed[2:].replace('0',"奥").replace('1',"利"))
    #+end_src

    #+RESULTS: 6dc92ea5-378a-4995-9192-20258ae1552b
    : 0b100100010100
    : 利奥奥利奥奥奥利奥利奥奥

**** 参考资料
     - =help(str)=
     - https://docs.python.org/3.9/library/stdtypes.html#textseq
** 类与对象
*** 为什么
    - Python 的内部实现
      - 一切都是对象
        #+NAME: 116424b7-1f00-4ec7-b48b-1980730c17a0
        #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
          help(1)
        #+end_src  
        给出一的是 =help(int)= ，整数是一个类。
      - 对象的要素：封装、继承、多态
      - 迭代器：定义了 =__iter__()= 方法的类。
      - 运算：
        - + :: =__add__=
        - - :: =__sub__=
    - 替代全局变量
*** 极简例子
    #+NAME: 70d56ba5-8079-49fe-9bbf-6df5284aca11
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      class status(object): # 继承自 "object"
          '''
          状态记录器
          '''
          def __init__(self, move=0, blank=(1,2,3)):
              self.move = move
              self.blank = blank
      s = status(1)
      print(s.move)
      s.move = 3 # 一切成员都是 public
      print(s.move)
    #+end_src

    #+RESULTS: 70d56ba5-8079-49fe-9bbf-6df5284aca11
    : 1
    : 3
    - 将 =s= 传递给函数，避免使用全局变量

** 模块
*** 简介
    - 函数用来代码复用（ _一次_ 原则）
    - 模块：相关的函数和类集合起来，整理到名字空间 namespace 中
      - 模块可以用 Python 实现，也可以由 C 等编译语言实现
**** 模块导入用 =import=
     #+NAME: 24c0e631-80a6-4946-a50a-3b91e6a65b71
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       import math
       help(math.factorial)
     #+end_src

     #+RESULTS: 24c0e631-80a6-4946-a50a-3b91e6a65b71
     : Help on built-in function factorial in module math:
     : 
     : factorial(x, /)
     :     Find x!.
     :     
     :     Raise a ValueError if x is negative or non-integral.
     : 
*** 模块别名
    - 加载模块时，可自定义名称。对长模块名有用
    #+NAME: b711a2a6-fb87-41a0-8c26-565fd786171f
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import math as m
      m.factorial(10)
    #+end_src

    #+RESULTS: b711a2a6-fb87-41a0-8c26-565fd786171f
    : 3628800
*** 多层名字加载
    1. 直接使用多层名字空间
    2. 使用 =from=
       #+NAME: 09a4b42a-a665-48b4-afe4-eb2b0f019845
       #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
         import os
         help(os.path.abspath)
       #+end_src

       #+RESULTS: 09a4b42a-a665-48b4-afe4-eb2b0f019845
       : Help on function abspath in module posixpath:
       : 
       : abspath(path)
       :     Return an absolute path.
       : 
       #+NAME: 723d7d16-317d-477d-8707-29d769f8b330
       #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
         from os.path import abspath
         from os.path import abspath as absp
         abspath is os.path.abspath, abspath is absp
       #+end_src

       #+RESULTS: 723d7d16-317d-477d-8707-29d769f8b330
       : (True, True)
*** 自定义模块
    - Python 可以方便地定义模块以进行代码复用
    - 每个 Python 脚本都可以当作模块使用
      #+NAME: 794821bd-91d4-4a09-b4af-28b391f497dc
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        cat physics_data/script.py
      #+end_src

      #+RESULTS: 794821bd-91d4-4a09-b4af-28b391f497dc
      #+begin_example
      def spherical_harmonic_fitter(grid, order):
          '''
          求球谐函数拟合的系数
          
          输入
          ~~~
          grid: 球面上连续函数在固定格点上的取值
          order: 拟合时球谐函数近似截断的阶数
          
          输出
          ~~~
          拟合系数矩阵
          '''
          
          # 具体实现省略
          pass
      
      #+end_example

*** 自定义模块（二）
    #+NAME: c6aadbd3-009e-4b67-9e72-a70ee9d8879e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      from physics_data import script
      help(script.spherical_harmonic_fitter)
    #+end_src

    #+RESULTS: c6aadbd3-009e-4b67-9e72-a70ee9d8879e
    #+begin_example
    Help on function spherical_harmonic_fitter in module physics_data.script:

    spherical_harmonic_fitter(grid, order)
        求球谐函数拟合的系数

        输入
        ~~~
        grid: 球面上连续函数在固定格点上的取值
        order: 拟合时球谐函数近似截断的阶数

        输出
        ~~~
        拟合系数矩阵

    #+end_example
** Python 标准库模块
*** fractions 有理数才是良定义的
    https://docs.python.org/3/library/fractions.html
    
    #+NAME: 33ba1780-6c70-49f0-8c26-05e906941cc0
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      from fractions import Fraction
      Fraction(16, -10)
    #+end_src

    #+RESULTS: 33ba1780-6c70-49f0-8c26-05e906941cc0
    : Fraction(-8, 5)
      
*** decimal 计算机对人类的妥协
    https://docs.python.org/3/library/decimal.html
    
    #+NAME: a65a7dfd-f957-488b-bff0-10e9a5cf2bbd
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      from decimal import *
      print(Decimal(1) / Decimal(7))
      print(1/7)
    #+end_src

    #+RESULTS: a65a7dfd-f957-488b-bff0-10e9a5cf2bbd
    : 0.1428571428571428571428571429
    : 0.14285714285714285
*** itertools 高级迭代器变换
    https://docs.python.org/3/library/itertools.html
    - 丰富多样的迭代器操作，巧妙运用则功能强大。

    #+NAME: 62a4f13b-8d0a-46a2-9ea4-69222d934f91
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb
      import itertools as it

      data = [3, 4, 6, 2, 1, 9, 0, 7, 5, 8]
      list(it.accumulate(data, max))
    #+end_src

    #+RESULTS: 62a4f13b-8d0a-46a2-9ea4-69222d934f91
    : [3, 4, 6, 6, 6, 9, 9, 9, 9, 9]

    #+NAME: 0113c6ed-c7d0-43c4-8a86-62d1bab10999
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      list(it.permutations(range(1, 4)))
    #+end_src

    #+RESULTS: 0113c6ed-c7d0-43c4-8a86-62d1bab10999
    : [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]
*** itertools 取笛卡尔积
      #+NAME: 09d14370-80d9-4eb6-9d60-ba4f265a9685
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        list(it.product('ABCD', repeat=2))
      #+end_src

      #+RESULTS: 09d14370-80d9-4eb6-9d60-ba4f265a9685
      #+begin_example
      [('A', 'A'),
       ('A', 'B'),
       ('A', 'C'),
       ('A', 'D'),
       ('B', 'A'),
       ('B', 'B'),
       ('B', 'C'),
       ('B', 'D'),
       ('C', 'A'),
       ('C', 'B'),
       ('C', 'C'),
       ('C', 'D'),
       ('D', 'A'),
       ('D', 'B'),
       ('D', 'C'),
       ('D', 'D')]
      #+end_example
*** itertools 取可重组合

    #+NAME: 893d7c0f-8a26-4113-9e54-557585efb35e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      tuple(it.combinations_with_replacement('ABCD', 2))
    #+end_src

    #+RESULTS: 893d7c0f-8a26-4113-9e54-557585efb35e
    #+begin_example
    (('A', 'A'),
     ('A', 'B'),
     ('A', 'C'),
     ('A', 'D'),
     ('B', 'B'),
     ('B', 'C'),
     ('B', 'D'),
     ('C', 'C'),
     ('C', 'D'),
     ('D', 'D'))
    #+end_example
*** itertools 使用 =zip= 合并两个迭代器
    #+NAME: 844ede83-04e6-462d-91b8-3601415ee269
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      for i, s in zip(range(11), it.accumulate(range(11))):
          print(f"从0加到 {i} 的和是 {s}")
    #+end_src

    #+RESULTS: 844ede83-04e6-462d-91b8-3601415ee269
    #+begin_example
    从0加到 0 的和是 0
    从0加到 1 的和是 1
    从0加到 2 的和是 3
    从0加到 3 的和是 6
    从0加到 4 的和是 10
    从0加到 5 的和是 15
    从0加到 6 的和是 21
    从0加到 7 的和是 28
    从0加到 8 的和是 36
    从0加到 9 的和是 45
    从0加到 10 的和是 55
    #+end_example
*** itertools 过滤器
    #+NAME: 522450fe-3f29-46d5-a5c6-083a3a7c265d
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      list(it.filterfalse(lambda n: n % 13, range(100)))
    #+end_src

    #+RESULTS: 522450fe-3f29-46d5-a5c6-083a3a7c265d
    : [0, 13, 26, 39, 52, 65, 78, 91]
    
*** argparse 命令行传递参数
    https://docs.python.org/3/library/argparse.html
    - 构造高级的命令选项
      - 数据类型
      - 格式限制
*** turtle 海龟作图程序框架
    - 思想：控制海龟在画布上爬行，留下路径痕迹作图
    - 准备：安装 TK 图形模块 =apt install python3-tk=
    #+NAME: 343f4c09-709c-4081-a987-0ee4cee2f390
    #+begin_src python :results output :exports both
      from turtle import *
      color('red', 'yellow')
      begin_fill()
      while True:
          forward(200)
          left(170)
          if abs(pos()) < 1:
              break
      end_fill()
      done()
    #+end_src

    #+RESULTS: 343f4c09-709c-4081-a987-0ee4cee2f390

    - 用途：娱乐、小学生学习编程
    - 用途：粒子轨迹（？！）、路径积分（！！）

*** turtle 留下路径痕迹作图
    - 微观世界也是如此 \(c\bar{c} J/\psi \)
      [[./fig/jpsi.png]]
*** turtle 留下路径痕迹作图
    - \(K\) 介子的发现，带电粒子有轨迹，中性粒子没有
    #+attr_latex: :height 0.5\textheight
    [[./fig/Kaon-discovery.pdf]]

    云室照片； \(a,b\) 两根线来自 \(K\) 介子衰变。 (Rochester and Butler)

** 寻找工具
*** 更多 Python 扩展库
   - 优先 =apt install python3-xxxxxx=
   - 混合 apt 与 pip 要极其小心，尽量不引入 pip
     - 提 issue 求助
* 2020年 第一周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p3_2020
  :EXPORT_BEAMER_HEADER: \title{Git 进阶}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-20 清华线上
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 自定义大作业
   - 如果有同学希望采用其它学科方向的大作业，请提出申请给续本达 =<orv@tsinghua.edu.cn>= ，8月24日 12:00 截止。
     1. 问题描述和学科背景
     2. 数据的输入和输出的定义与格式
     3. 数据分析结果的评价标准

   - 请准备自定义大作业的同学，在 8 月 21 日星期五 21:00 之前，告知续本达
     =<orv@tsinghua.edu.cn>= 。

     1. 准备定制什么样的大作业
     2. 当前遇到了什么困难

** Git 三种状态
   - 已提交（committed） :: 改动安全保存在数据库中
   - 已修改（modified） :: 自上一次提交，有文件被修改
   - 已暂存（staged） :: 已修改的文件被作了标记，将被包含在下一轮提交中

      [[./fig/git-modes.png]]
** Git 仓库间通信
   #+Attr_LaTeX: :height 0.7\textheight
   [[./fig/git-distributed.png]]

   - 建议：通过 SSH (secure shell) 通信。
** Git 基本命令
   - diff :: 查看改动
   - status :: 查看状态
   - add :: 添加文件
   - commit :: 提交
   - log :: 查看历史
   - pull :: 从远程下载
   - push :: 推送到远程
   - merge :: 合并分支
   - config :: 配置 Git

*** 内建手册 =man=                                           :B_exampleblock:
    :PROPERTIES:
    :BEAMER_env: exampleblock
    :END:

    命令的具体含义可以参考 =man= 命令，例如，

    #+BEGIN_EXAMPLE
$ man git add
    #+END_EXAMPLE

** 常见问题
   - 如何改 Github 界面，VSCode 上显示的 Git 状态？

     - Git 最有效的界面在命令行。可视化界面都有问题，至多可作为参考。

     - 以 =git log= 查看已有 commit 为准。

     - 大家可以探索其它方法，但是课程教学和一切评估规则都以命令行 Git 为准。

   - 没有设置好作者的姓名和邮箱
      
     #+BEGIN_SRC bash
       git config --global user.name "Benda Xu"
       git config --global user.email "orv@tsinghua.edu.cn"
     #+END_SRC

     这一设置改变整个用户的 Git 状态，会影响所有此后的 commit。

** 作业 Git 规则
   #+attr_beamer: :overlay <+->
   - 可以修改 =git push= 之后的 commit 吗？
     
     - 不可以。
     - 可以加一个新的 commit，说明前一个 commit 哪里错了，是如何修改的。

   - 还没有 =git push= 的 commit 可以修改吗？

     - 可以。
     - 如果只修改 commit message

       =git commit --amend=

     - 作者信息也要改

       =git commit --amend --reset-author=

     - 需要修改 commit 本身

       使用 =git rebase -i=

** git-rebase
   - @@latex: {\huge 勿对已 push 的 commit 做任何修改！}@@
   - 以下操作仅限于尚未 push 还在本地的 commit。
   - ...
* 第二周第一天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p4
  :EXPORT_BEAMER_HEADER: \title{数组}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-07-18
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** Python 科学计算
*** NumPy: Numeric Python
    - NumPy 起源于使用 Python 语言调用 fortran 进行线性代数运算的需求。
    - 已经发展成为 Python 科学计算的基石
    - 参考书：[[http://scipy-lectures.org/][Scipy Lecture Notes]]
**** 安装 NumPy 和相关工具
     #+begin_src bash :exports both
       apt install python3-numpy python3-scipy python3-h5py
     #+end_src

*** SciPy: Scientific Python
    - NumPy 定义高效的数据结构
    - SciPy 在 NumPy 的基础上提供的数值计算算法
      #+beamer: {\scriptsize
      - scipy.cluster :: Vector quantization / Kmeans
      - scipy.constants :: Physical and mathematical constants
      - scipy.fftpack :: Fourier transform
      - scipy.integrate :: Integration routines
      - scipy.interpolate :: Interpolation
      - scipy.io :: Data input and output
      - scipy.linalg :: Linear algebra routines
      - scipy.ndimage :: n-dimensional image package
      - scipy.odr :: Orthogonal distance regression
      - scipy.optimize :: Optimization
      - scipy.signal :: Signal processing
      - scipy.sparse :: Sparse matrices
      - scipy.spatial :: Spatial data structures and algorithms
      - scipy.special :: Any special mathematical functions
      - scipy.stats :: Statistics
      #+beamer: }
** NumPy 数组
*** 创建和索引数组
    #+NAME: 876695f5-63ca-4f31-b2cd-e2b2d2d5ecef
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import numpy as np

      nv = np.array([1,2,3,4,3,2,1])
      print(nv, nv[2], nv[5:])
      print(nv[-1], nv[::2])
    #+end_src

    #+RESULTS: 876695f5-63ca-4f31-b2cd-e2b2d2d5ecef
    : [1 2 3 4 3 2 1] 3 [2 1]
    : 1 [1 3 3 1]

**** 数组语法与列表相似，可能相互转换，区别在于：
      - 数组要求元素的数据类型被预设且一致，列表 (List) 无此要求
      - 数组的存储是一段连续的内存空间，列表不是
      - 以上两点使得在数值计算中，数组的效率比列表高很多

*** 二维数组用来表示矩阵
    #+NAME: 56020a88-3470-4d85-a0c8-3e4735bdd30a
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      ma = np.array([[1,0], [0,1]])
      print(ma)
    #+end_src

    #+RESULTS: 56020a88-3470-4d85-a0c8-3e4735bdd30a
    : [[1 0]
    :  [0 1]]

    #+NAME: 97484cfa-c3e7-4e80-8285-643c862b0ca9
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      type(ma), ma.shape
    #+end_src

    #+RESULTS: 97484cfa-c3e7-4e80-8285-643c862b0ca9
    : (numpy.ndarray, (2, 2))
*** 常数数组的创建
    #+NAME: 8b112df2-44f9-43f8-8a1a-780ae69d671c
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      print(np.ones((3, 3)))
      print(np.zeros((4, 4)))
    #+end_src

    #+RESULTS: 8b112df2-44f9-43f8-8a1a-780ae69d671c
    : [[1. 1. 1.]
    :  [1. 1. 1.]
    :  [1. 1. 1.]]
    : [[0. 0. 0. 0.]
    :  [0. 0. 0. 0.]
    :  [0. 0. 0. 0.]
    :  [0. 0. 0. 0.]]
**** 随机矩阵的创建
     #+NAME: 2859355f-fd4f-485b-bd79-0ce145be1e01
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       print(np.random.rand(2,5))
     #+end_src

     #+RESULTS: 2859355f-fd4f-485b-bd79-0ce145be1e01
     : [[0.80632296 0.53845746 0.00714721 0.84843748 0.32654466]
     :  [0.56930226 0.35817586 0.45108818 0.14484227 0.65463473]]

*** 创建单位矩阵
    - =np.eye= 读与大写字母 =I= 相同的读法
      #+NAME: e02dc52a-fcaa-44cb-b1da-aeb50e13fa79
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        e = np.eye(4)
        print(e)
      #+end_src

      #+RESULTS: e02dc52a-fcaa-44cb-b1da-aeb50e13fa79
      : [[1. 0. 0. 0.]
      :  [0. 1. 0. 0.]
      :  [0. 0. 1. 0.]
      :  [0. 0. 0. 1.]]
*** 对角元
    - 取矩阵对角元
    #+NAME: c0223859-0d85-4e6c-9147-63e4411aa306
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
print(np.diag(e))
    #+end_src

    #+RESULTS: c0223859-0d85-4e6c-9147-63e4411aa306
    : [1. 1. 1. 1.]

    - 由对角元生成对角矩阵
    #+NAME: f3f3aabc-e223-4d28-984f-232bc11f2ab5
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
print(np.diag(np.arange(5)))
    #+end_src

    #+RESULTS: f3f3aabc-e223-4d28-984f-232bc11f2ab5
    : [[0 0 0 0 0]
    :  [0 1 0 0 0]
    :  [0 0 2 0 0]
    :  [0 0 0 3 0]
    :  [0 0 0 0 4]]
*** 叠放
    #+NAME: b60be528-b75f-4927-8a86-10409123241f
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      np.tile(e,2)
    #+end_src

    #+RESULTS: b60be528-b75f-4927-8a86-10409123241f
    : array([[1., 0., 0., 0., 1., 0., 0., 0.],
    :        [0., 1., 0., 0., 0., 1., 0., 0.],
    :        [0., 0., 1., 0., 0., 0., 1., 0.],
    :        [0., 0., 0., 1., 0., 0., 0., 1.]])
** 多维索引
*** 数组的形状
   - 创建一个 \( 10 \times 10 \) 的数组
   #+NAME: 84efbc47-8ca1-465c-bb08-8562e9b80365
   #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
     m = np.arange(100, dtype=int)
     print(m)
     m.shape = (10, 10)
     print(m)
   #+end_src

   #+RESULTS: 84efbc47-8ca1-465c-bb08-8562e9b80365
   #+begin_example
   [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
    48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
    72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
    96 97 98 99]
   [[ 0  1  2  3  4  5  6  7  8  9]
    [10 11 12 13 14 15 16 17 18 19]
    [20 21 22 23 24 25 26 27 28 29]
    [30 31 32 33 34 35 36 37 38 39]
    [40 41 42 43 44 45 46 47 48 49]
    [50 51 52 53 54 55 56 57 58 59]
    [60 61 62 63 64 65 66 67 68 69]
    [70 71 72 73 74 75 76 77 78 79]
    [80 81 82 83 84 85 86 87 88 89]
    [90 91 92 93 94 95 96 97 98 99]]
   #+end_example

   - 修改 =shape= 可以把一维数组解释成二维的
*** 二维索引
    #+NAME: 0580a4b8-ba8e-436b-b374-ea89a644d66f
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      m6 = m[:6, :6]
      m6[:, 2]
    #+end_src

    #+RESULTS: 0580a4b8-ba8e-436b-b374-ea89a644d66f
    : array([ 2, 12, 22, 32, 42, 52])
    #+Attr_LaTeX: :height 0.4\textheight
    [[./fig/array-index.png]]
*** 二维任意索引
    - 分别传两个相等形状的索引数组，按索引数组状状排列对应的输出
    #+NAME: 36a17f43-aa4c-40cc-83e9-ba4e5d5b05d9
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      print(m6)
      print(m6[[1, 2, 3], [3, 4, 5]])
      print(m6[[[1], [2]], [[3], [4]]])
    #+end_src

    #+RESULTS: 36a17f43-aa4c-40cc-83e9-ba4e5d5b05d9
    : [[ 0  1  2  3  4  5]
    :  [10 11 12 13 14 15]
    :  [20 21 22 23 24 25]
    :  [30 31 32 33 34 35]
    :  [40 41 42 43 44 45]
    :  [50 51 52 53 54 55]]
    : [13 24 35]
    : [[13]
    :  [24]]
** 数组运算
*** 整体运算
    - 一般的运算符都可以在数组上使用
    - 可以省去循环，使用程序比 =map= 和列表生成更简明易懂
    #+NAME: 516153c7-3d16-493e-9584-e31cee4d2fc3
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      n = np.arange(10)
      print(n**2)
      print([v**2 for v in n]) # 对比
    #+end_src

    #+RESULTS: 516153c7-3d16-493e-9584-e31cee4d2fc3
    : [ 0  1  4  9 16 25 36 49 64 81]
    : [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

**** 索引与运算结合
     #+NAME: 5dc0094b-ecaa-4a8b-8297-a1c8972650b6
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       nr = n[::-1]
       print(nr + n)
       print(n[::2] + 100)
     #+end_src

     #+RESULTS: 5dc0094b-ecaa-4a8b-8297-a1c8972650b6
     : [9 9 9 9 9 9 9 9 9 9]
     : [100 102 104 106 108]

*** 数组的总体特征
    - 求和、平均、中位数、方差、标准差
      #+NAME: b2956027-a17e-4734-8b26-fd82e1c36931
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        np.sum(n), np.mean(n), np.median(n), np.var(n), np.std(n)
      #+end_src

      #+RESULTS: b2956027-a17e-4734-8b26-fd82e1c36931
      : (45, 4.5, 4.5, 8.25, 2.8722813232690143)

    - 选择性地对二维数组的某个维度求值，省去两重循环。
      #+NAME: 727f4666-8370-4aaa-a1af-cd1c5c79fe6a
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        np.sum(m, axis=0), np.median(m, axis=1)
      #+end_src

      #+RESULTS: 727f4666-8370-4aaa-a1af-cd1c5c79fe6a
      : (array([450, 460, 470, 480, 490, 500, 510, 520, 530, 540]),
      :  array([ 4.5, 14.5, 24.5, 34.5, 44.5, 54.5, 64.5, 74.5, 84.5, 94.5]))

*** 数组的扩展
    - 把一维数组扩展成二维，补齐形状
      #+NAME: 58ee37d5-027e-4a31-bd94-b2f4f77082ea
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        n[None, :] + n[:, None]
      #+end_src

      #+RESULTS: 58ee37d5-027e-4a31-bd94-b2f4f77082ea
      #+begin_example
      array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
             [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
             [ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11],
             [ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12],
             [ 4,  5,  6,  7,  8,  9, 10, 11, 12, 13],
             [ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14],
             [ 6,  7,  8,  9, 10, 11, 12, 13, 14, 15],
             [ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16],
             [ 8,  9, 10, 11, 12, 13, 14, 15, 16, 17],
             [ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]])
      #+end_example

    - 代替二重循环
      #+NAME: 5f429c3a-9717-452e-963b-3fac426f272f
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        np.array([x + y for x in n for y in n]).reshape(10, 10)
      #+end_src
** 矩阵运算
*** Pauli 矩阵
    - 构造三个 Pauli 矩阵
    #+NAME: cea0bdbe-0e4f-45fb-98a3-21f5d0c0142f
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      pauli = []
      pauli.append(np.array([0,1,1,0]).reshape(2,2))
      pauli.append(np.array([0,-1j,1j,0]).reshape(2,2))
      pauli.append(np.array([1,0,0,-1]).reshape(2,2))
      for m in pauli:
          print(m)
    #+end_src

    #+RESULTS: cea0bdbe-0e4f-45fb-98a3-21f5d0c0142f
    : [[0 1]
    :  [1 0]]
    : [[ 0.+0.j -0.-1.j]
    :  [ 0.+1.j  0.+0.j]]
    : [[ 1  0]
    :  [ 0 -1]]

*** 计算迹和本征值
    #+NAME: 57e49468-a2c8-469f-aa42-ffbc7bd25a07
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      for m in pauli:
          print("trace is {};".format(np.trace(m)), "eigenvalues are: ", np.linalg.eigvals(m))
    #+end_src

    #+RESULTS: 57e49468-a2c8-469f-aa42-ffbc7bd25a07
    : trace is 0; eigenvalues are:  [ 1. -1.]
    : trace is 0j; eigenvalues are:  [ 1.+0.j -1.+0.j]
    : trace is 0; eigenvalues are:  [ 1. -1.]

*** 验证对易关系
    - \( [\sigma_i, \sigma_j] = 2i \epsilon_{ijk} \sigma^k \)
      - (\epsilon_{ijk}) 是全反称张量，指标有相同时为 0，指标奇排列为 -1 ，偶排列时为 1。

    #+NAME: ce310845-7c56-4745-9c76-0b43f0372771
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      def commute(a,b):
           '''
           commutation operator: ab-ba
           '''
           return a@b - b@a

      for i in range(3):
          l = (i+1) % 3
          m = (i+2) % 3
          if np.all(commute(pauli[i], pauli[l]) == 2j * pauli[m]):
              print(f"[ pauli_{i} , pauli_{l} ] == 2i pauli_{m}")
    #+end_src

    #+RESULTS: ce310845-7c56-4745-9c76-0b43f0372771
    : [ pauli_0 , pauli_1 ] == 2i pauli_2
    : [ pauli_1 , pauli_2 ] == 2i pauli_0
    : [ pauli_2 , pauli_0 ] == 2i pauli_1

*** 课堂练习：彻底避免使用列表
    - 构造 Pauli 矩阵时使用了列表和 for 循环，不够简洁
    - 直接构造张量计算，省去交换关系验证中的循环
    - 书写脚本解决
*** 进阶练习：Dirac 矩阵的对易关系
    \[
\gamma^0 = \begin{pmatrix} 
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\ 
0 & 0 & -1 & 0 \\
0 & 0 & 0 & -1 \end{pmatrix}, \quad
\gamma^1 = \begin{pmatrix}
0 & 0 & 0 & 1 \\
0 & 0 & 1 & 0 \\
0 & -1 & 0 & 0 \\
-1 & 0 & 0 & 0 \end{pmatrix}
\]

\[
\gamma^2 = \begin{pmatrix}
0 & 0 & 0 & -i \\
0 & 0 & i & 0 \\
0 & i & 0 & 0 \\
-i & 0 & 0 & 0 \end{pmatrix}, \quad
\gamma^3 = \begin{pmatrix}
0 & 0 & 1 & 0 \\
0 & 0 & 0 & -1 \\
-1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \end{pmatrix}
 \]

 \[ \{\gamma^\mu, \gamma^\nu\} = 2 \eta^{\mu\nu}I \]
** 矩阵乘法
*** 元素乘法与矩阵乘法的区别
    - 矩阵乘法是张量缩并的特例
      \[ \sum_j a_{ij} b_{jk} = c_{ik} \]
    - 元素乘法是逐个数字相乘
      \[ a_{ij} b_{ij} = c_{ij} \]

      #+NAME: 7738713a-b2e2-4077-989d-7fceade7f101
      #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
        a = b = np.ones((2,2))
        print(a * b)
        print(a @ b)
      #+end_src

      #+RESULTS: 7738713a-b2e2-4077-989d-7fceade7f101
      : [[1. 1.]
      :  [1. 1.]]
      : [[2. 2.]
      :  [2. 2.]]
** SciPy 模块举例
*** 课堂练习 =scipy.integrate=
    - 数值计算积分
      \[ \int^{\pi}_{-\pi} (1 + \cos \theta) \mathrm{d} \theta \]
** 2020年课程问卷反馈回顾
*** 本人心目中的理想给分梯度
    #+attr_beamer: :overlay <+->
    - D :: 学会了用 Git，以 Git 提交了大多数作业。理解了数据处理的复现、透明、
           一次和最佳工具原则。
    - C :: 在同学、小/助教、老师的帮助下完成作业的基本要求。
    - B :: 遇到困难，可以独立分析出错信息，独立查清原因并解决。遇到知识
           盲点，可以通过自学围绕实现需要快速入门。
    - A :: 独立思考，提出大作业的创新解决方法，效果出众。
    - A+ :: 解决大作业中涉及的科学界的开放问题。

*** 同学们的建议反馈（一）
    #+attr_beamer: :overlay <+->
    - 希望可以多一点写代码的指导
     
      课上的例子是写代码的指导。如果不够，同学之间和小助教多讨论切磋。

    - 希望自己学好，谢谢助教和老师（约占 40%）
     
      好！我们一起努力克服困难。

    - 希望学到更多对实验物理研究有用的工具

      好！这是本人十几年来一直不变的初心。

    - 希望作业能简单一点，分高一点

      作业的难度和给分高低服务于课程目标的设计。

      世界上本没有水课，太简单分太高就成了水课。

*** 同学们的建议反馈（二）
    - 我实在是太菜了，助教总是凶巴巴，可以温柔一点吗？

      有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一
      个极端 —— 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这
      既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令
      人反感。

      别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清
      楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。

      —— Eric Raymond，提问的智慧

*** “菜”问题
    #+attr_beamer: :overlay <+->
    - 解决未知问题是本课程的教学目标，也是数据时代黑客技能的基本组成部分，不要放弃宝贵的学习机会。

    - 希望同学在提问之前，做一些努力，尝试先自己解决问题。

    - 查找 FAQ 和群聊天记录，可能已经有人遇到并解决了同样问题。

    - 提问时，把问题描述清楚，不要说自己“菜”“弱”。

    - 不要遇到问题不假思索随手拍照，请先思考分析原因。

    - 老师一直在暗中观察，会及时制止助教无端以不好的态度与同学对话。
      但是本人看到的所有助教语气激烈的情形，都是同学无视了以上的建议。

    - 人非生而知之者，基础弱可以不断学习。但提菜问题必须批评。

    - 幸亏助教只是凶一下，随后还是帮助了同学，如果遇到老师……

**** 课堂豁免                                                  :B_alertblock:
     :PROPERTIES:
     :BEAMER_env: alertblock
     :END:
     - 在课堂上，没有时间作系统调研，以上规则不适用。
     - 课堂上遇到疑惑，请你大声发问！这也是在帮助同学和老师。

*** 同学们的建议反馈（三）
    - 作业难度跳跃太大

      是这样的。

    - 从以往的大作业项目看，强烈建议大作业中给出更加详细的公式、推导过
      程和计算方法，以便没有选修过相关课程的同学可以更好地理解项目的背
      景知识、数值计算方法等。期待不要把作业中没有讲的东西都扔给自学。

      参考老师理解的给分梯度，请在遇到知识盲点时，通过自学补足。大作业
      的设计目标是模拟科研环境，客观世界从不在乎你已经学过什么。

    - 希望讲授的时候能够慢一些（约占 15%）

      请在课堂上遇到困难时直接发问，本人会加入更多的反馈机制。

    - 希望讲授的时候能够快一些（约占 10%）

      请帮助周围的同学，或直接去解决大作业中的开放问题。

*** 同学们的建议反馈（四）
    - 希望能简单的列出之后的上课大纲，方便同学们预习
     
      好。

    - 期待马上上手机器学习，希望学习神经网络
     
      #+Attr_LaTeX: :height 0.4\textheight
      [[./fig/Data_Science_VD.png]]
     
      - 炒菜式的机器学习非常简单，不用上课也可以学会。

      - 有了 Hacking skills 和数理统计的功底，机器学习才能发挥出作用。

*** 同学们的建议反馈（五）

    - 希望详细演示下debug的过程

      好！

    - 希望了解更多的linux的骚气操作
     
      好！第三周。

    - 希望老师多讲解每个知识点的具体应用的意义。少讲语法，突出物理

      好！

    - 建议作业和课件在课程开始时就全部发放

      课件可以，作业课后发。

    - 将所有同学问过的问题整理到某个地方。助教群里答疑是提供详细的说明，而非提一个从来没有听说过的关键词

      - https://physics-data.meow.plus/faq/

      - 你学习如何通过关键词提示找到答案

*** 如何通过关键词提示找到答案
    - 搜索引擎的用法演示

      https://zh.lmgtfy.com/

      https://www.google.com/

      http://www.bing.com/

      https://duckduckgo.com/

      其它的搜索引擎都强烈不推荐。

*** 同学们的建议反馈（五）
    - 希望老师多举一些例子，整理出来发给大家。优秀代码分享。

      好！

*** 提问的智慧节选
    - 如果你的问题被人无视了，请对号入座：

    - 问题：我能在哪找到 X 程序或 X 资源？

      - 回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？

    - 问题：我怎样用 X 做 Y？

      - 回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。

    - 问题：如何设定我的 shell 提示？？

      - 回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。

    - 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？

      - 回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。

*** 提问的智慧节选（续）
    - 问题：我的{程序/设定/SQL 语句}不工作

      - 回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种

      1. 你还有什么要补充的吗？
      2. 真糟糕，希望你能搞定。
      3. 这关我有什么屁事？

*** 新规则
    - 具体问题，请到 https://git.tsinghua.edu.cn/physics-data/faq/-/issues/
     
      方便遇到类似问题的同学快速找到。

    - 当你的问题得到解答后，助教可能觉得此问题非常有价值。请配合助教发
      Pull Request，将它收集到 https://physics-data.meow.plus/faq/ 。
* 第二周第二天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p5
  :EXPORT_BEAMER_HEADER+: \title{数据存储格式}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-07-19 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 课前准备
*** 安装工具软件
    - HDF5、CSV 和 JSON 的相关工具
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install vitables python3-sip python3-h5py hdf5-tools csvtool jq
    #+end_src
** 数据格式
*** 透明原则
    - 把大规模的数组高效地存储到磁盘上，是数据处理的关键。
      - 大时间尺度上看，数据 = 储存的文件
    - 数据处理的结果，不仅在符合计算机的约定标准，还要对人类友好。
    - 数据格式本质上是内存磁盘的双向数据转化，关键问题是
      - 转化过程中是否有损失？
      - 转化是否方便？
**** 反例
     - 违反透明原则。
     - 只有某个操作系统上才能读取的数据文件，操作系统只能在某种计算机硬件上运行。
** CSV
*** 简介 comma separated values
    - 文本文件，易于阅读
    - 文本天然是一个表格
    - 适合传递整数，文字或者对精度没有要求的浮点数
    - CSV 工具
*** 试验写 CSV
    #+NAME: dcb25013-1361-416f-bda2-610e309f0e19
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import numpy as np
      hz = np.arange(100).reshape(10, 10)
      print(hz)
    #+end_src

    #+RESULTS: dcb25013-1361-416f-bda2-610e309f0e19
    #+begin_example
    [[ 0  1  2  3  4  5  6  7  8  9]
     [10 11 12 13 14 15 16 17 18 19]
     [20 21 22 23 24 25 26 27 28 29]
     [30 31 32 33 34 35 36 37 38 39]
     [40 41 42 43 44 45 46 47 48 49]
     [50 51 52 53 54 55 56 57 58 59]
     [60 61 62 63 64 65 66 67 68 69]
     [70 71 72 73 74 75 76 77 78 79]
     [80 81 82 83 84 85 86 87 88 89]
     [90 91 92 93 94 95 96 97 98 99]]
    #+end_example
    #+NAME: 711eb2e3-92d1-4957-b508-1373ce93ef21
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      np.savetxt("hz.csv", hz)
    #+end_src

    #+RESULTS: 711eb2e3-92d1-4957-b508-1373ce93ef21

*** 查看文件
    - =cat= 命令，“concatenate” 的缩写，可以显示文件内容，即向标准输出写入。

    #+NAME: 39494365-8a68-4e1d-a823-d1af513bd147
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      cat hz.csv
    #+end_src

    #+RESULTS: 39494365-8a68-4e1d-a823-d1af513bd147
    #+begin_example
    0.000000000000000000e+00 1.000000000000000000e+00 2.000000000000000000e+00 3.000000000000000000e+00 4.000000000000000000e+00 5.000000000000000000e+00 6.000000000000000000e+00 7.000000000000000000e+00 8.000000000000000000e+00 9.000000000000000000e+00
    1.000000000000000000e+01 1.100000000000000000e+01 1.200000000000000000e+01 1.300000000000000000e+01 1.400000000000000000e+01 1.500000000000000000e+01 1.600000000000000000e+01 1.700000000000000000e+01 1.800000000000000000e+01 1.900000000000000000e+01
    2.000000000000000000e+01 2.100000000000000000e+01 2.200000000000000000e+01 2.300000000000000000e+01 2.400000000000000000e+01 2.500000000000000000e+01 2.600000000000000000e+01 2.700000000000000000e+01 2.800000000000000000e+01 2.900000000000000000e+01
    3.000000000000000000e+01 3.100000000000000000e+01 3.200000000000000000e+01 3.300000000000000000e+01 3.400000000000000000e+01 3.500000000000000000e+01 3.600000000000000000e+01 3.700000000000000000e+01 3.800000000000000000e+01 3.900000000000000000e+01
    4.000000000000000000e+01 4.100000000000000000e+01 4.200000000000000000e+01 4.300000000000000000e+01 4.400000000000000000e+01 4.500000000000000000e+01 4.600000000000000000e+01 4.700000000000000000e+01 4.800000000000000000e+01 4.900000000000000000e+01
    5.000000000000000000e+01 5.100000000000000000e+01 5.200000000000000000e+01 5.300000000000000000e+01 5.400000000000000000e+01 5.500000000000000000e+01 5.600000000000000000e+01 5.700000000000000000e+01 5.800000000000000000e+01 5.900000000000000000e+01
    6.000000000000000000e+01 6.100000000000000000e+01 6.200000000000000000e+01 6.300000000000000000e+01 6.400000000000000000e+01 6.500000000000000000e+01 6.600000000000000000e+01 6.700000000000000000e+01 6.800000000000000000e+01 6.900000000000000000e+01
    7.000000000000000000e+01 7.100000000000000000e+01 7.200000000000000000e+01 7.300000000000000000e+01 7.400000000000000000e+01 7.500000000000000000e+01 7.600000000000000000e+01 7.700000000000000000e+01 7.800000000000000000e+01 7.900000000000000000e+01
    8.000000000000000000e+01 8.100000000000000000e+01 8.200000000000000000e+01 8.300000000000000000e+01 8.400000000000000000e+01 8.500000000000000000e+01 8.600000000000000000e+01 8.700000000000000000e+01 8.800000000000000000e+01 8.900000000000000000e+01
    9.000000000000000000e+01 9.100000000000000000e+01 9.200000000000000000e+01 9.300000000000000000e+01 9.400000000000000000e+01 9.500000000000000000e+01 9.600000000000000000e+01 9.700000000000000000e+01 9.800000000000000000e+01 9.900000000000000000e+01
    #+end_example

    - 不是很易读，因为 `np.savetxt()` 的默认格式是 `fmt='%.18e'`.
    - `fmt=%d` 按整数输出。
      - 参考：C format specifiers
*** 重新写 CSV
    #+NAME: 59a23df6-3a2c-46a0-b250-69059ac6d52e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
np.savetxt("hz.csv", hz, fmt="%d")
    #+end_src

    #+NAME: 65b6aca7-da71-420e-a5e2-1fc2de04417d
    #+RESULTS: 59a23df6-3a2c-46a0-b250-69059ac6d52e
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
cat hz.csv
    #+end_src

    #+RESULTS: 65b6aca7-da71-420e-a5e2-1fc2de04417d
    #+begin_example
    0 1 2 3 4 5 6 7 8 9
    10 11 12 13 14 15 16 17 18 19
    20 21 22 23 24 25 26 27 28 29
    30 31 32 33 34 35 36 37 38 39
    40 41 42 43 44 45 46 47 48 49
    50 51 52 53 54 55 56 57 58 59
    60 61 62 63 64 65 66 67 68 69
    70 71 72 73 74 75 76 77 78 79
    80 81 82 83 84 85 86 87 88 89
    90 91 92 93 94 95 96 97 98 99
    #+end_example
*** 读取 CSV
    #+NAME: 2d2bce9b-3e65-44ea-bcef-538c01c8652f
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      csv_hz = np.loadtxt("hz.csv")
      print(csv_hz)
    #+end_src

    #+RESULTS: 2d2bce9b-3e65-44ea-bcef-538c01c8652f
    #+begin_example
    [[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]
     [10. 11. 12. 13. 14. 15. 16. 17. 18. 19.]
     [20. 21. 22. 23. 24. 25. 26. 27. 28. 29.]
     [30. 31. 32. 33. 34. 35. 36. 37. 38. 39.]
     [40. 41. 42. 43. 44. 45. 46. 47. 48. 49.]
     [50. 51. 52. 53. 54. 55. 56. 57. 58. 59.]
     [60. 61. 62. 63. 64. 65. 66. 67. 68. 69.]
     [70. 71. 72. 73. 74. 75. 76. 77. 78. 79.]
     [80. 81. 82. 83. 84. 85. 86. 87. 88. 89.]
     [90. 91. 92. 93. 94. 95. 96. 97. 98. 99.]]
    #+end_example
**** 数据类型
     - Numpy 数组需要指定数据类型
       - `np.int16`, `np.int32`, `np.int64`, `int`
       - `np.float16`, `np.float32`, `np.float64`, `float`
       - `np.complex64`
              #+NAME: 037031e4-e982-46be-aa54-e579fbc388d1
              #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
                print(hz.dtype, csv_hz.dtype)
              #+end_src

              #+RESULTS: 037031e4-e982-46be-aa54-e579fbc388d1
              : int64 float64
     - 数据类型从整数变成了浮点数！
*** 正确的读取方法
    #+NAME: ba27cab1-2134-4d89-abb0-5b2a8a70763d
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      ri_hz = np.loadtxt("hz.csv", dtype=int)
      print(ri_hz)
      print(ri_hz.dtype)
    #+end_src

    #+RESULTS: ba27cab1-2134-4d89-abb0-5b2a8a70763d
    #+begin_example
    [[ 0  1  2  3  4  5  6  7  8  9]
     [10 11 12 13 14 15 16 17 18 19]
     [20 21 22 23 24 25 26 27 28 29]
     [30 31 32 33 34 35 36 37 38 39]
     [40 41 42 43 44 45 46 47 48 49]
     [50 51 52 53 54 55 56 57 58 59]
     [60 61 62 63 64 65 66 67 68 69]
     [70 71 72 73 74 75 76 77 78 79]
     [80 81 82 83 84 85 86 87 88 89]
     [90 91 92 93 94 95 96 97 98 99]]
    int64
    #+end_example
    - 需要额外信息辅助才能读入
*** 总结CSV的特点
- 优点：简单直观，兼容性极强
- 缺点：需要每次都指定格式和读入时的数据类型
  - 只能表示表格
- 是否可以把数据类型也存到文件中？
  - 人类还可以直接读取吗？
  - 另加约定是否可以成为标准？
  - \( \to \) HDF5
- 表格之外的格式怎么办？
  - \( \to \) JSON，具有额外的格式定义
    
** HDF5
*** 简介 Hierarchical Data Format
- 起源于高性能计算领域，目前标准由 The HDF Group 非盈利组织开发和维护
- 从 HDF 第 4 代起，获得广泛应用，特别是天文学
- 现在是第 5 代，因此叫做 HDF5
  - 原始表示：数据不必转换成文本。不涉及转换误差，但不再有文本文件的可读性。
  - 自我描述：数据类型写在文件中，可以被自动识别
  - 支持所有主流语言，有多种查看器
  - 缺点：对 ASCII 之外的字符支持没有标准，不保证可以处理中文。
*** HDF5 的结构
- 数据集(Dataset): 多维数组
- 组(Group): 数据集的容器
- 组可以嵌套，使用 `/` 分隔
  - =/calibration/water/waveform=
- 元数据(Metadata)：用于描述数据集或组的特征
*** Python 的 HDF5 工具
- h5py: 极简的工具库，允许 Python 调用 HDF5 的 C++ 库。
  - 数据格式兼容性好，可以与其它语言交换数据。
- PyTables: 在 HDF5 之上进行了自定义格式，对读写有优化，但是损失了兼容性。
  - 可以读入标准 HDF5 文件，但是容易不小心写出非标准 HDF5 文件。
- 课程选择 h5py，当兼容性和性能冲突时，优先选择兼容性。
  - “透明”原则。
*** 写 HDF5 文件
    #+NAME: deff847b-175f-41d2-895a-8c0cf1ad1853
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
import h5py

with h5py.File("hz.h5", "w") as opt:
    opt["hz"] = hz
    #+end_src

    #+NAME: 72560e0c-313d-4ff6-a9d1-af9da5128ef0
    #+RESULTS: deff847b-175f-41d2-895a-8c0cf1ad1853
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
h5dump -A hz.h5
    #+end_src

    #+RESULTS: 72560e0c-313d-4ff6-a9d1-af9da5128ef0
    : HDF5 "hz.h5" {
    : GROUP "/" {
    :    DATASET "hz" {
    :       DATATYPE  H5T_STD_I64LE
    :       DATASPACE  SIMPLE { ( 10, 10 ) / ( 10, 10 ) }
    :    }
    : }
    : }

- 注意写入风格与 CSV 的异同
- =h5py.File= 返回的 opt 可以看作一个字典。

*** 读 HDF5 文件
    #+NAME: baa0c130-7e08-497a-94ff-fde5fbe558e5
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      with h5py.File("hz.h5") as ipt:
          h5_hz = ipt["hz"][...]
      print(h5_hz)
    #+end_src

    #+RESULTS: baa0c130-7e08-497a-94ff-fde5fbe558e5
    #+begin_example
    [[ 0  1  2  3  4  5  6  7  8  9]
     [10 11 12 13 14 15 16 17 18 19]
     [20 21 22 23 24 25 26 27 28 29]
     [30 31 32 33 34 35 36 37 38 39]
     [40 41 42 43 44 45 46 47 48 49]
     [50 51 52 53 54 55 56 57 58 59]
     [60 61 62 63 64 65 66 67 68 69]
     [70 71 72 73 74 75 76 77 78 79]
     [80 81 82 83 84 85 86 87 88 89]
     [90 91 92 93 94 95 96 97 98 99]]
    #+end_example
- =[...]= 或 =[()]= 代表把数据全部读入内存。
- 如果内存不够，h5py 提供了部分读入的功能，也叫做 "out of core computing"。
*** 在文件上直接操作
    - 不在 =with= 环境有额外的功用
    #+NAME: 0bab4fcd-591e-49c4-91b2-a0f8a9b63b0e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
ipt = h5py.File("hz.h5")
ipt["hz"][2::3, ::5]
    #+end_src

    #+RESULTS: 0bab4fcd-591e-49c4-91b2-a0f8a9b63b0e
    : array([[20, 25],
    :        [50, 55],
    :        [80, 85]])
    #+NAME: 482c5925-2bbd-4625-8c6c-f45dea86f7e6
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
ipt.close() # 关闭之后就无法使用了
ipt["hz"][2::3, ::5]
    #+end_src

    #+RESULTS: 482c5925-2bbd-4625-8c6c-f45dea86f7e6
    #+begin_example
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    Input In [110], in <module>
          1 ipt.close() # 关闭之后就无法使用了
    ----> 2 ipt["hz"][2::3, ::5]

    File h5py/_objects.pyx:54, in h5py._objects.with_phil.wrapper()

    File h5py/_objects.pyx:55, in h5py._objects.with_phil.wrapper()

    File /usr/lib/python3.9/site-packages/h5py/_hl/group.py:305, in Group.__getitem__(self, name)
        303         raise ValueError("Invalid HDF5 object reference")
        304 elif isinstance(name, (bytes, str)):
    --> 305     oid = h5o.open(self.id, self._e(name), lapl=self._lapl)
        306 else:
        307     raise TypeError("Accessing a group is done with bytes or str, "
        308                     " not {}".format(type(name)))

    File h5py/_objects.pyx:54, in h5py._objects.with_phil.wrapper()

    File h5py/_objects.pyx:55, in h5py._objects.with_phil.wrapper()

    File h5py/h5o.pyx:190, in h5py.h5o.open()

    ValueError: Not a location (invalid object ID)
    #+end_example
*** 创建组
- 当有多个数据集时，可以通过组来对其进行归类和整理。

  #+NAME: 547dbef3-a97f-4031-aa6c-4c3bf740ea18
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
with h5py.File("hzg.h5", "w") as opt:
    opt.create_group("/demo")
    opt["demo"]["hz"] = hz
  #+end_src

  #+NAME: ac6bd1ce-496d-4959-bb5c-1228d9fb42c3
  #+RESULTS: 547dbef3-a97f-4031-aa6c-4c3bf740ea18
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
h5dump -A hzg.h5
  #+end_src

  #+RESULTS: ac6bd1ce-496d-4959-bb5c-1228d9fb42c3
  #+begin_example
  HDF5 "hzg.h5" {
  GROUP "/" {
     GROUP "demo" {
        DATASET "hz" {
           DATATYPE  H5T_STD_I64LE
           DATASPACE  SIMPLE { ( 10, 10 ) / ( 10, 10 ) }
        }
     }
  }
  }
  #+end_example
** 复合数组 Structured Array
*** 数组中的复合数据类型
    - 元素从简单类型 int, float 变成自定义的
    - 方便像表格一样组织数据
    #+NAME: a094e0fa-8cd8-466f-8b45-f11eff571260
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      t = [('Height', 'f4'), ('Weight', 'f4'), ('Age', 'u2')]
      r = np.empty(3, dtype=t)
      r[0] = (170, 60, 20)
      r[1] = (159, 45, 22)
      r[2] = (185, 72, 26)
      print(r)
    #+end_src

    #+RESULTS: a094e0fa-8cd8-466f-8b45-f11eff571260
    : [(170., 60., 20) (159., 45., 22) (185., 72., 26)]
*** 本质上是一维数组
    #+NAME: c3063f91-6615-4bdc-b52d-9e7d763bb3fb
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      print(r.shape)
    #+end_src

    #+RESULTS: c3063f91-6615-4bdc-b52d-9e7d763bb3fb
    : (3,)
**** 取列
     #+NAME: 958fa7a9-b6b7-462f-91fd-56af90274d16
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       print(r['Height'])
     #+end_src

     #+RESULTS: 958fa7a9-b6b7-462f-91fd-56af90274d16
     : [170. 159. 185.]

**** 取行
     #+NAME: 0a8b2fab-4d5b-443f-82e0-912b087fc4b0
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       r[0]
     #+end_src

     #+RESULTS: 0a8b2fab-4d5b-443f-82e0-912b087fc4b0
     : (170., 60., 20)
*** 直接保存到 HDF5 表
- 复合数组可以直接保存为 HDF5 的表格
  #+NAME: eb7bd1f8-16a1-49e4-866b-6db19f5d42cb
  #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
    with h5py.File("people.h5", "w") as opt:
        opt['record'] = r
  #+end_src

  #+RESULTS: eb7bd1f8-16a1-49e4-866b-6db19f5d42cb

  #+NAME: 2507bacf-1f5a-474c-a6c8-23ec69dbd236
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
h5dump people.h5
  #+end_src

  #+RESULTS: 2507bacf-1f5a-474c-a6c8-23ec69dbd236
  #+begin_example
  HDF5 "people.h5" {
  GROUP "/" {
     DATASET "record" {
        DATATYPE  H5T_COMPOUND {
           H5T_IEEE_F32LE "Height";
           H5T_IEEE_F32LE "Weight";
           H5T_STD_U16LE "Age";
        }
        DATASPACE  SIMPLE { ( 3 ) / ( 3 ) }
        DATA {
        (0): {
              170,
              60,
              20
           },
        (1): {
              159,
              45,
              22
           },
        (2): {
              185,
              72,
              26
           }
        }
     }
  }
  }
  #+end_example
*** 图形查看器 ViTables
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
vitables people.h5
    #+end_src
*** 读复合数组
    #+NAME: 51188465-70de-4d34-a7b0-d391a787c822
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
with h5py.File("people.h5", 'r') as ipt:
    people = ipt['record'][()]
people
    #+end_src

    #+RESULTS: 51188465-70de-4d34-a7b0-d391a787c822
    : array([(170., 60., 20), (159., 45., 22), (185., 72., 26)],
    :       dtype=[('Height', '<f4'), ('Weight', '<f4'), ('Age', '<u2')])

** JSON
*** 简介 JavaScript Object Notation

- =JSON= 最早从网站前端的 javascript 社区出现，用于代替 Extensible
  Markup Language (XML)。
  - 更加易于人类理解
  - 适合传递有层次的数据，特别是文本
  - 优点：与 Python 的字典结构相近
  - 缺点：数字的表达能力较弱
- 下载示例 json 文件
  #+NAME: 5d0e78fa-d133-485a-a15e-4e49c4800c3f
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
wget 'http://hep.tsinghua.edu.cn/~orv/pd/BBH_events_v3.json'
  #+end_src

  #+RESULTS: 5d0e78fa-d133-485a-a15e-4e49c4800c3f
  #+begin_example
  --2022-07-19 13:05:01--  http://hep.tsinghua.edu.cn/~orv/pd/BBH_events_v3.json
  Resolving hep.tsinghua.edu.cn... 101.6.6.219, 2402:f000:1:416:101:6:6:219
  Connecting to hep.tsinghua.edu.cn|101.6.6.219|:80... connected.
  HTTP request sent, awaiting response... 200 OK
  Length: 2202 (2.2K) [application/json]
  Saving to: ‘BBH_events_v3.json’

  
BBH_events_v3.json    0%[                    ]       0  --.-KB/s               
BBH_events_v3.json  100%[===================>]   2.15K  --.-KB/s    in 0s      

  2022-07-19 13:05:01 (228 MB/s) - ‘BBH_events_v3.json’ saved [2202/2202]

  #+end_example
*** 读 JSON
    #+NAME: a957548e-e023-4d16-96da-4b458a26b328
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import json

      with open("BBH_events_v3.json","r") as ipt:
          events = json.load(ipt)
      print(type(events)) # 就是一个字典
      print(events.keys())
    #+end_src

    #+RESULTS: a957548e-e023-4d16-96da-4b458a26b328
    : <class 'dict'>
    : dict_keys(['GW150914', 'LVT151012', 'GW151226', 'GW170104'])

*** JSON 结构字典
    #+NAME: c73658ba-a357-42f0-b5b9-3fa037912893
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
events['GW150914']
    #+end_src

    #+RESULTS: c73658ba-a357-42f0-b5b9-3fa037912893
    #+begin_example
    {'name': 'GW150914',
     'fn_H1': 'H-H1_LOSC_4_V2-1126259446-32.hdf5',
     'fn_L1': 'L-L1_LOSC_4_V2-1126259446-32.hdf5',
     'fn_template': 'GW150914_4_template.hdf5',
     'fs': 4096,
     'tevent': 1126259462.44,
     'utcevent': '2015-09-14T09:50:45.44',
     'm1': 41.743,
     'm2': 29.237,
     'a1': 0.355,
     'a2': -0.769,
     'approx': 'lalsim.SEOBNRv2',
     'fband': [43.0, 300.0],
     'f_min': 10.0}
    #+end_example
*** JSON 输出
    #+NAME: 2b151a96-1f27-4914-81a0-10a79b03756b
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      with open("BBH_events_rewrite.json", 'w') as opt:
          json.dump(events, opt)
    #+end_src

    #+RESULTS: 2b151a96-1f27-4914-81a0-10a79b03756b

    #+NAME: 4320c20d-2037-4a51-b498-a4a0c9c0dce2

    #+RESULTS: 4320c20d-2037-4a51-b498-a4a0c9c0dce2
    : {"GW150914": {"name": "GW150914", "fn_H1": "H-H1_LOSC_4_V2-1126259446-32.hdf5", "fn_L1": "L-L1_LOSC_4_V2-1126259446-32.hdf5", "fn_template": "GW150914_4_template.hdf5", "fs": 4096, "tevent": 1126259462.44, "utcevent": "2015-09-14T09:50:45.44", "m1": 41.743, "m2": 29.237, "a1": 0.355, "a2": -0.769, "approx": "lalsim.SEOBNRv2", "fband": [43.0, 300.0], "f_min": 10.0}, "LVT151012": {"name": "LVT151012", "fn_H1": "H-H1_LOSC_4_V2-1128678884-32.hdf5", "fn_L1": "L-L1_LOSC_4_V2-1128678884-32.hdf5", "fn_template": "LVT151012_4_template.hdf5", "fs": 4096, "tevent": 1128678900.44, "utcevent": "2015-10-12T09:54:43.44", "m1": 44.111, "m2": 11.205, "a1": 0.447, "a2": -0.434, "approx": "lalsim.SEOBNRv2", "fband": [43.0, 400.0], "f_min": 10.0}, "GW151226": {"name": "GW151226", "fn_H1": "H-H1_LOSC_4_V2-1135136334-32.hdf5", "fn_L1": "L-L1_LOSC_4_V2-1135136334-32.hdf5", "fn_template": "GW151226_4_template.hdf5", "fs": 4096, "tevent": 1135136350.65, "utcevent": "2015-12-26T03:38:53.65", "m1": 19.6427, "m2": 6.7054, "a1": 0.3998, "a2": -0.0396, "approx": "lalsim.SEOBNRv2", "fband": [43.0, 800.0], "f_min": 10.0}, "GW170104": {"name": "GW170104", "fn_H1": "H-H1_LOSC_4_V1-1167559920-32.hdf5", "fn_L1": "L-L1_LOSC_4_V1-1167559920-32.hdf5", "fn_template": "GW170104_4_template.hdf5", "fs": 4096, "tevent": 1167559936.6, "utcevent": "2017-01-04T10:11:58.60", "m1": 33.64, "m2": 24.82, "a1": -0.236, "a2": 0.024, "approx": "lalsim.SEOBNRv2", "fband": [43.0, 800.0], "f_min": 10.0}}
    #+NAME: 30491feb-725e-4dd9-a807-2611133241a4
*** 人类友好的 JSON 查看器
    #+NAME: e5af3c3a-fcb6-4d39-a3f1-7cbc65418034
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
jq < BBH_events_rewrite.json
    #+end_src

    #+RESULTS: e5af3c3a-fcb6-4d39-a3f1-7cbc65418034
    #+begin_example
    {
      "GW150914": {
        "name": "GW150914",
        "fn_H1": "H-H1_LOSC_4_V2-1126259446-32.hdf5",
        "fn_L1": "L-L1_LOSC_4_V2-1126259446-32.hdf5",
        "fn_template": "GW150914_4_template.hdf5",
        "fs": 4096,
        "tevent": 1126259462.44,
        "utcevent": "2015-09-14T09:50:45.44",
        "m1": 41.743,
        "m2": 29.237,
        "a1": 0.355,
        "a2": -0.769,
        "approx": "lalsim.SEOBNRv2",
        "fband": [
          43.0,
          300.0
        ],
        "f_min": 10.0
      },
      "LVT151012": {
        "name": "LVT151012",
        "fn_H1": "H-H1_LOSC_4_V2-1128678884-32.hdf5",
        "fn_L1": "L-L1_LOSC_4_V2-1128678884-32.hdf5",
        "fn_template": "LVT151012_4_template.hdf5",
        "fs": 4096,
        "tevent": 1128678900.44,
        "utcevent": "2015-10-12T09:54:43.44",
        "m1": 44.111,
        "m2": 11.205,
        "a1": 0.447,
        "a2": -0.434,
        "approx": "lalsim.SEOBNRv2",
        "fband": [
          43.0,
          400.0
        ],
        "f_min": 10.0
      },
      "GW151226": {
        "name": "GW151226",
        "fn_H1": "H-H1_LOSC_4_V2-1135136334-32.hdf5",
        "fn_L1": "L-L1_LOSC_4_V2-1135136334-32.hdf5",
        "fn_template": "GW151226_4_template.hdf5",
        "fs": 4096,
        "tevent": 1135136350.65,
        "utcevent": "2015-12-26T03:38:53.65",
        "m1": 19.6427,
        "m2": 6.7054,
        "a1": 0.3998,
        "a2": -0.0396,
        "approx": "lalsim.SEOBNRv2",
        "fband": [
          43.0,
          800.0
        ],
        "f_min": 10.0
      },
      "GW170104": {
        "name": "GW170104",
        "fn_H1": "H-H1_LOSC_4_V1-1167559920-32.hdf5",
        "fn_L1": "L-L1_LOSC_4_V1-1167559920-32.hdf5",
        "fn_template": "GW170104_4_template.hdf5",
        "fs": 4096,
        "tevent": 1167559936.6,
        "utcevent": "2017-01-04T10:11:58.60",
        "m1": 33.64,
        "m2": 24.82,
        "a1": -0.236,
        "a2": 0.024,
        "approx": "lalsim.SEOBNRv2",
        "fband": [
          43.0,
          800.0
        ],
        "f_min": 10.0
      }
    }
    #+end_example

    #+RESULTS: 30491feb-725e-4dd9-a807-2611133241a4
*** 美化输出
    #+NAME: d1c23627-8cfa-472c-a876-08ab21750325
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      with open("BBH_events_indent.json", 'w') as opt:
          json.dump(events, opt, indent=2)
    #+end_src

    #+RESULTS: d1c23627-8cfa-472c-a876-08ab21750325

** Parquet
*** 简介
    - Parquet 是从经过列读取优化的高性能数据格式。在 Java 语言生态的大
      数据平台，例如 Hadoop、Spark 上非常流行。
* 第二周第三天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p6
  :EXPORT_BEAMER_HEADER+: \title{数据绘图}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-07-20 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 基础工具
*** 安装软件
    - Matplotlib（Python 绘图） gpicview（图片查看器） mupdf（pdf 查看器）
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install python3-matplotlib python3-tk gpicview mupdf
    #+end_src

*** 科学绘图
    - A plot worths a thousand words. 图是描述科学对象的载体。
      - 撰写论文甚至可理解为“看图说话”：论文的局部目标是用语言和公式把图片解释清楚。
      - 绘制高质量的图，所花精力不比书写几千字少

    - Matplotlib
      - 数据画图和可视化工具，风格受 Matlab 影响
      - 参考资料：[[https://scipy-lectures.org/][Scipy Lecture Notes]] 1.5
**** X Window System 也被称为 “X11”
  - 图形显示事实上的国际标准
  - Server-client 架构
  - Server 为显示图形提供服务 (=VcXsrv=)
  - Client 连接 X11 server，请求显示图形 (=xeyes=, =ViTables=, =Matplotlib=)
** Matplotlib
*** 一条直线
    - 四点连成一条直线
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      from matplotlib import pyplot as plt

      plt.plot([1,2,3,4])
      <<savefig(figname="img/line.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/line.pdf]]
*** 只画四点，不连线
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      plt.plot([1,2,3,4], '.')
      <<savefig(figname="img/points.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/points.pdf]]

*** 两条曲线
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      import numpy as np
      t = np.linspace(-np.pi, np.pi, 100)
      C, S = np.cos(t), np.sin(t)
      plt.plot(t, C, label="cos")
      plt.plot(t, S, label="sin")
      plt.legend()
      <<savefig(figname="img/sin.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/sin.pdf]]

*** 变成红色的点
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      plt.plot(t, C, "ro") # 改成红色的圆点
      <<savefig(figname="img/red-circle.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/red-circle.pdf]]

** 图片的调整
*** 调整必要性
    - 默认的图片，会有各类值得改进之处。
      - 坐标轴取值范围、风格、含义
      - 图片中的标记
      - 字体大小
*** 坐标轴
    - 显示范围、标注
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      plt.plot(t, S)
      plt.xlim(t.min() * 1.5, t.max() * 1.5)
      plt.xlabel("arc")
      plt.ylabel("value")
      <<savefig(figname="img/cood-range.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/cood-range.pdf]]

*** 子图
    - 并列绘图，调整图的显示范围
      #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
        plt.subplot(1, 2, 1)
        plt.plot(t, C)
        plt.subplot(1, 2, 2)
        plt.plot(t, S)
        <<savefig(figname="img/twins.pdf")>>
      #+end_src

      #+attr_latex: :height 5cm
      #+RESULTS:
      [[file:img/twins.pdf]]
** 常用形式
*** 散点图
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      n = 1024
      X = np.random.normal(0, 1, n)
      Y = np.random.normal(0, 1, n)

      plt.scatter(X, Y, alpha=0.2)
      <<savefig(figname="img/scatter.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/scatter.pdf]]

*** 直方图
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      plt.hist(X, bins=32)
      <<savefig(figname="img/histogram.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/histogram.pdf]]

** 多维元素的表现
*** 平铺
    - 表现简单的三维数据
      #+begin_src python :results output :session lecture-plot :exports both
        img = np.arange(100).reshape(10, 10)
        print(img)
      #+end_src

      #+RESULTS:
      #+begin_example
      [[ 0  1  2  3  4  5  6  7  8  9]
       [10 11 12 13 14 15 16 17 18 19]
       [20 21 22 23 24 25 26 27 28 29]
       [30 31 32 33 34 35 36 37 38 39]
       [40 41 42 43 44 45 46 47 48 49]
       [50 51 52 53 54 55 56 57 58 59]
       [60 61 62 63 64 65 66 67 68 69]
       [70 71 72 73 74 75 76 77 78 79]
       [80 81 82 83 84 85 86 87 88 89]
       [90 91 92 93 94 95 96 97 98 99]]
      #+end_example
*** 平铺（二）
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      plt.imshow(img)
      plt.colorbar()
      <<savefig(figname="img/map.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/map.pdf]]
*** 高斯分布的概率密度函数
    #+begin_src python :results output :session lecture-plot :exports both
      from scipy.stats import multivariate_normal

      rv = multivariate_normal(mean=(0, 0), cov = ((1,0.5), (0.5,0.5)))
      print(rv.pdf((0, 0))) # (x, y) -> f(x, y)

      x, y = np.mgrid[-1:1:.01, -1:1:.01]
      pos = np.dstack((x, y))
      prob_density = rv.pdf(pos)
      print(pos.shape, prob_density.shape)
    #+end_src

    #+RESULTS:
    : 0.31830988618379075
    : (200, 200, 2) (200, 200)

    - 给 \( (i, j) \) 着色为 \( f(x, y) \)
      \[ (i, j) \to (x, y) \to f(x, y) \]
      - =pos= :: \( (i, j) \to (x, y) \)
      - =prob_density= :: \( (i, j) \to f(x, y) \)

*** 绘制等高线图
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      plt.contourf(x, y, prob_density)
      plt.colorbar()
      plt.xlabel("x")
      plt.ylabel("y")
      <<savefig(figname="img/gauss.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/gauss.pdf]]
*** =imshow= 的原点约定不同
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      plt.imshow(prob_density)
      plt.colorbar()
      <<savefig(figname="img/gauss-imshow.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/gauss-imshow.pdf]]
*** 绘制流线图
    - 相图： \( (p, q) \) 的演化图， \( p = m \dot{q} \)
    - 经典谐振子
      - \( \dot{p} = - k q \)
      - 取 \( m=k=1 \) 每个 \( (p, q) \) 位置对应
        \[ (\dot{p}, \dot{q}) = (-q, p) \]
*** 绘制流线图（二）
    - 表现矢量场
      \[ (i, j) \to (p, q) \to (\dot{p}, \dot{q}) \]
    
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      P, Q = np.mgrid[-1:1:.002, -1:1:.002]
      dP = -Q # \dot{p}
      dQ = P  # \dot{q}
      plt.streamplot(Q, P, dQ, dP)
      <<savefig(figname="img/oscillator.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/oscillator.pdf]]
*** 思考练习：非谐振单摆的相图是什么样子
    \[ m L \ddot{\theta} = - m g \sin \theta \]
** 练习：Bessel 函数
*** 第一类 Bessel 函数
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      from scipy import special

      x = np.linspace(0, 6, 100)
      y_values = [ special.jv(n, x) for n in range(0, 5) ] # 第一类 Bessel 函数
      for i, y in enumerate(y_values):
          plt.plot(x, y, label=f"Order {i}")
      plt.legend()
      <<savefig(figname="img/bessel.pdf")>>
    #+end_src

    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/bessel.pdf]]

** 更多样例
*** Matplotlib 官方图片展
    https://matplotlib.org/stable/gallery/index.html

    - 看到需要的图，点进去可查看代码
* 第二周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p7
  :EXPORT_BEAMER_HEADER+: \title{蒙特卡罗方法与大作业}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-07-22 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习和提示
*** 大作业准备
     - 安装 GNU Make

       #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
         apt install make-guile
       #+end_src

*** 黑白大战
    - 2022-07-21 19:59 截止
    - 提示：代码和 Git 提交说明的要求与小作业一致
    - 切搓交流会： 2022-07-22 13:30 -- 14:30 。包括但不限于
      - 天梯刷榜技巧
      - 算法策略开发
      - 那些趟过的坑
*** 科学绘图
    - 原则：复现、透明
    - Matplotlib：点、线、场、向量场、标记
** 科学哲学视角下的实验物理
*** 柏拉图世界观
    #+Attr_LaTeX: :height 0.6\textheight
    [[./fig/SCI.png]]

    - 数学世界独立存在，由它推演出物理世界
*** 实验物理
    #+Attr_LaTeX: :height 0.6\textheight
    [[./fig/SCI.png]]
    - 实验仪器是从物理世界到人类的一条信息通道
      - 实验仪器的分辨率有限，我们在进行有损通信

*** 举个例子
    #+Attr_LaTeX: :height 0.6\textheight
    [[./fig/reconstruction.png]]
    - 建立模型解释物理世界发生的现象，通过统计方法反推本质。
** 蒙特卡罗方法
*** 实验引子：探测效率估计
    - 实验仪器往往很复杂
      
      有一个长度为 \( L=\SI{5}{\cm} \) 的细长棒状的 \( \alpha \) 放射源，棒的左端位于原点，棒体与 \( z \) 轴平行。放射源在棒中均匀分布，发射的 \( \alpha \) 粒子在空间中的角分布各向同性。

      在 \( z \) 轴正向距离原点 \( D=\SI{14}{\cm} \) 处放置了一个圆盘状的探测器用来记录 \( \alpha \) 粒子，圆盘半径 \( R=\SI{7}{\cm} \)，轴线与 \( z \) 轴重合。
      
      #+attr_latex: :height 5cm
      [[./fig/alpha-detection.png]]

*** 一个大积分
    - \( \alpha \) 被观察到与否，有多种因素影响
      - 棒表面的哪里出射
      - 向哪个方向出射
      - +飞行过程中有没有被碰撞，有没有被电磁场影响+
      - 有没有撞到圆盘上，撞上之后有没有信号
      - 信号是不是足够大被仪器记录
    - 所有因素做笛卡尔积
    - ……只为了最终得到一个数字： \( \alpha \) 的探测效率 \( \in [0, 1] \)。

*** 理论引子：量子论
    - 微观粒子可能的路径按照作用量叠加起来，给出量子态的概率振幅。
      \[ \int_{\vec{s}(t) \in S} \exp\left[-i \int \mathcal{L(\vec{s}, \dot{\vec{s}})} \mathrm{d} t\right] \mathrm{d} \vec{s} \]
    - 连续统无穷维积分，无严格的数学测度定义。
    - ……只办了最终得到一个数字：观测结果出现的概率
    
*** 计算积分
    设 \( X_1, X_2, \cdots X_n \) 是独立同分布的随机变量序列，且 \( X_n \sim U[a,b] (b>a) \) ，\( f(x) \) 是 \( [a,b] \) 上的连续函数。

    - 提供了一种计算定积分的方法
    - 用计算机产生服从 \( [a,b] \) 上的均匀分布的随机数 \( \{ X_i \} \)，然后得随机序列 \( \{ f(X_i) \} \)，则：
      \[ \int_a^b f(x) \mathrm{d} x \approx \frac{b-a}{n} \sum_{i=1}^n f(X_i) \]
**** 为什么随机数可以胜任？
     - 自然小信息 \( \to \) 大信息复杂过程 \( \to \) 人类小信息
     - 自然小信息 \( \to \) 无所不用其极的方法 \( \to \) 人类小信息
*** 课堂练习：积分

    - 数值计算积分
      \[ \int^{\pi}_{-\pi} (1 + \cos \theta) \mathrm{d} \theta \]

    - 几种方法举例
      1. 手动矩形法
      2. =scipy= 调库法
      3. 蒙特卡罗法

** 大作业
*** 大作业安排
    - 第一阶段 2022.07.21 - 2022.08.07
      - 模拟实验测量

    - 第二阶段 2022.08.04 - 2022.08.21
      - 分析实验数据
      - 测量物理模型参数
      - 发现物理规律

*** 实验测量的模拟
    - 输入 :: 物理对象的信息，随机因素的概率分布
    - 输出 :: 多阶段，最终输出为模拟的实验测量原始数据
    - 可视化 :: 中间结果用图表描述
    - 采分 :: 各阶段的实现，最终输出的正确性，作业报告

*** 分组
    - 同学们先联络好，组队信息在网络学堂提交
    - 每队至多三人
      - 单人队：大作业得分 $\times 1.03$
      - 三人队：每人大作业得分 = 队伍得分 $\times 0.95$
      - 不同队伍间请勿直接交换代码

    - 大作业带有较高难度的附加任务，至多在（黑盒）满分基础上加 10%。

*** 自定义大作业
    - 没有收到请求。

*** 大作业
    - 物理学是实验科学
    - 实验研究的两个方向：
      1. 演绎，模拟
      2. 分析
     
    - 三份可选的大作业
      - 原子分子物理方向

      - 粒子物理方向

      - 天体物理方向

*** Makefile 对流程的定义
    - GNU Make 恰好可描述数据流水线的三要素：输入、输出与程序。
    - 基本结构
      #+BEGIN_SRC makefile -i
输出目标: 输入源
    执行的命令 $^ $@
      #+END_SRC

      - =$^= 代表输入源
      - =$@= 代表输出目标
    - =make -n= 用来测试即将执行的命令。

** Python 环境
*** Jupyter
    - Jupyter 从 IPython 的网页界面发展而来
    - 安装使用

      1. =apt install jupyter=
      2. 配置文件
      3. 安装 jupyter kernel
      4. 本地网络测试

*** Jupyter 的特点
    - 最强大的优势：

      - 程序与文本混合编排，literate programming，鼓励了科学结果的复现。

      - 文章和程序既然在描述同一件事，可以自然地写在一起。体现“一次”原则。

    - 其它优势：

      - 图文混排

      - 支持 Python 之外的其它语言环境

    - 弱点：

      - 网页上打字，没有强大的编辑器。(Emacs IPython Notebook，填补了空白)

      - 要进行高强度大规模的运算，需要与其它工具配合。不够成熟。

      - 代码的复用需要额外步骤。

* 第三周第一天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p8
  :EXPORT_BEAMER_HEADER+: \title{GNU 命令行}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-07-25 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习与提示
*** 软件准备
    - GNU 环境 :: 课程与作业环境
      macOS 上需要额外指定使用 GNU 命令
    - gawk :: GNU awk 语言，数据驱动程序语言
      - Alfred Aho, Peter Weinberger, and Brian Kernighan
    - sed :: 文本流编辑器
    - coreutils :: GNU 核心命令
    - man-db :: 帮助文档阅读器
    - info :: 层级帮助文档阅读器
    - curl :: 网络请求和下载器
    - bc :: 计算器
    - bash-doc :: bash 详细教程
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install gawk sed coreutils man-db info curl bc bash-doc
    #+end_src
*** 复习
**** Git
     - 队友分工合作，过去与未来的合作
**** Python
     - 程序结构，数据类型，数组张量，画图
**** 技能学习的特点
     - 归纳地学习黑客技术
     - 先“不求甚解”再择最重要的“寻根究底”，在两种学习模式间自由跳跃。
       - 在麦克思维方程出现之前，已经有光学
       - 不是只有做完实验才能吃饭
*** Python 程序的支撑
    #+BEGIN_SRC dot :file ./python-driver.pdf
      digraph python {
      rankdir="LR";

      I [label = CSV]
      I -> P [label = 数据输入]
      P [label = 程序1]
      O [label = HDF5]
      P -> O [label = 数据输出]
      O -> Q [label = 数据输入]
      Q [label = 程序2]
      Q -> F
      F [label = 结果图]
      }
    #+END_SRC
    #+attr_latex: :height 2cm
    #+RESULTS:
    [[file:./python-driver.pdf]]

    - 程序由 Python 书写，或者 R、C++ 等等任何最佳工具
    - 透明数据的格式和可复现的结果图。
**** 如何把它们组织起来？
     - 如何管理 GB、TB 乃至 PB 级的输入输出数据？
     - 如何高效地在不同组输入数据上重复运行亿万次？
     - 四大基本原则在此依然适用。
** 命令行
*** GNU 命令行界面：神秘的黑色魔法世界
    - 我们已经接触的命令：
      =ls=, =cd=, =rm=, =git=, =less=, =man=, =cat=, =pwd=
**** 为什么学习命令行
 - _复现_ 原则的保证
   - Python 程序，有明确的功能，定义了输入和输出。
   - 需要高效且可复现地整合协调各类程序，处理数据。
 - 体现 _透明_ 原则
   - 数据的中间结果，可以用命令行工具查看 =cat=, =less=, =h5dump= ...
   - 注：对应的图形工具也存在，可互相搭配。
 - 体现 _最佳工具_ 原则
   - GNU 命令行目前是文件和数据处理流程管理的最佳工具
   - 人操纵计算机最高效的方式：快捷键
**** 参考书
     Jeroen Janssens, Data Science at the Command Line

*** 两周之后，你可能会成为：
    [[http://hep.tsinghua.edu.cn/~orv/teaching/Yuki_Installs_Gentoo.mp4][ゆき Installs Gentoo]]
    #+attr_latex: :height 5cm
    [[./fig/gentoo.png]]
*** 数字时代：如何更本质地与世界相连？
- 我们购买设备，使用设备。
  - 如果可以理解设备，改造设备、修理设备和创造设备，生活会有什么变化？
- 程序和命令行是掌控自己数字世界的重要一步
  - 如果你不掌控自己的世界，别人就会代替你成为主人
  - 菜单、窗口是他们设计好给我们用的，程序、命令是自己组合给自己用的。
**** 手机例子
     - [[https://www.youtube.com/watch?v=8mAf9WXlAJE][Gentoo on Android]]

** 命令行的特点
*** 命令行的易用性
- 命令行是天然的 REPL
- 命令行有最丰富的文件操作工具
- 介于程序设计语言与图形界面之间
- 是计算机系统的“母语”，用户于开发者的重叠更大
  - 科学计算中，不是任何时候都有现成的工具可用，经常需要自己开发
  - 依赖命令行可以缩小开发者与用户的鸿沟

**** 命令行的整合性和扩展性
 - 所有的语言工具都可以从命令行调用

   - 新的语言写成的命令行工具不断涌现，许多工具非常适合用于数据处理

 - 命令行是天然的“胶水”，整合各类语言协同工作
   - 鼓励小巧精悍工具的组合，避免又长又难理解的马拉松程序出现
   - 不论流行的语言 Perl、Python、Scala 如何变化，命令环境基本不变

*** 命令行的自动性

- 使用的命令可以轻易组成脚本，重复使用
  - 图形界面不易记录制操作

**** 命令行的普适性

- GNU/Linux, 各种 Unix，macOS，Microsoft Windows WSL.
- 世界顶级的超级计算机，云计算主机，智能手机，物联网设备都可用同一套命令行工具操作
- 已有约50年历史，一定会继续存在

** 外壳
*** 外壳 shell
**** t                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.7
     :END:
- 外壳 shell 是相对于操作系统内核 kernel 而言，与人类交互的部分
- 有命令行 (Command Line Interface, CLI) 和图形 (Graphical User Interface, GUI)两种
- Python 在 shell 之上运行
***** 实际上 Python 也可以成为外壳环境
      - Python 与 =bash= 平等，都是“用户态”程序 userspace
      - =bash= GNU Bourne-Again SHell, 目前使用最为广泛，方便进行文件操作和调用命令
        - =man bash= 可阅读在线文档
        - =info bash= 获得详细教程
**** i                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.299
     :END:
    #+BEGIN_SRC dot :file ./shell.pdf
      digraph shell {
      rankdir="BT";
      node [shape=box]; H; K; S; P
      H [label = 硬件]
      H -> K [arrowsize=0.5]
      K [label = "内核 kernel"]
      K -> S [arrowsize=0.5]
      S [label = "外壳 shell"]
      S -> P [arrowsize=0.5]
      P [label = 程序]
      }
    #+END_SRC

    #+attr_latex: :height 7cm
    #+RESULTS:
    [[file:./shell.pdf]]

*** 命令的类型
- 可执行程序，例如 =ls=
  #+NAME: 235a85b9-dc8c-458c-9a5f-fd580c21268b
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
type ls
  #+end_src

  #+RESULTS: 235a85b9-dc8c-458c-9a5f-fd580c21268b
  : ls is hashed (/bin/ls)
- 脚本，例如 Python 程序
  #+NAME: 4442c149-5223-4d74-affb-f3fc54d92b6b
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
    type vitables
    file $(realpath /usr/bin/vitables)
  #+end_src

  #+RESULTS: 4442c149-5223-4d74-affb-f3fc54d92b6b
  : vitables is /usr/bin/vitables
  : /usr/bin/vitables: Python script, ASCII text executable

- Shell 内建命令，例如 =cd=
  #+NAME: c50e7d7a-ac26-444a-8bae-f2d99a73c3b3
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
    type cd
    type type
  #+end_src

  #+RESULTS: c50e7d7a-ac26-444a-8bae-f2d99a73c3b3
  : cd is a shell builtin
  : type is a shell builtin
*** 命令的类型（二）
- Shell 函数
  #+NAME: 2df81f46-300b-404f-a597-ec048702ead4
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
    function hello { :; }
    type hello
  #+end_src

  #+RESULTS: 2df81f46-300b-404f-a597-ec048702ead4
  : hello is a function
  : hello () 
  : { 
  :     :
  : }

- 别名 alias
  #+NAME: 127c5876-45be-42c7-9f88-cefa032e6f06
  #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
    alias vt='vitables -m r'
    type vt
  #+end_src

  #+RESULTS: 127c5876-45be-42c7-9f88-cefa032e6f06
  : vt is aliased to `vitables -m r'
  
** 标准输入输出
*** 概念
   - 标准输入 standard input =stdin= (file descriptor 0)
   - 标准输出 standard input =stdout= (fd 1)
   - 标准报错 standard error =stderr= (fd 2)
**** 管道
     - 把前一个程序的标准输出和后一个标准输入连接起来
     - 无限串联，每个命令各司其职
**** 复习 Python 的标准输入和输出
 - =input()= 标准输入
 - =print()= 标准输出
 - =print(..., file=sys.stderr)= 标准报错
*** 输出
    #+NAME: 0dee74d9-e442-43fd-b539-9d3ba577f5a4
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
echo "I am using the command line!"
    #+end_src

    #+RESULTS: 0dee74d9-e442-43fd-b539-9d3ba577f5a4
    : I am using the command line!

**** 管道注入 =wc=
     #+NAME: d566d5ac-7382-4db1-a1cf-3268defa4796
     #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
echo "I am using the command line!" | wc -c
     #+end_src

     #+RESULTS: d566d5ac-7382-4db1-a1cf-3268defa4796
     : 29
*** 管道用于筛选
    #+NAME: 2eb6a29f-9a9b-4db6-a763-1d7519efe5e3
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 5
    #+end_src

    #+RESULTS: 2eb6a29f-9a9b-4db6-a763-1d7519efe5e3
    : 1
    : 2
    : 3
    : 4
    : 5
    #+NAME: f99e0092-be42-49b9-9f18-b1afaff9e175
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 30 | grep 7
    #+end_src

    #+RESULTS: f99e0092-be42-49b9-9f18-b1afaff9e175
    : 7
    : 17
    : 27
    #+NAME: 9aa351f1-9fd2-47b8-8a6a-016c14ecbbe4
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 100 | grep 7 | wc -c
    #+end_src

    #+RESULTS: 9aa351f1-9fd2-47b8-8a6a-016c14ecbbe4
    : 56
*** 保存管道的中间结果
    - =tee=
      #+NAME: ddbf382b-0914-489a-b138-bcc7d6a5fb11
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        seq 100 | grep 7 | tee number-seven.txt | wc -c
      #+end_src

      #+RESULTS: ddbf382b-0914-489a-b138-bcc7d6a5fb11
      : 56

      #+NAME: a3b9a60c-9492-4324-82b9-018be204f445
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        cat number-seven.txt
      #+end_src

      #+RESULTS: a3b9a60c-9492-4324-82b9-018be204f445
      #+begin_example
      7
      17
      27
      37
      47
      57
      67
      70
      71
      72
      73
      74
      75
      76
      77
      78
      79
      87
      97
      #+end_example

*** 重定向
    - 标准输入和输出都可以被重定向到文件
      #+NAME: 183678c5-7f3c-414e-b0a4-7499a6a3ec2c
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 100 > s100
cat s100 | head
      #+end_src

      #+RESULTS: 183678c5-7f3c-414e-b0a4-7499a6a3ec2c
      #+begin_example
      1
      2
      3
      4
      5
      6
      7
      8
      9
      10
      #+end_example
      #+NAME: 6b330a4d-e274-4144-a7b9-894f85e29d44
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
wc -l < s100
      #+end_src

      #+RESULTS: 6b330a4d-e274-4144-a7b9-894f85e29d44
      : 100
*** 自由管道 FIFO named pipe
    #+NAME: ffe09bc3-7c05-4f65-bd78-2903f5bd432a
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      mkfifo filter.pipe
      seq 100 > filter.pipe &
      grep 7 < filter.pipe
    #+end_src

    #+RESULTS: ffe09bc3-7c05-4f65-bd78-2903f5bd432a
    #+begin_example
    [1] 42881
    7
    17
    27
    37
    47
    57
    67
    70
    71
    72
    73
    74
    75
    76
    77
    78
    79
    87
    97
    [1]+  Done                    seq 100 > filter.pipe
    #+end_example
*** 任务控制
    - bash 环境中 =&= 代表置于后台运行。
      #+NAME: 9ae42332-2c50-45d7-83fa-e4e32a4ed0f9
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        sleep 1m &
        sleep 2m &
        jobs
      #+end_src

      #+RESULTS: 9ae42332-2c50-45d7-83fa-e4e32a4ed0f9
      : [1] 43068
      : [2] 43069
      : [1]-  Running                 sleep 1m &
      : [2]+  Running                 sleep 2m &

    - =fg= 将任务拉至前台
    - =bg= 将任务转至后台
    - =kill= 将任务终结
    - =^z= （Ctrl-z），挂起前台任务
    - =^c= 终结前台任务
*** 计算器的四种写法
    - =awk= 派，使用 =awk= 语言
      #+NAME: ef584cec-3231-4b6d-91cc-051abb31e987
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
cat s100 | awk '{total+=$NF} END {print total}'
      #+end_src

      #+RESULTS: ef584cec-3231-4b6d-91cc-051abb31e987
      : 5050

    - =Python= 派？Python 无法写成一行
    - =paste= 派
      #+NAME: e31e35fa-c7ac-4b92-b0fe-485c113bde2e
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        cat s100 | paste -s -d +
        cat s100 | paste -s -d + | bc
      #+end_src

      #+RESULTS: e31e35fa-c7ac-4b92-b0fe-485c113bde2e
      : 1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50+51+52+53+54+55+56+57+58+59+60+61+62+63+64+65+66+67+68+69+70+71+72+73+74+75+76+77+78+79+80+81+82+83+84+85+86+87+88+89+90+91+92+93+94+95+96+97+98+99+100
      : 5050
*** 帮助
    - manual page =manpage=
      #+NAME: b776910b-d166-4fd8-bf31-c75374edb0f7
      #+begin_src bash
      man cat
      man paste
      #+end_src
      - Emacs =M-x woman=
    - info page
      #+begin_src bash
      info cat
      info paste
      #+end_src
      - Emacs =C-h i=
    - 命令 =--help= =-h=
*** 帮助（二）
      #+NAME: 7976d487-5683-4434-9f2a-fdefd9d69586
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        uname --help
      #+end_src

      #+RESULTS: 7976d487-5683-4434-9f2a-fdefd9d69586
      #+begin_example
      Usage: uname [OPTION]...
      Print certain system information.  With no OPTION, same as -s.

        -a, --all                print all information, in the following order,
                                   except omit -p and -i if unknown:
        -s, --kernel-name        print the kernel name
        -n, --nodename           print the network node hostname
        -r, --kernel-release     print the kernel release
        -v, --kernel-version     print the kernel version
        -m, --machine            print the machine hardware name
        -p, --processor          print the processor type (non-portable)
        -i, --hardware-platform  print the hardware platform (non-portable)
        -o, --operating-system   print the operating system
            --help     display this help and exit
            --version  output version information and exit

      GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
      Full documentation <https://www.gnu.org/software/coreutils/uname>
      or available locally via: info '(coreutils) uname invocation'
      #+end_example
** 命令巡礼
*** 本机信息
    #+NAME: 0a220ee3-2cd4-49a5-a03f-63f72bcc1ad6
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      hostname
      uname -a
    #+end_src

    #+RESULTS: 0a220ee3-2cd4-49a5-a03f-63f72bcc1ad6
    : dpcg
    : Linux dpcg 5.10.8-gentoo-x86_64 #1 SMP Sun Aug 15 14:46:49 CST 2021 x86_64 AMD EPYC 7742 64-Core Processor AuthenticAMD GNU/Linux

    #+NAME: 1d5dd825-a10e-47db-8a79-3863b8ece63c
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      id
      date
    #+end_src

    #+RESULTS: 1d5dd825-a10e-47db-8a79-3863b8ece63c
    : uid=1003(xubd) gid=1003(xubd) groups=1003(xubd),10(wheel),103(vboxusers),250(portage),999(xpra),1001(astrotools)
    : Mon Jul 25 10:53:06 AM CST 2022
*** 本机信息
    #+NAME: 00f33dbd-f018-4d4c-a07a-d1fd175b4039
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      uptime
      dmesg | tail
    #+end_src

    #+RESULTS: 00f33dbd-f018-4d4c-a07a-d1fd175b4039
    #+begin_example
     10:53:35 up 86 days, 23:32,  7 users,  load average: 1.05, 0.59, 0.36
    [6943834.870848] nfs: server jpd not responding, timed out
    [6943847.158500] nfs: server jpd not responding, timed out
    [6943852.790312] nfs: server jpd not responding, timed out
    [6943871.733748] nfs: server jpd not responding, timed out
    [6943888.645236] nfs: server jpd not responding, timed out
    [6943894.261019] nfs: server jpd not responding, timed out
    [6943900.404864] nfs: server jpd not responding, timed out
    [6943906.420662] nfs: server jpd not responding, timed out
    [7345744.319918] xpra[197935]: segfault at 1 ip 00007f687e955f89 sp 00007fff68363050 error 4 in libgdk-3.so.0.2404.26[7f687e901000+5d000]
    [7345744.319934] Code: 00 00 48 89 44 24 08 31 c0 e8 53 be fc ff 48 85 c0 74 1d 0f b6 50 4c 66 81 e2 fd 00 66 83 fa 01 75 0e 48 8b 50 18 48 8b 42 28 <f6> 40 01 80 75 21 48 8b 44 24 08 64 48 2b 04 25 28 00 00 00 75 5f
    #+end_example
*** 日常
    - 创建空文件
      #+NAME: 3fbe80b5-b9c3-4839-ba84-0c96e6429dff
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        touch nf
        ls -l nf
      #+end_src

      #+RESULTS: 3fbe80b5-b9c3-4839-ba84-0c96e6429dff
      : -rw-r--r-- 1 xubd xubd 0 Jul 25 11:01 nf

    - 输出信息
      #+NAME: 38d52f35-c2a2-448c-82d8-b661677b6e26
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        echo "Hi!"
      #+end_src

      #+RESULTS: 38d52f35-c2a2-448c-82d8-b661677b6e26
      : Hi!
*** =cut=
*** 文件信息
    - 寻找 =dev/waveform-compress= 路径之下所有 =R= 程序文件
      #+NAME: 1f94709e-b060-4fd0-9c26-57ff71d1ff68
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        find dev/waveform-compress -name "*.R"
      #+end_src

      #+RESULTS: 1f94709e-b060-4fd0-9c26-57ff71d1ff68
      : dev/waveform-compress/compress_comp.R
      : dev/waveform-compress/compress_core.R
      : dev/waveform-compress/compress_one.R
      : dev/waveform-compress/getH.R
      : dev/waveform-compress/wdlib.R

    - 识别文件类型
      #+NAME: f3214c4d-5a3e-462d-ad4d-cc837ceafcf4
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        file dev/waveform-compress/compress_one.R
      #+end_src

      #+RESULTS: f3214c4d-5a3e-462d-ad4d-cc837ceafcf4
      : dev/waveform-compress/compress_one.R: a /usr/bin/env Rscript script, ASCII text executable

** 通配符
*** 定义
- 通配符可以按规则匹配，用于构造简单匹配模式

  - =*= 匹配任意多个任意字符
  - =?= 匹配一个任意字符

    #+NAME: 5098a713-e3cf-4024-aba9-5bb45bb6de63
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      cd physics_data
      ls *.html
    #+end_src

    #+RESULTS: 5098a713-e3cf-4024-aba9-5bb45bb6de63
    : Command-Line.slides.html    Python-Basics.slides.html
    : Data-Formats.slides.html    Python-Constructs.slides.html
    : Data-Frame-RPy.slides.html  Python-Functions.slides.html
    : Data-Frame.slides.html	    Python-Modules.slides.html
    : Pandas-RDB.html		    Python-SQLite.slides.html
    : Pandas-RDB.slides.html	    Shell-Scripts.slides.html
    #+NAME: b305b3c5-055b-4950-bbad-4db85e9683d7
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      echo *.html
    #+end_src

    #+RESULTS: b305b3c5-055b-4950-bbad-4db85e9683d7
    : Command-Line.slides.html Data-Formats.slides.html Data-Frame-RPy.slides.html Data-Frame.slides.html Pandas-RDB.html Pandas-RDB.slides.html Python-Basics.slides.html Python-Constructs.slides.html Python-Functions.slides.html Python-Modules.slides.html Python-SQLite.slides.html Shell-Scripts.slides.html
*** 例子
    #+NAME: cbc4c3ba-763e-4499-8297-f11dc553daa1
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      ls Python-*.html
    #+end_src

    #+RESULTS: cbc4c3ba-763e-4499-8297-f11dc553daa1
    : Python-Basics.slides.html      Python-Modules.slides.html
    : Python-Constructs.slides.html  Python-SQLite.slides.html
    : Python-Functions.slides.html
    #+NAME: 45e152a5-c5a2-4cfc-91a1-6a7731eebcba
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      ls *.?pynb
    #+end_src

    #+RESULTS: 45e152a5-c5a2-4cfc-91a1-6a7731eebcba
    #+begin_example
    Command-Line.ipynb	   Pandas-RDB.ipynb
    Data-Formats.ipynb	   Python-Basics.ipynb
    DataFrame.ipynb		   Python-Constructs_Functions.ipynb
    Data-Frame-RPy.ipynb	   Python-Functions.ipynb
    GLM.ipynb		   Python-IO_Survival.ipynb
    GLM-Python.ipynb	   Python-SQLite.ipynb
    LIGO-intro.ipynb	   Relational-Algebra.ipynb
    LOSC_Event_tutorial.ipynb  Relational-SQL.ipynb
    Make-Pipeline.ipynb	   Shell-Practice.ipynb
    Merge-GroupBy.ipynb	   Shell-Scripts.ipynb
    NumPy.ipynb		   Visualization.ipynb
    NumPy-SciPy.ipynb
    #+end_example
** bash 的运行模式
*** 交互模式
    - +REPL+
**** 脚本模式
     - 把命令集合起来，逐条执行
     - 一边文件名以 =.sh= 结尾
       #+NAME: 0812dcd3-dc3e-4b78-8a08-f278919efd47
       #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
         echo "cat s100 | paste -s -d + | bc" > add-up-100.sh
         bash add-up-100.sh
       #+end_src

       #+RESULTS: 0812dcd3-dc3e-4b78-8a08-f278919efd47
       : 5050
*** 让脚本可执行
    - 在第一行填加脚本解释器 =#!/bin/bash= ，告知内核本脚本要由 =/bin/bash= 解释执行。 “#!”也称为“shebang”，意思是“sharp”（#）和“bang”（!）。
       #+NAME: b8f6cc07-2ac0-46b2-9ae4-1df3582ef24a
       #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
         sed '1i#!/bin/bash' -i add-up-100.sh
         cat add-up-100.sh
       #+end_src

       #+RESULTS: b8f6cc07-2ac0-46b2-9ae4-1df3582ef24a
       : #!/bin/bash
       : cat s100 | paste -s -d + | bc

    - 赋予可执行权限
      #+NAME: 2ee02d17-4049-4983-85c5-4a2522630c9a
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        chmod +x add-up-100.sh
        ./add-up-100.sh
      #+end_src

      #+RESULTS: 2ee02d17-4049-4983-85c5-4a2522630c9a
      : 5050

** 娱乐命令
*** =sl=
    #+NAME: 442a3502-6826-45a2-9b22-f2e3591f6295
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      sl
    #+end_src

    #+RESULTS: 442a3502-6826-45a2-9b22-f2e3591f6295
    : bash: sl: command not found
    : 
    :
    
    #+attr_latex: :height 4cm
    [[./fig/question.jpeg]]

    #+begin_src bash
      apt install sl
    #+end_src
*** =matrix= 可操作动画
    - 安装
      #+begin_src bash
apt install cmatrix
      #+end_src
    - 文档
      #+begin_src bash 
man cmatrix
      #+end_src
    
*** ASCII Art
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install sysvbanner bsdgames
    #+end_src
    - =worm= 贪食蛇
    - =worms= 模拟蚯蚓
      #+NAME: 9e7ce14a-c47d-409c-9e0e-9c7b99ab2f6a
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
banner physics
      #+end_src

      #+RESULTS: 9e7ce14a-c47d-409c-9e0e-9c7b99ab2f6a
      : 
      : ######   #     #  #     #   #####   ###   #####    #####   
      : #     #  #     #   #   #   #     #   #   #     #  #     #  
      : #     #  #     #    # #    #         #   #        #        
      : ######   #######     #      #####    #   #         #####   
      : #        #     #     #           #   #   #              #  
      : #        #     #     #     #     #   #   #     #  #     #  
      : #        #     #     #      #####   ###   #####    #####   
      :
*** ASCII Art: cowsay
    #+begin_src bash
      apt install cowsay-off
    #+end_src
    #+NAME: 2efb8f5c-da06-4d28-b427-eb05496449ce
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      cowsay -e xx -T W "parity?"
    #+end_src

    #+RESULTS: 2efb8f5c-da06-4d28-b427-eb05496449ce
    :  _________ 
    : < parity? >
    :  --------- 
    :         \   ^__^
    :          \  (xx)\_______
    :             (__)\       )\/\
    :              W ||----w |
    :                 ||     ||

*** cowsay II
    #+NAME: 5ee19ec1-8504-4460-91ab-443d95b7b770
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      cowsay -f meow "parity?"
    #+end_src

    #+RESULTS: 5ee19ec1-8504-4460-91ab-443d95b7b770
    #+begin_example
     _________ 
    < parity? >
     --------- 
      \
       \ ,   _ ___.--'''`--''//-,-_--_.
          \`"' ` || \\ \ \\/ / // / ,-\\`,_
         /'`  \ \ || Y  | \|/ / // / - |__ `-,
        /@"\  ` \ `\ |  | ||/ // | \/  \  `-._`-,_.,
       /  _.-. `.-\,___/\ _/|_/_\_\/|_/ |     `-._._)
       `-'``/  /  |  // \__/\__  /  \__/ \
            `-'  /-\/  | -|   \__ \   |-' |
              __/\ / _/ \/ __,-'   ) ,' _|'
             (((__/(((_.' ((___..-'((__,'
    #+end_example

    - 其它动物
    #+NAME: 1de62f1a-cc16-4d51-bef2-966447ca14f2
    #+begin_src bash
      ls /usr/share/cowsay/cows
    #+end_src

*** 管道练习
    #+begin_src bash
      apt install fortune-zh lolcat
    #+end_src
    #+begin_src bash
fortune | cowsay | lolcat -a
    #+end_src

    #+RESULTS:
    #+begin_example
 ___________________________________________________________________
/ 谷神不死，是谓玄牝。 玄牝之门，是谓天地根。 绵绵若存，用之不勤。  \
\ --《道德经》                                              /
 -------------------------------------------------------------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
    #+end_example
*** ASCII Art Anime
    #+begin_src bash
      apt install bb
      bb
    #+end_src
*** ASCII Art color Anime
    #+begin_src bash
      apt install caca-utils mpv
      cacafire
    #+end_src

    #+begin_src bash
      mpv "http://hep.tsinghua.edu.cn/~orv/teaching/Yuki_Installs_Gentoo.mp4" -vo caca
    #+end_src
*** 再来一打
    - 小玩具类
    #+begin_src bash
apt-cache depends games-toys 
    #+end_src
    - 所有类
    #+begin_src bash
apt-cache depends games-all
    #+end_src
    - 欢迎大家以 merge request 的形式补充更多的游戏
      - +尤其是能在校园网内联网的！+
* 第三周第二天
  :PROPERTIES:
  :EXPORT_FILE_NAME: p9
  :EXPORT_BEAMER_HEADER+: \title{GNU Make 的数据生产线}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-07-26 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习与提示
*** 软件准备
    - 带 Scheme 语言扩展的 GNU Make
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install make-guile make-doc guile-3.0
    #+end_src
*** 命令行
    - 命令行操作系统外壳 shell 的一种，介于内核 kernel 与用户程序之间。
    - 最佳工具：调度用户程序、管理文件。
    - 研发门槛低：输入命令的过程中，就随手写了新程序。
    - =bash= GNU Bourne-Again SHell 提供最流行的强大命令行环境
      - 五类命令
      - 标准输入输出、管道
** 任务流水线
*** 批量处理海量数据
    #+BEGIN_SRC dot :file ./multi-driver.pdf
      digraph python {
      rankdir="LR";

      I [label = CSV]
      I1 [label = "CSV\n×100"]
      I -> P [label = 数据输入]
      I1 -> P
      P [label = 程序1, shape = box]
      O [label = HDF5]
      O1 [label = "HDF5\n×100"]
      P -> O [label = 数据输出]
      P -> O1
      O1 -> Q
      O -> Q [label = 数据输入]
      Q [label = 程序2, shape = box]
      Q -> F
      F [label = 结果图]
      Q -> F1
      F1 [label = "结果图\n×100"]
      R [label = 程序3, shape = box]
      O -> R
      O1 -> R
      R -> G
      G [label = "汇总图"]
      }
    #+END_SRC

    #+attr_latex: :height 4cm
    #+RESULTS:
    [[file:./multi-driver.pdf]]
    
**** 命令行探索之后，要将数据处理方法自动化
     - 实验要调用很多命令和程序
       - 重复运行，控制变量：以不同条件多次测量，探索规律
     - 处理很多数据，有很多中间结果，依赖关系复杂
     - 程序有更新怎么办？数据有更新怎么办？
*** 数据流水线的构造目标
**** _复现_ 原则的要求                                       :B_exampleblock:
     :PROPERTIES:
     :BEAMER_env: exampleblock
     :END:
     要记录下来以什么样的顺序和参数运行什么命令，执行什么程序。
**** 思路和要点
    - 把流程系统化成输入、输出与过程三要素。
      - 而向数据编程，data-driven programming
    - 系统表达输入数据、输出数据和中间结果的依赖关系，成为“可执行的说明文档”
    - 高效执行，包括并行处理和整合超级计算机等。
    - 错误恢复
      - 修正错误后，可以从最后一步正确的数据开始继续执行。
** GNU Make
*** Make 是最佳工具
    - =make= 工具已经有 40 多年的历史，最初用来管理 C 语言程序的编译。
      - 根据依赖关系决定命令执行顺序
    - =GNU make= 是 =GNU= 运动中，对 =make= 进行的扩展，更适合管理数据
      - 与 =BSD make= 有区别，在 macOS 环境里请配置 GNU 环境，使用 =gmake= 。
        #+NAME: 80cfe7aa-1475-486b-840d-d8b010e9f7aa
      - 版本 \( \ge 4.3 \) 支持 _多目标规则_
        #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
make --version
        #+end_src

        #+RESULTS: 80cfe7aa-1475-486b-840d-d8b010e9f7aa
        : GNU Make 4.3
        : Built for x86_64-pc-linux-gnu
        : Copyright (C) 1988-2020 Free Software Foundation, Inc.
        : License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
        : This is free software: you are free to change and redistribute it.
        : There is NO WARRANTY, to the extent permitted by law.

**** 作用
     1. 实现 _复现_ 要求
     2. 管理程序运行，在超级计算机上运行
     3. 从错误中恢复
*** Make 要素
     - =make-guile= 在 =GNU make= 的基础上嵌入了 =GNU guile= \textipa{[g2Il]} 解释器支持 =scheme= 语言。
     - =scheme= 语言是 =LISP= 语言的一支，是历史悠久的人工智能语言。
       - =LISP= 与 =fortran= 是最早的高级编程语言，都出现在 1960 年代。

    - 文档
      #+BEGIN_SRC bash
 info make     
 man make
      #+END_SRC
     
    - 基本语法单元：清晰写明输入数据，输出数据和计算方法

      #+BEGIN_SRC makefile -i
target: source
	program source target # 必须TAB 起始，记录如何做
      #+END_SRC
**** 参考书
     John Graham Cumming, The GNU Make Book

** 变量
*** 变量取值
      #+BEGIN_SRC makefile -i
a:=1 # eager evaluation (= 代替 := 时是 lazy evaluation)
$(info $(a))
      #+END_SRC

      - 调用时使用 =$( )= ， =$(info TEXT)= 输出 =TEXT=
    - _一次_ 原则，避免重复
      - 特殊变量： =$^= 输入数据、 =$@= 输出数据。
      #+BEGIN_SRC makefile -i
target: source
	program source target #如何做
	program $^ $@ #如何做
      #+END_SRC

      #+BEGIN_SRC makefile -i
target: source1 source2 source3
	program $< --reference $(word 2,$^) \
		--location $(word 3,$^) -o $@
      #+END_SRC
    - =$(word N,TEXT)= 是函数：返回 =TEXT= 中的第 =N= 个词，按空格分隔
** 例子
*** 生成含有 1 到 100 数字的文件
    - 创建 =Makefile= 文件
    # /ssh:dpcg:/home/xubd/Makefile
    #+name: make0
    #+begin_src makefile -i :tangle no
numbers.csv:
	seq 100 > $@
    #+end_src
    - 到 =Makefile= 所在的文件夹中执行
    #+NAME: 56a58dfd-42bc-48b4-b415-89838a12143f
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      make numbers.csv
    #+end_src

    #+RESULTS: 56a58dfd-42bc-48b4-b415-89838a12143f
    : seq 100 > numbers.csv

    #+NAME: e81a9752-62e8-463d-9afb-936161fd398e
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      cat numbers.csv | wc -l
    #+end_src

    #+RESULTS: e81a9752-62e8-463d-9afb-936161fd398e
    : 100
    - 再执行时， =make= 会判断是否还有必要
    #+NAME: f342c45a-2193-4370-bf55-e3239934e885
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
        make numbers.csv
    #+end_src

    #+RESULTS: f342c45a-2193-4370-bf55-e3239934e885
    : make: 'numbers.csv' is up to date.
*** 加入求和规则
    # /ssh:dpcg:/home/xubd/Makefile
    #+name: make1
    #+begin_src makefile -i :tangle
total: numbers.csv
	paste -s -d + < $^ | bc > $@
    #+end_src

    #+NAME: 7f5abc49-f1af-4408-b8df-8113a6074674
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
make total
    #+end_src

    #+RESULTS: 7f5abc49-f1af-4408-b8df-8113a6074674
    : paste -s -d + < numbers.csv | bc > total

    - 如果第一步 =numbers.csv= 不存在， =make= 会自动生成它
    #+NAME: b8a3e0f6-d50c-4d11-abaa-848cf263f231
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      rm total numbers.csv
      make total
    #+end_src

    #+RESULTS: b8a3e0f6-d50c-4d11-abaa-848cf263f231
    : seq 100 > numbers.csv
    : paste -s -d + < numbers.csv | bc > total
    - 一次原则：只必要地写两处 =numbers.csv= 防止更新时造成不一致
*** 进阶：暗含循环
**** g                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.499
     :END:
         #+BEGIN_SRC dot :file ./sum-prod.pdf
           digraph python {
           rankdir="LR";

           node [shape=box]
           I [label = "numbers-0.csv\n1~100"]
           I1 [label = "numbers-1.csv\n101~200"]
           I2 [label = "numbers-2.csv\n201~300"]
           I -> P
           I1 -> P1
           I2 -> P2
           P [label = "total-0"]
           P1 [label = "total-1"]
           P2 [label = "total-2"]
           P -> S
           P1 -> S
           P2 -> S
           S [label = prod]
           }
     #+END_SRC
     #+attr_latex: :height 5cm
     #+RESULTS:
     [[file:./sum-prod.pdf]]
**** t                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:
     #+begin_src makefile -i
numbers-0.csv:
	seq 100 > $@
numbers-1.csv:
	seq 101 200 > $@
numbers-2.csv:
	seq 201 300 > $@
total-0: numbers-0.csv
	paste -s -d + < $^ | bc > $@
total-1: numbers-1.csv
	paste -s -d + < $^ | bc > $@
total-2: numbers-2.csv
	paste -s -d + < $^ | bc > $@
prod: total-0 total-1 total-2
	cat $^ | paste -s -d '*' | bc > $@
     #+end_src
     - 召唤一次原则！
     - 循环程序结构是共通的。
** 通配符与替换
*** 一般匹配关系 pattern
    - 处理 *.h5 文件，生成对应文件名的 =s/.h5/.png= 图形。
      #+BEGIN_SRC makefile -i
filelist:=x.h5 y.h5 z.h5
all: $(filelist:%.h5=%.png)

%.png: %.h5
	./plot-celestial.py $^ -o $@
      #+END_SRC
**** 说明
    - =%= 是 GNU Make 的通配符，用于替代任意字符串
    - =$(filelist:%.h5=%.png)= 是 =$(patsubst P,R,TEXT)= 的简写。
      - 意为在 =$(filelist)= 中把符合 =P= (=%.h5=) 的部分替换成 =R= (=%.png=)
      - 有共同前缀时，可进一步简写为
        #+begin_example
          $(filelist:.h5=.png)
        #+end_example
    - 在执行规则中， =%.png: %.h5= 定义任意 =png= 都由相应的 =h5= 文件生成。
*** 暗含循环
    - Makefile 是函数式编程 Functional Programming 的语言。
    - 不再关注“执行什么操作”，而是关注“输入到输出的映射”。
      - 类比：Python 的 =map()= ， 迭代器
    #+begin_src makefile -i :tangle /ssh:dpcg:/home/xubd/Makefile
# 生成 numbers-N.csv，包含 N*100+1 到 (N+1)*100 的数字
numbers-%.csv:
	seq $(guile (+ 1 (* $* 100))) $(guile (* 100 (+ $* 1))) > $@
# 分别求和
total-%: numbers-%.csv
	paste -s -d + < $^ | bc > $@
# 求积
prod: total-0 total-1 total-2
	cat $^ | paste -s -d '*' | bc > $@
    #+end_src
    - 循环从 =prod: total-0 total-1 total-2= 构造，由数据驱动
*** 暗含循环（二）
    #+NAME: 02719b16-849a-45fe-9c1b-a60d1da03d28
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
make prod
    #+end_src

    #+RESULTS: 02719b16-849a-45fe-9c1b-a60d1da03d28
    : seq 1 100 > numbers-0.csv
    : paste -s -d + < numbers-0.csv | bc > total-0
    : seq 101 200 > numbers-1.csv
    : paste -s -d + < numbers-1.csv | bc > total-1
    : seq 201 300 > numbers-2.csv
    : paste -s -d + < numbers-2.csv | bc > total-2
    : cat total-0 total-1 total-2 | paste -s -d '*' | bc > prod
    : rm numbers-0.csv numbers-2.csv numbers-1.csv
    - 可以自动补上失去的文件，只执行需要的部分
    #+NAME: 1ef52832-342e-47d9-a58b-76fefbeb71f4
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      rm total-2
      make prod
    #+end_src

    #+RESULTS: 1ef52832-342e-47d9-a58b-76fefbeb71f4
    : seq 201 300 > numbers-2.csv
    : paste -s -d + < numbers-2.csv | bc > total-2
    : cat total-0 total-1 total-2 | paste -s -d '*' | bc > prod
    : rm numbers-2.csv
*** 暗含循环：用 shell 命令替换 guile
    #+begin_src makefile -i
# 调用 shell 命令方案
numbers-%.csv: 
	seq $(shell echo "$* * 100 + 1" | bc ) $(shell echo "($* + 1) * 100" | bc ) > $@	
    #+end_src
** 调用命令
*** 继续深化落实一次原则
    - Makefile 里可以调用 shell 命令，将其标准输出作为值。

    #+BEGIN_SRC makefile -i
sequence:=$(shell seq -w 00 99)
file_list:=$(shell find . -name "*.h5")
    #+END_SRC
    - 构造 =total-0 total-1 total-2=
    #+begin_src makefile -i
seqs:=$(shell seq 0 2)
totals:=$(seqs:%=total-%)
    #+end_src
**** 内嵌 scheme
     - 最佳工具原则： =$(shell )= 和 =$(guile )= 哪个简洁用哪个。 =iota= \textipa{[2I"9Ut@]}
     #+begin_src makefile -i
seqs:=$(guile (iota 3))
     #+end_src
     
*** 再次尝试
    - 直接来 10 个
    #+begin_src makefile -i
seqs:=$(guile (iota 10))
totals:=$(seqs:%=total-%)

# 生成 numbers-N.csv，包含 N*100+1 到 (N+1)*100 的数字
numbers-%.csv:
	seq $(guile (+ 1 (* $* 100))) $(guile (* 100 (+ $* 1))) > $@
# 分别求和
total-%: numbers-%.csv
	paste -s -d + < $^ | bc > $@
# 求积
prod: $(totals)
	cat $^ | paste -s -d '*' | bc > $@
    #+end_src

*** 运行
    #+NAME: e140bf6c-0d53-48f2-a4a4-45487066e301
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
make prod
    #+end_src

    #+RESULTS: e140bf6c-0d53-48f2-a4a4-45487066e301
    #+begin_example
    seq 301 400 > numbers-3.csv
    paste -s -d + < numbers-3.csv | bc > total-3
    seq 401 500 > numbers-4.csv
    paste -s -d + < numbers-4.csv | bc > total-4
    seq 501 600 > numbers-5.csv
    paste -s -d + < numbers-5.csv | bc > total-5
    seq 601 700 > numbers-6.csv
    paste -s -d + < numbers-6.csv | bc > total-6
    seq 701 800 > numbers-7.csv
    paste -s -d + < numbers-7.csv | bc > total-7
    seq 801 900 > numbers-8.csv
    paste -s -d + < numbers-8.csv | bc > total-8
    seq 901 1000 > numbers-9.csv
    paste -s -d + < numbers-9.csv | bc > total-9
    cat total-0 total-1 total-2 total-3 total-4 total-5 total-6 total-7 total-8 total-9 | paste -s -d '*' | bc > prod
    rm numbers-8.csv numbers-3.csv numbers-7.csv numbers-5.csv numbers-6.csv numbers-9.csv numbers-4.csv
    #+end_example
** Makefile 脚本
*** 选择结构
    #+begin_src makefile -i
a:=$(if CONDITION,THEN-PART[,ELSE-PART])
    #+end_src
    - 如果 CONDITION 成立，则取 THEN-PART。类比 Python
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      a = THEN-PART if CONDITION else ELSE-PART
    #+end_src
    - =$(or COND1,COND2)= =$(and COND1,COND2)= 用于逻辑运算

*** 循环结构与函数
    - 数据本身可以构造一重循环，当循环多于一重时，使用 =$(foreach )=
      #+BEGIN_SRC makefile -i
# radius list
rl:=$(shell seq -w 0.10 0.01 1.00)
profile:=$(foreach d,x y z,$(rl:%=1t_+%_$(d).h5))
$(info $(profile))
      #+END_SRC

      #+begin_example
1t_+0.10_x.h5 1t_+0.11_x.h5 1t_+0.12_x.h5 1t_+0.13_x.h5 ...
      #+end_example
    - Makefile 模版（起到“函数”复用的作用）由 =define= ... =endef= 定义，使用 =$(eval )= 执行。
      #+BEGIN_SRC makefile -i
define video
$(1)/%.avi: $(1)/%.mp4
	ffmpeg -i $$^ $$@
endef

$(eval $(foreach d,up down transverse,$(call video,$(d))))
      #+END_SRC
** 常见问题
*** 调试
    - Makefile 的调试器？ =remake= 可以试验。
    - 一般调试使用 =$(info )= 查看中间变量和结果
    - 不要把文件写得太长，太长时分成小文件，分成小单元调试
      - 多写多 bug 少写少 bug，不写无 bug
      - 推论：以最简洁的代码实现目的和四个原则
    #+begin_src makefile -i
include names.mk
include process.mk

.PHONY: all
all: step1 step2
    #+end_src
*** 赋值
    - “:=”是 eager evaluation，在被调用时，就把运算做完。
    - “=”是 lazy evaluation，在被使用时，才做运算。
      - 不同时节运算，可能有不同变量环境，可到不同的效果
*** 特殊目标
    - =.PHONY= 代表无对应文件的目标
      - 否则如果存在一个名为 =all= 那么 =make all= 就不会执行
      - GNU Make 默认执行第一个目标，可以把它定义为无对应文件的 =all=
    - =.DELETE_ON_ERROR= 如果出错就把坏文件删掉
    - =.SECONDARY= 保留中间结果

      #+BEGIN_SRC makefile -i
.PHONY: all
all: xxxx

# Delete partial files when the processes are killed.
.DELETE_ON_ERROR:
# Keep intermediate files around
.SECONDARY:
      #+END_SRC
*** 技巧
    - 并行计算 =make -j=
    - 把 =SHELL= 换成超算任务调度器 \to 超算并行计算
*** JUNO 真实世界例子
    - 用于数百 TB 蒙特卡罗数据生成的例子
     #+BEGIN_SRC makefile -i
# 1=model, 2=imh, 3=dist, 4=iter
define SN-tpl

output+=data/det/$(1)/$(2)/$(3)/ith/$(4).root

data/$(1)/$(2)/$(3)/%.root:
	./genSN.sh $(1) $(2) $(3) $$@

data/det/%/$(4).root: data/%.root
	./exeDet.sh $$^ $$@ $(4)
endef

$(eval $(foreach i,$(imod),$(foreach j,$(imh),\
	$(foreach k,$(dist),$(call SN-tpl,$(i),$(j),$(k),0))\
	$(foreach l,$(ip),$(call SN-tpl,$(i),$(j),10,$(l))))))

all: $(foreach i,$(ith),$(subst ith,$(i),$(output)))

# Delete partial files when the processes are killed.
.DELETE_ON_ERROR:
# Keep intermediate files around
.SECONDARY:

     #+END_SRC
     #+BEGIN_SRC makefile -i
# 1=model, 2=imh, 3=dist, 4=iter
define SN-tpl

output+=data/det/$(1)/$(2)/$(3)/ith/$(4).root

data/$(1)/$(2)/$(3)/%.root:
	./genSN.sh $(1) $(2) $(3) $$@

data/det/%/$(4).root: data/%.root
	./exeDet.sh $$^ $$@ $(4)
endef

$(eval $(foreach i,$(imod),$(foreach j,$(imh),\
	$(foreach k,$(dist),$(call SN-tpl,$(i),$(j),$(k),0))\
	$(foreach l,$(ip),$(call SN-tpl,$(i),$(j),10,$(l))))))

all: $(foreach i,$(ith),$(subst ith,$(i),$(output)))

# Delete partial files when the processes are killed.
.DELETE_ON_ERROR:
# Keep intermediate files around
.SECONDARY:

     #+END_SRC

*** 联合目标
   When 'make' builds any one of the grouped targets, it understands
that all the other targets in the group are also created as a result of
the invocation of the recipe.  Furthermore, if only some of the grouped
targets are out of date or missing 'make' will realize that running the
recipe will update all of the targets.

   As an example, this rule defines a grouped target:
   #+begin_src makefile -i
foo bar biz &: baz boz
	echo $^ > foo
	echo $^ > bar
	echo $^ > biz
   #+end_src

   During the execution of a grouped target's recipe, the automatic
variable '$@' is set to the name of the particular target in the group
which triggered the rule.  Caution must be used if relying on this
variable in the recipe of a grouped target rule.
    
*** Make 与 shell 的调用关系
    #+begin_src makefile -i
numbers-%.csv:
	seq $(shell echo "$* * 100 + 1" | bc ) $(shell echo "($* + 1) * 100" | bc ) > $@
    #+end_src
    - make 在 shell 中执行，make 通过 shell 执行流水线规则和取值
     #+BEGIN_SRC dot :file ./make-shell.pdf
       digraph python {
       rankdir="TB";

       node [shape=box]
       S [label = "shell\n执行 make"]
       S -> M
       M [label = Make]
       M -> E
       E [label = "$(shell ...)\n已扩展？", shape=diamond]
       S1 [label = "执行 shell 命令\n采集输出\n构造流水线规则"]
       S1 -> M
       {rank = same; S1; M;}
       E:w -> S1:s [label = 否]
       S2 [label = "调用 shell \n执行流水线规则"]
       E -> S2 [label = 是]
       }
     #+END_SRC
     #+attr_latex: :height 5cm
     #+RESULTS:
     [[file:./make-shell.pdf]]

* 第三周第三天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pa
  :EXPORT_BEAMER_HEADER+: \title{正则表达式}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-07-27 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习与提示
*** 软件准备
    - pcre2-utils :: Perl 正则表达式工具
    - libpcre2-dev :: Perl 正则表达式文档和开发工具
    - libregexp-debugger-perl :: 正则表达式调试器
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      # Debian/Ubuntu
      apt install pcre2-utils libpcre2-dev libregexp-debugger-perl
      # macOS
      brew install pcre2
    #+end_src
**** 素材文件准备
     #+NAME: 80b071f8-5c6f-489e-a71c-a03a4a41f60b
     #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
       wget "http://hep.tsinghua.edu.cn/~orv/pd/usr_share_doc_list.txt"
     #+end_src

     #+RESULTS: 80b071f8-5c6f-489e-a71c-a03a4a41f60b
     #+begin_example
     --2022-07-27 11:59:50--  http://hep.tsinghua.edu.cn/~orv/pd/usr_share_doc_list.txt
     Resolving hep.tsinghua.edu.cn... 101.6.6.219, 2402:f000:1:416:101:6:6:219
     Connecting to hep.tsinghua.edu.cn|101.6.6.219|:80... connected.
     HTTP request sent, awaiting response... 200 OK
     Length: 128653 (126K) [text/plain]
     Saving to: ‘usr_share_doc_list.txt’
     #+end_example
*** 系统配置文件素材
    #+NAME: cf8fb4f5-7ff1-4efe-a9bb-c30c76041522
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      wget "http://hep.tsinghua.edu.cn/~orv/pd/sources.list"
    #+end_src

    #+RESULTS: cf8fb4f5-7ff1-4efe-a9bb-c30c76041522
    #+begin_example
    --2022-07-27 12:21:55--  http://hep.tsinghua.edu.cn/~orv/pd/sources.list
    Resolving hep.tsinghua.edu.cn... 101.6.6.219, 2402:f000:1:416:101:6:6:219
    Connecting to hep.tsinghua.edu.cn|101.6.6.219|:80... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 1784 (1.7K)
    Saving to: ‘sources.list’

    
sources.list          0%[                    ]       0  --.-KB/s               
sources.list        100%[===================>]   1.74K  --.-KB/s    in 0s      

    2022-07-27 12:21:55 (200 MB/s) - ‘sources.list’ saved [1784/1784]

    #+end_example
*** HDF5 素材
    #+NAME: 121954c0-0fa6-4844-a7dd-3efb6d192657
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      wget "http://hep.tsinghua.edu.cn/~orv/pd/ser.h5"
    #+end_src

    #+RESULTS: 121954c0-0fa6-4844-a7dd-3efb6d192657
    #+begin_example
    --2022-07-27 13:06:55--  http://hep.tsinghua.edu.cn/~orv/pd/ser.h5
    Resolving hep.tsinghua.edu.cn... 101.6.6.219, 2402:f000:1:416:101:6:6:219
    Connecting to hep.tsinghua.edu.cn|101.6.6.219|:80... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 3648 (3.6K)
    Saving to: ‘ser.h5’

    
ser.h5                0%[                    ]       0  --.-KB/s               
ser.h5              100%[===================>]   3.56K  --.-KB/s    in 0s      

    2022-07-27 13:06:55 (301 MB/s) - ‘ser.h5’ saved [3648/3648]

    #+end_example

*** =make=
    - 数据流水线构建最佳工具。
      - 程序写得尽可能短，特定场景下 Python 之外的工具更能胜任。
      - 不要一切都用“我人生中掌握的第一门程序语言”实现。
    - 函数式编程：一切都是函数，从输入到输出的映射。
    - 数据驱动编程：循环是暗含的，只关注组成单元的处理。
    - =make= 与 =shell= 的调用关系。
    - =guile= 的 scheme 语言在 =make= 中的调用。
*** 字符搜索匹配
    #+NAME: 0897673d-6bd3-4d55-aa8f-508e629825ab
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      seq 50 | grep 7
    #+end_src

    #+RESULTS: 0897673d-6bd3-4d55-aa8f-508e629825ab
    : 7
    : 17
    : 27
    : 37
    : 47
**** 如何匹配更复杂的规律？
     - 正则表达式
     - 更高级的文件管理
     - 文件内容识别
*** 高级匹配
    - 所有以3结尾的两位数
    #+NAME: 8d196826-7dcf-44e0-929c-c9a946c8e709
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 50 | grep .3
    #+end_src

    #+RESULTS: 8d196826-7dcf-44e0-929c-c9a946c8e709
    : 13
    : 23
    : 33
    : 43

    - 23、233、2333、……
    #+NAME: 7c129466-c6e2-4537-9928-02ce7934c271
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 10000 | grep -E ^23+$
    #+end_src

    #+RESULTS: 7c129466-c6e2-4537-9928-02ce7934c271
    : 23
    : 233
    : 2333

** 正则表达式
*** Regular Expressions
- 多数情况下文本处理的 _最佳工具_
- 优秀工具的典范：
  1. 有严格的数学模型 -- 用户和开发者之间沟通容易
  2. 有标准或约定俗成的语法 -- 知识迁移
  3. 有广泛的实现 -- 学好正则表达式，走遍天下都不怕
  
- 实验物理用户：只要能写出正确的表达式，就可以使用高性能的正则表达式引擎。

**** 参考书
     - Jeffrey Friedl, Mastering Regular Expressions
     - Michael Sipser, Introduction to the Theory of Computation
*** 正则表达式的形式定义
    #+begin_export latex
设$\Sigma$是字母表，$A$和$B$是字母表$\Sigma$上的有限字符串的集合，我们定义：
\begin{itemize}
\item 并（Union）: $A\cup B=\{x\mid x\in A\text{ 或  }x\in B\}$
\item 连接（Concatenation）: $A. B=\{x.y\mid x\in A\text{ 且  }y\in B\}$
\item Kleene 星号（Kleene star）: $A^*=\bigcup_{k\geq 0} A^k = \bigcup_{k\geq 0}\{x_1x_2\ldots x_k\mid x_k\in A\}$，e.g.， $\{a,ab\}^*=\{\varepsilon,a,ab,aab,aba,aa,abab,aaa,aaab,\ldots\}$
\end{itemize}

$R$是正则表达式(Regular Expression，RE) ，若$R$通过以下归纳定义得到：
\begin{itemize}
\item $\{a\}$, $a\in \Sigma$，
\item $\{\varepsilon\}$，即空字符串（长度为0）的集合，
\item $\emptyset$ （空集）
\item 若$R_1$,$R_2$是RE，则$R_1\cup R_2$亦然 （对$\cup$运算封闭），
\item 若$R_1$,$R_2$是RE，则$R_1.R_2$亦然（对$.$运算封闭），
\item 若$R_1$是RE，则$(R_1)^*$亦然 （对$*$运算封闭）。
\end{itemize}
    #+end_export
*** 正则表达式的等价表述
    #+begin_export latex
    以下命题等价：
    \begin{itemize}
    \item $R$是正则表达式
    \item $R$是被有限自动机接受的语言
    \item $R$是被Chomsky的3-型文法生成的语言
    \end{itemize}
    \vspace{1cm}
    有限自动机$\mathcal{M}=(Q,\Sigma,\delta,q_0,F)$, 其中$Q$是有限的状态集，$\Sigma$是有限的字母表，$\delta:Q\times \Sigma\rightarrow \mathcal{P}(Q)$ 是状态转移关系，$q_0\in Q$是初始状态, $F\subset Q$是接受状态的集合。

    \vspace{0.5cm}
    3-型文法满足右线性或左线性。右线性的例子：
    $A\rightarrow w B$，$A\rightarrow w$，$A\rightarrow \varepsilon$，其中$A$，$B$表示非终结符号，$w$是终结符。
    #+end_export
*** 确定与非确定自动机
    #+attr_latex: :height 5cm
    [[./fig/com.png]]

    对于任意的非确定型自动机，存在与其等价的确定型自动机。即，任何被非确定型自动机接受的语言，都可以被某一个确定型自动机接受。
*** 例子
    - 字母表 $\Sigma=\{a,b\}$ 。非确定型有限自动机 $\mathcal{M}$ :
      #+attr_latex: :height 2.5cm
      [[./fig/nfa.png]]
    - 一个与 $\mathcal{M}$ 等价的确定型自动机：
      #+attr_latex: :height 2.5cm
      [[./fig/dfa.png]]
** 应用实例
*** 语法要素：类算术运算的组合规则
- 所有字符默认与自己匹配
- =.= 代表任意字符
- =^=, =$= 开始与结束
- =*= 任意重复
  - =+= 至少一次重复
  - =?= 0或1次
  - ={n,m}= 重复 n 至 m （包含）次
- =()= 组合
- =|= 或
- =[]= 字符集
  - =[0-9]=
  - =[a-zA-Z]=
  - =[^abc]=
- =\<=, =\>= 单词的开始和结束处的空白符
- =\b= 单词两边的空白符
- =\B= 非单词两边的空白符
*** 正则表达式流派
   - 基础正则表达式 :: Basic RE
     - =?= =+= ={= =|= =(= =)= 是字符本身，需要特殊含义得加上 =\= ，例如 =\?= =\+= 等
   - 扩展正则表达式 :: Extended RE
     - GNU 环境里与基础正则表达式功能完全一致，只是语法约定相反， =\?= =\+= 等代表 “?” 和 “+” 本身， =?= =+= 等有特殊含义。
   - Perl 正则表达式 :: Perl-Compatible RE
     - 与 Perl 5 语言正则表达式有同样功能
     - 超出有限状态自动机的功能：递归、条件、引用等
*** =grep=
    - 基本功能：检验输入的第一行是否与正则表达式匹配，若是则输出该行。
    - =egrep= 等价于 =grep -E= ，扩展正则表达式
    #+NAME: 2cad784c-bd9a-43de-9851-b4de14f37ff1
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      file $(which egrep)
    #+end_src

    #+RESULTS: 2cad784c-bd9a-43de-9851-b4de14f37ff1
    : /bin/egrep: POSIX shell script, ASCII text executable
    #+NAME: 4881f785-276a-446d-a2d7-2978fdf2021b
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      cat /bin/egrep
    #+end_src

    #+RESULTS: 4881f785-276a-446d-a2d7-2978fdf2021b
    : #!/bin/sh
    : exec /bin/grep -E "$@"

**** 文档
     - =man grep=
     - =info grep=
     - 源于 =ed= 的语法 =global/regular expression/print= \to =g/re/p=
*** 试验
    - =^=, =$= 开始与结束
    - =+= 至少一次重复
    - =?= 0或1次
    - =()= 组合

    #+NAME: aeb0d9c9-c9f2-4575-ab48-d5e2197aeb42
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 10000 | egrep ^2?3+$
    #+end_src

    #+RESULTS: aeb0d9c9-c9f2-4575-ab48-d5e2197aeb42
    : 3
    : 23
    : 33
    : 233
    : 333
    : 2333
    : 3333
    #+NAME: 81055a1a-444b-4ae9-9321-f94d2c5b1bf7
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 10000 | egrep '^(23)*$'
    #+end_src

    #+RESULTS: 81055a1a-444b-4ae9-9321-f94d2c5b1bf7
    : 23
    : 2323
*** 试验（二）
    #+NAME: 3886fe23-0a72-4ed4-bb94-f40c4849e6cd
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 10000 | egrep '^(23?)+$'
    #+end_src

    #+RESULTS: 3886fe23-0a72-4ed4-bb94-f40c4849e6cd
    #+begin_example
    2
    22
    23
    222
    223
    232
    2222
    2223
    2232
    2322
    2323
    #+end_example
    - 正则表达式写下了人类语言已经很难描述匹配的规则。
*** 试验（三）
    - =|= 或
    - =[]= =[0-9]= 字符集
    #+NAME: 28580be7-666d-40a3-9ddf-d3ac2fab69c7
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 10000 | egrep '^(2(3|4))+$'
    #+end_src

    #+RESULTS: 28580be7-666d-40a3-9ddf-d3ac2fab69c7
    : 23
    : 24
    : 2323
    : 2324
    : 2423
    : 2424
    #+NAME: 73f1761a-34dc-4a53-a3c6-3d1571511f15
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 10000 | egrep '^(23[3-6])+$'
    #+end_src

    #+RESULTS: 73f1761a-34dc-4a53-a3c6-3d1571511f15
    : 233
    : 234
    : 235
    : 236

*** 试验（四）
    - ={n,m}= 重复 n 至 m （包含）次
    #+NAME: 5b7e9160-3178-4451-9523-d56032d087ab
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq 1000000 | egrep '^23{2,4}$'
    #+end_src

    #+RESULTS: 5b7e9160-3178-4451-9523-d56032d087ab
    : 233
    : 2333
    : 23333

*** 更多字符集
- 在 =[ ]= 之内有效
  - =[:alpha:]= 字母
  - =[:digit:]= 数字
  - =[:alnum:]= 字母或数字
    - =\w= 与 =[[:alnum:]]= 同义， =\W= 与 =[^[:alnum:]]= 同义
  - =[:graph:]= 可见的字符，不包括空白
  - =[:lower:]= 小写字母
  - =[:print:]= 可见的字符和空白
  - =[:punct:]= 标点
  - =[:space:]= 空白符，包括 =\t= =\r= =\n=
    - =\s= 与 =[[:space:]]= 同义， =\S= 与 =[^[:space:]]= 同义
  - =[:upper:]= 大写字母
  - =[:xdigit:]= 十六进制数
** 文件名匹配练习
*** =tex=
    #+NAME: ad509f0a-98e3-4184-a05a-58dac76afbe6
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
grep tex usr_share_doc_list.txt | head
    #+end_src

    #+RESULTS: ad509f0a-98e3-4184-a05a-58dac76afbe6
    #+begin_example
    drwxr-xr-x  4 root root 4096 Feb  8  2021 auctex
    drwxr-xr-x  3 root root 4096 Feb  8  2021 chktex
    drwxr-xr-x  4 root root 4096 Feb  8  2021 dot2tex
    drwxr-xr-x  2 root root 4096 Feb  8  2021 fonts-texgyre
    drwxr-xr-x  2 root root 4096 Feb  8  2021 gettext
    drwxr-xr-x  2 root root 4096 Feb  8  2021 gettext-base
    drwxr-xr-x  2 root root 4096 Feb  8  2021 latex2rtf
    lrwxrwxrwx  1 root root   16 May 11  2016 latex-cjk-chinese -> latex-cjk-common
    drwxr-xr-x  5 root root 4096 Apr 14 15:46 latex-cjk-common
    drwxr-xr-x  3 root root 4096 Aug  8  2017 latex-mk
    #+end_example
*** 去掉与 \TeX 无关的项
    - 去掉 =text= =texgyre= \textipa{["dZ2I9, "g2I9]} =texinfo=
    #+NAME: 2ab7b4a1-7cac-478a-8d80-e3a0d3bc0520
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
egrep 'tex([^tgi]|$)' usr_share_doc_list.txt | head
    #+end_src

    #+RESULTS: 2ab7b4a1-7cac-478a-8d80-e3a0d3bc0520
    #+begin_example
    drwxr-xr-x  4 root root 4096 Feb  8  2021 auctex
    drwxr-xr-x  3 root root 4096 Feb  8  2021 chktex
    drwxr-xr-x  4 root root 4096 Feb  8  2021 dot2tex
    drwxr-xr-x  2 root root 4096 Feb  8  2021 latex2rtf
    lrwxrwxrwx  1 root root   16 May 11  2016 latex-cjk-chinese -> latex-cjk-common
    drwxr-xr-x  5 root root 4096 Apr 14 15:46 latex-cjk-common
    drwxr-xr-x  3 root root 4096 Aug  8  2017 latex-mk
    drwxr-xr-x  3 root root 4096 Feb  8  2021 latexmk
    drwxr-xr-x  2 root root 4096 Feb  8  2021 libpod-latex-perl
    drwxr-xr-x  2 root root 4096 Apr 14 15:44 libptexenc1
    #+end_example
*** 先有 tex 再有 latex
    #+NAME: 1b482f9b-8992-4a36-a0ec-37472f517611
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
egrep 'tex\S*latex' usr_share_doc_list.txt | head
    #+end_src

    #+RESULTS: 1b482f9b-8992-4a36-a0ec-37472f517611
    : drwxr-xr-x  2 root root 4096 Apr 14 15:45 texlive-latex-base
    : drwxr-xr-x  2 root root 4096 Apr 14 15:45 texlive-latex-extra
    : drwxr-xr-x  2 root root 4096 Apr 14 15:45 texlive-latex-recommended
*** tex 为单词的起始
    #+NAME: 47dcb1f1-1b2e-4665-84aa-8a71fef992d2
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
egrep '\btex' usr_share_doc_list.txt | head
    #+end_src

    #+RESULTS: 47dcb1f1-1b2e-4665-84aa-8a71fef992d2
    #+begin_example
    drwxr-xr-x  2 root root 4096 Feb  8  2021 fonts-texgyre
    drwxr-xr-x  2 root root 4096 Feb  8  2021 libdjvulibre-text
    drwxr-xr-x  2 root root 4096 Apr 14 15:44 tex-common
    drwxr-xr-x  2 root root 4096 Mar 24 11:19 tex-gyre
    drwxr-xr-x  3 root root 4096 Feb  8  2021 texinfo
    drwxr-xr-x  4 root root 4096 Apr 14 15:46 texlive-base
    drwxr-xr-x  2 root root 4096 Apr 14 15:45 texlive-bibtex-extra
    drwxr-xr-x  2 root root 4096 Apr 14 15:44 texlive-binaries
    drwxr-xr-x 25 root root 4096 Feb  8  2021 texlive-doc
    drwxr-xr-x  2 root root 4096 Apr 14 15:46 texlive-extra-utils
    #+end_example
*** 带有 python3 的
    #+NAME: 899a282d-342f-4569-88cd-1052d69fccb2
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
egrep '\<python3\>' usr_share_doc_list.txt | head
    #+end_src

    #+RESULTS: 899a282d-342f-4569-88cd-1052d69fccb2
    #+begin_example
    drwxr-xr-x  2 root root 4096 Apr 14 15:44 python3
    drwxr-xr-x  2 root root 4096 Apr 14 15:44 python3.9
    drwxr-xr-x  2 root root 4096 Apr 14 15:44 python3.9-minimal
    drwxr-xr-x  2 root root 4096 Feb  8  2021 python3-apt
    drwxr-xr-x  2 root root 4096 Feb  8  2021 python3-attr
    drwxr-xr-x  2 root root 4096 Feb  8  2021 python3-automat
    drwxr-xr-x  2 root root 4096 Feb  8  2021 python3-backcall
    drwxr-xr-x  2 root root 4096 Feb  8  2021 python3-bcrypt
    drwxr-xr-x  2 root root 4096 Feb  8  2021 python3-cairo
    drwxr-xr-x  2 root root 4096 Feb  8  2021 python3-certifi
    /bin/grep: write error: Broken pipe
    #+end_example
*** 恰好出现3次的字母数字
    #+NAME: 5c23c567-c8ea-422b-b38c-96e55783f073
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
egrep '\b[[:alnum:]]{3}\b' usr_share_doc_list.txt | head
    #+end_src

    #+RESULTS: 5c23c567-c8ea-422b-b38c-96e55783f073
    #+begin_example
    drwxr-xr-x  2 root root 4096 Aug  8  2017 abootimg
    drwxr-xr-x  2 root root 4096 Feb  8  2021 acl
    drwxr-xr-x  2 root root 4096 Jul  2  2019 acpi
    drwxr-xr-x  2 root root 4096 Feb  8  2021 adb
    drwxr-xr-x  3 root root 4096 Oct 12  2019 adduser
    drwxr-xr-x  2 root root 4096 Feb  8  2021 adwaita-icon-theme
    drwxr-xr-x  2 root root 4096 Jul  2  2019 alsa-oss
    drwxr-xr-x  6 root root 4096 Feb  8  2021 alsa-tools
    drwxr-xr-x  8 root root 4096 Feb  8  2021 alsa-tools-gui
    drwxr-xr-x  2 root root 4096 Feb  8  2021 alsa-utils
    /bin/grep: write error: Broken pipe
    #+end_example

** 流编辑器 sed
*** sed: stream editor
- =sed= 是 stream editor，在“流”上进行编辑
- 常用的操作是替换，可以使用正则表达式
  - 支持 Basic RE 和 Extended RE =-r=

**** 文档
     - =man sed=
     - =info sed=
     - 名字是 streamed =ed= ，前身是 `ed`
**** 替换
     #+NAME: e6a2719f-300f-463f-9749-696f54af1454
     #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
echo hello | sed 's/lo/do/'
     #+end_src

     #+RESULTS: e6a2719f-300f-463f-9749-696f54af1454
     : heldo
*** 生成 CSV
    - 把 9 处的“,”转为换行
    - =g= 代表全部替换
    #+NAME: 46623638-a91b-42dd-b24e-29a0b238e737
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      seq -s, -w 00 99 | sed 's/9,/9\n/g'
    #+end_src

    #+RESULTS: 46623638-a91b-42dd-b24e-29a0b238e737
    #+begin_example
    00,01,02,03,04,05,06,07,08,09
    10,11,12,13,14,15,16,17,18,19
    20,21,22,23,24,25,26,27,28,29
    30,31,32,33,34,35,36,37,38,39
    40,41,42,43,44,45,46,47,48,49
    50,51,52,53,54,55,56,57,58,59
    60,61,62,63,64,65,66,67,68,69
    70,71,72,73,74,75,76,77,78,79
    80,81,82,83,84,85,86,87,88,89
    90,91,92,93,94,95,96,97,98,99
    #+end_example
*** 生成 CSV （二）
    - 在 4 或 9 处换行
    - =\1= 代表第一个括号中的成分
    #+NAME: 0640d1a1-4cdf-43e5-84ce-55167de2afe2
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
seq -s, -w 00 99 | sed -r 's/([49]),/\1\n/g'
    #+end_src

    #+RESULTS: 0640d1a1-4cdf-43e5-84ce-55167de2afe2
    #+begin_example
    00,01,02,03,04
    05,06,07,08,09
    10,11,12,13,14
    15,16,17,18,19
    20,21,22,23,24
    25,26,27,28,29
    30,31,32,33,34
    35,36,37,38,39
    40,41,42,43,44
    45,46,47,48,49
    50,51,52,53,54
    55,56,57,58,59
    60,61,62,63,64
    65,66,67,68,69
    70,71,72,73,74
    75,76,77,78,79
    80,81,82,83,84
    85,86,87,88,89
    90,91,92,93,94
    95,96,97,98,99
    #+end_example

*** 使用 TUNA 源
    - 多个替换可以用 =-e= 分开 =jammy= \textipa{["dZami]}
    #+NAME: 98f629be-38ea-4134-b3b1-6ce37a624d1f
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
sed -e 's,archive.canonical.com/,mirrors.tuna.tsinghua.edu.cn/,' -e 's/trusty/jammy/' sources.list | head
    #+end_src

    #+RESULTS: 98f629be-38ea-4134-b3b1-6ce37a624d1f
    #+begin_example
    # deb cdrom:[Ubuntu 14.04 LTS _Trusty Tahr_ - Release amd64 (20140417)]/ jammy main restricted

    # See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
    # newer versions of the distribution.
    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
    deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse

    ## Major bug fix updates produced after the final release of the
    ## distribution.
    deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
    #+end_example
*** 过滤掉无用的注释
    - 多个替换也可以用 =;= 分隔
    - =-n= 默认不输出， =p= 来输出
    #+NAME: 39fcebd9-f404-479c-b732-ec443ecf0949
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
sed -n '/^[^#]/{s,archive.canonical.com/,mirrors.tuna.tsinghua.edu.cn/,;s/trusty/jammy/;p}' sources.list | head
    #+end_src

    #+RESULTS: 39fcebd9-f404-479c-b732-ec443ecf0949
    : deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
    : deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
    : deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
    : deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
    : deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
    : deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
    : deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
    : deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
*** 合成一个表达式
    - 使用匹配引用 =\1=
    #+NAME: f0ba69e6-09c7-49f2-92e4-22c2be2c48b2
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
sed -nr '/^[^#]/{s,archive.canonical.com(.*)trusty,mirrors.tuna.tsinghua.edu.cn\1jammy,;p}' sources.list | head
    #+end_src

    #+RESULTS: f0ba69e6-09c7-49f2-92e4-22c2be2c48b2
    : deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
    : deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
    : deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
    : deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
    : deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
    : deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
    : deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
    : deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
*** =grep= 达到类似效果
    #+NAME: 77bbdf51-7b00-447c-a68f-10b9137afd1c
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
egrep -v '^(#.*)?$' sources.list
    #+end_src

    #+RESULTS: 77bbdf51-7b00-447c-a68f-10b9137afd1c
    : deb http://archive.canonical.com/ubuntu/ trusty main restricted universe multiverse
    : deb-src http://archive.canonical.com/ubuntu/ trusty main restricted universe multiverse
    : deb http://archive.canonical.com/ubuntu/ trusty-updates main restricted universe multiverse
    : deb-src http://archive.canonical.com/ubuntu/ trusty-updates main restricted universe multiverse
    : deb http://archive.canonical.com/ubuntu/ trusty-backports main restricted universe multiverse
    : deb-src http://archive.canonical.com/ubuntu/ trusty-backports main restricted universe multiverse
    : deb http://archive.canonical.com/ubuntu/ trusty-security main restricted universe multiverse
    : deb-src http://archive.canonical.com/ubuntu/ trusty-security main restricted universe multiverse
    - 达成成就：没有任何字母数字的正则表达式

** Perl 正则表达式
*** 多行匹配
     - =grep= 的多行匹配功能很弱，应当使用 =pcre2grep=
     - =pcre2= 吸纳了 Perl 的正则表达式，一部分来自 Python 正则表达式。
       
     #+NAME: c523234c-6533-4536-bb1f-e5150bd96f85
     #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
       columns=( "DATASET.*SER"
                 "DATATYPE.*F64"
                 "DATASET.*SER_stddev"
                 "DATATYPE.*F64"
               )

       h5dump -A ser.h5| pcre2grep -M "$(echo ${columns[@]} | sed 's/ /(.|\n)*/g')"
       echo $?
     #+end_src       

     #+RESULTS: c523234c-6533-4536-bb1f-e5150bd96f85
     :    DATASET "SER" {
     :       DATATYPE  H5T_IEEE_F64LE
     :       DATASPACE  SIMPLE { ( 100 ) / ( 100 ) }
     :    }
     :    DATASET "SER_stddev" {
     :       DATATYPE  H5T_IEEE_F64LE
     : 0

*** 有限状态自动机之外的功能
    - 基本正则表达式与有限自动机 finite automata 等价
    - 在 FA 之外时，可引入更强大的处理功能
*** 高级构造
    - 前趋引用匹配：形似 =sed= 的替换
    - iterative matches =\G= where previous match ends
    - look ahead behind
    - atmoic grouping 不再缩短
**** 选择结构
     - conditional constructs (140)
       - 使用之前的匹配 =(<)?\w+(?(1)>)=
**** 递归结构
     - 由 =pcre= 提出，用于匹配形如 \( a^n b^n \) 的平衡问题。
** 调试
*** =rxrx=
    - Perl 的正则表达式调试和教学工具

** 常见问题
*** 匹配长度
    - greedy: 贪婪匹配
    - lazy: 最小匹配
    |        | ?  | +  | *  |
    |--------+----+----+----|
    | greedy | ?  | +  | *  |
    | lazy   | ?? | +? | *? |

* 第三周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pb
  :EXPORT_BEAMER_HEADER+: \title{bash 脚本}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-07-28 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习与提示
*** 安装
    - =bash= 文档
      #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
apt install bash-doc
      #+end_src
    - =info bash=
*** 正则表达式
    - 普适的字符串处理工具
      - =^=, =$= 开始与结束
      - =+= 至少一次重复
      - =?= 0或1次
      - =()= 组合
      - =|= 或
    - 重要工具 =grep= 行匹配 =sed= 替换
    - 进阶： Perl 正则表达式
      - 多行匹配
** bash 脚本
*** 脚本程序
- 世界上本没有脚本，打的命令多了，聚在一起，就形成了脚本
- 脚本可以当作命令使用
*** 例子
    #+NAME: 7ea4e885-9e27-4b46-be96-bda28e2f59f2
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
cat arguments.sh
    #+end_src

    #+RESULTS: 7ea4e885-9e27-4b46-be96-bda28e2f59f2
    : #!/bin/sh
    : 
    : echo The first argument is $1
    : echo The second argument is $2
    : echo all the arguments are $@

    #+NAME: 780e6d3d-8558-4a1b-9b90-f7d32d3bd383
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      chmod +x arguments.sh
      ./arguments.sh 1输入 2参数
    #+end_src

    #+RESULTS: 780e6d3d-8558-4a1b-9b90-f7d32d3bd383
    : The first argument is 1输入
    : The second argument is 2参数
    : all the arguments are 1输入 2参数
*** Shebang 和脚本命令
- =#!= 是一对有特殊含义的字符，它处在第一行开头在被执行时，内核会寻找其后的解释器来运行其后的脚本。
- =chmod= 改变文件的权限，分别为 r 读 w 写 x 执行。
- =chmod +x arguments.sh= 给 =arguments.sh= 可执行的权限。
- 执行时，系统使用 =#!/bin/sh= 指定的 =/bin/sh= 执行程序。
  - =./arguments.sh= 等价于 =/bin/sh arguments.sh= 。
  - 注意 =/bin/sh= 很可能不是 =bash= 。需要 =bash= 时，直接使用 =/bin/bash=
  #+NAME: 680efed9-619f-408a-bd4f-1244be67c0d9
  #+begin_src bash
realpath /bin/sh # dash 是不同的 shell，功能少速度快
  #+end_src

  #+RESULTS: 680efed9-619f-408a-bd4f-1244be67c0d9
  : /usr/bin/dash

- 如果可执行的脚本在 =PATH= 指定的路径里，就可以被 shell 找到，例如 =egrep= 。
#+NAME: cc48721e-7c4a-46b1-b97f-765643de3402
#+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
file $(which egrep)
#+end_src

#+RESULTS: cc48721e-7c4a-46b1-b97f-765643de3402
: /bin/egrep: POSIX shell script, ASCII text executable
*** 脚本的参数
- 脚本调用时的参数，在脚本中使用 `$1` `$2`
  - 相当于 Python 的 `sys.argv[1]`, `sys.argv[2]`
- 所有的参数是 `$@`
#+NAME: 8e9cc35c-2863-4680-877b-b739a41e1714
#+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
cat /bin/egrep
#+end_src

#+RESULTS: 8e9cc35c-2863-4680-877b-b739a41e1714
: #!/bin/sh
: exec /bin/grep -E "$@"

- bash 脚本例子
#+NAME: d2099895-d340-408d-a261-f65cad5d3d09
#+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
file /usr/bin/* | grep "Bourne-Again shell" | head
#+end_src

#+RESULTS: d2099895-d340-408d-a261-f65cad5d3d09
#+begin_example
/usr/bin/AddOrReplaceReadGroups:                       Bourne-Again shell script, ASCII text executable
/usr/bin/ant:                                          Bourne-Again shell script, ASCII text executable
/usr/bin/antlr:                                        Bourne-Again shell script, ASCII text executable
/usr/bin/antlr3:                                       Bourne-Again shell script, ASCII text executable
/usr/bin/any2djvu:                                     Bourne-Again shell script, ASCII text executable
/usr/bin/apache-rat:                                   Bourne-Again shell script, ASCII text executable
/usr/bin/BamIndexStats:                                Bourne-Again shell script, ASCII text executable
/usr/bin/BamToBfq:                                     Bourne-Again shell script, ASCII text executable
/usr/bin/beeline:                                      Bourne-Again shell script, ASCII text executable
/usr/bin/binutils-config:                              Bourne-Again shell script, ASCII text executable
grep: write error: Broken pipe
#+end_example

** 变量
*** bash 变量
- 在 bash 中，一切皆字符串
- 变量需要额外的 =$= 来指定， =$a= 和 =${a}= 代表变量 =a= 的值
  - 类比 =make= ，使用 =$(a)= 代表变量取值
- 赋值号“=”的前后都不能有空格，与 Python 的格式建议相反！
#+NAME: 8f5c82cc-5576-42e9-b44c-c9620a33b65a
#+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
  a=1
  echo $a
  b=我是谁
  echo ${a}${b}
#+end_src

#+RESULTS: 8f5c82cc-5576-42e9-b44c-c9620a33b65a
: 1
: 1我是谁

#+NAME: 4c02860a-c628-4fb3-9852-db3efb1bb91d
#+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
echo "${a}${b}，我从哪里来" # 双引号中变量是被替换的
#+end_src   

#+RESULTS: 4c02860a-c628-4fb3-9852-db3efb1bb91d
: 1我是谁，我从哪里来
*** 变量的引用
    - 无引号时，空格起作用
    - 单引号字符串中的字符保持不变
    - 双引号时，字符串中的变量被替换
    #+NAME: 03bd3de5-4e0d-4cd1-9e2b-e3627346b5d5
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
echo '${a}${b}，我从哪里来' # 单引号保持不变
    #+end_src

    #+RESULTS: 03bd3de5-4e0d-4cd1-9e2b-e3627346b5d5
    : ${a}${b}，我从哪里来

*** 引用命令的执行结果
- 把命令运行的标准输出赋给变量
- 与 =make= 类似，换行分隔的列表被转成由空格分隔
#+NAME: d97d62db-cfc2-467f-9753-3cb10a60a7d8
#+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
n_list=$(seq 9)
echo ${n_list}
#+end_src

#+RESULTS: d97d62db-cfc2-467f-9753-3cb10a60a7d8
: 1 2 3 4 5 6 7 8 9
#+NAME: f20334c4-56f4-4ba9-b9a2-c07e8598bec0
#+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
  n233=$(seq 10000 | egrep ^23+$)
  echo ${n233}
  echo ${#n233} # 字符个数
#+end_src

#+RESULTS: f20334c4-56f4-4ba9-b9a2-c07e8598bec0
: 23 233 2333
: 11

*** =bash= 数组
    - 虽然取名为数组 array ，但与 Python 的 列表更接近。
      - 可以存储任意元素。
    #+NAME: db43f577-e5a7-4d4c-8422-2c4f89d25874
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      busket=()
      busket+=( 香蕉 弥猴桃 牛油果 )
      busket+=( 西瓜 荔枝 )
      echo ${busket} # 按普通变量取值，只有第一个元素
      echo ${busket[@]}
      echo ${busket[3]}
    #+end_src

    #+RESULTS: db43f577-e5a7-4d4c-8422-2c4f89d25874
    : 香蕉
    : 香蕉 弥猴桃 牛油果 西瓜 荔枝
    : 西瓜

    #+NAME: c096b66d-d7dd-46a8-9264-843411f85a0b
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      echo ${#busket[@]} # 元素个数
    #+end_src

    #+RESULTS: c096b66d-d7dd-46a8-9264-843411f85a0b
    : 5
*** =bash= 字典
    - 又称关联数组 associative array ，类比 Python 字典
    #+NAME: f61927cf-be8b-4858-9db6-072cf5526967
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      declare -A cargo # 声明 cargo 是字典
      cargo[banana]=3
      cargo[apple]=4
      echo ${cargo[banana]}
      echo ${!cargo[@]} # 取词
      echo ${cargo[@]} # 取值
    #+end_src

    #+RESULTS: f61927cf-be8b-4858-9db6-072cf5526967
    : 3
    : apple banana
    : 4 3
** 算术运算
*** =bash= 算术
    - =bash= 一等公民是字符串，算术运算用于辅助和便利
      - 比用管道 和 =$(...)= 简洁
    #+NAME: 16f900ed-a36d-49c1-851c-b0dddb3f6a5b
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      echo $((1+3)) $((3*5))
      echo $(echo 1+3 | bc) $(echo 3*5 | bc)
    #+end_src

    #+RESULTS: 16f900ed-a36d-49c1-851c-b0dddb3f6a5b
    : 4 15
    : 4 15
    - 但是计算能力有限，只能做简单运算
    #+NAME: cac37ef7-78e1-41de-a9c2-99f27393869f
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      echo $((2**100))
      echo $(echo "2^100" | bc)
    #+end_src

    #+RESULTS: cac37ef7-78e1-41de-a9c2-99f27393869f
    : 0
    : 1267650600228229401496703205376
*** 使用 =bash= 的原因
    - =bash= 的列表、字典，形似 Python，计算能力不如 =bc= ，为什么值得使用？
    - 最佳工具：使用 =bash= 处理文件时，有时需要列表、字典和算术
      - 但不需要太多。需要更专业的操作时，意味着更高级的工具胜任
      - “信手拈来”的境界是创新的温床，重大的全新突破都在有了足够积累后不经意间出现
        - 不经意的前提是：放松、随意
      - 不让大脑等待双手是最佳工具原则的最高等级
        - 人机交互，打字，扔掉鼠标
        - 避免不必要的环境切换
    - 经济性：有了 Python 基础，学习其它语言门槛大大降低，不再需要额外精力
      - 第一门语言难度 100% ，思维广度 +100%
      - 第二门语言难度 25% ，思维广度 +100%
      - 第三门语言难度 1% ，思维广度 +100%
      - 回报越来越大
** =bash= 程序结构
*** 选择结构
    #+NAME: e0c2f10f-c9d8-4b7d-a1d3-96d3be059199
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      if [ 3 -gt 2 ]; then
          echo "3>2"
      else
          echo "3<=2"
      fi
    #+end_src

    #+RESULTS: e0c2f10f-c9d8-4b7d-a1d3-96d3be059199
    : 3>2
**** 判断语句
     - =[...]= 是一个程序，正式名字是 =test=
     - 真假判断来自该程序执行的返回值。
       - 0 为真：执行成功
       - 非 0 为假：执行失败
       - 注意与 Python 正好相反！
**** 文档
     - =man [= 、 =info test=

*** 真假判断
    - =$?= 或 =${?}= 变量值是前一条命令的返回值
    #+NAME: 53457408-0033-4dd1-bb0c-ca912833d487
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      [ 1 = 2 ] # 假，返回非 0
      echo $?
      [ 2 != 3 ] # 真，返回 0
      echo $?
    #+end_src

    #+RESULTS: 53457408-0033-4dd1-bb0c-ca912833d487
    : 1
    : 0
    - =[ INTEGER1 -eq INTEGER2 ]= 相等
    - =[ INTEGER1 -ge INTEGER2 ]= 大于等于
    - =[ INTEGER1 -lt INTEGER2 ]= 小于
    - =[ INTEGER1 -ne INTEGER2 ]= 不等
    - =[ ! EXPRESSION ]= 取否
    - =[ EXPRESSION1 -a EXPRESSION2 ]= 取和
    - =[ EXPRESSION1 -o EXPRESSION2 ]= 取或
*** =bash= 内建真假判断
    - =bash= 提供了 =[[...]]= 的内建命令，兼容 =[...]= 语法，有更多功能
    - 内建命令，调用速度更快
    - 命令层次的逻辑运算
      - =command1 && command2= 取和
      - =command1 || command2= 取或
      - =! command= 取否
    - 逻辑运算替代选择结构，以下两者等价
    #+NAME: 3de9216b-c95d-40fa-9892-ee47023f68c2
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      if [ 3 -gt 2 ]; then
          echo "3>2"
      else
          echo "3<=2"
      fi
      # 逻辑运算替代选择结构，可读性更强
      [[ 3 -gt 2 ]] && echo "3>2" || echo "3<=2"
    #+end_src

    #+RESULTS: 3de9216b-c95d-40fa-9892-ee47023f68c2
    : 3>2
    : 3>2
*** 循环结构
    - =for= 循环，计算 Fabonacci 数
    - 从 =seq 10= 结果中，取得 10 个元素，用变量 =i= 遍历
      - 类比： Python for 循环，迭代器
    #+NAME: 55773626-a89b-4cdb-859d-90c74dd0f8cf
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
x=1
y=1
for i in $(seq 10); do
    s=$(($x+$y))
    x=${y}
    y=${s}
done

echo ${y}
    #+end_src

    #+RESULTS: 55773626-a89b-4cdb-859d-90c74dd0f8cf
    : 144
*** =while= 循环
    - 与 =seq 1000 | egrep ^23+$= 等价
    #+NAME: 8dea7aec-f23a-47ac-93a7-8ca727ed3c1b
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      seq 1000 | while read line
      do
          echo $line | egrep -q '^23+$' && echo $line
      done
    #+end_src

    #+RESULTS: 8dea7aec-f23a-47ac-93a7-8ca727ed3c1b
    : 23
    : 233
    : 

*** =until= 循环
    - 与 =while= 循环类似，条件相反
    #+NAME: 8e1e4763-f8da-47c5-a34d-92b056e44a03
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      seq 1000 | until ! read line
      do
          echo $line | egrep -q '^23+$' && echo $line
      done
    #+end_src
**** 循环控制命令
     - =break= 终止循环、 =continue= 跳入下一轮循环
    #+NAME: 8e1e4763-f8da-47c5-a34d-92b056e44a03
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      seq 1000 | until ! read line
      do
          if echo $line | egrep -q '^23+$'; then
              echo $line
              break
          fi
      done
    #+end_src

** 函数
*** 函数定义
    - =bash= 函数是五种命令之一
    #+NAME: 7d2cb440-781d-43a7-a796-2956f8fcda90
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      function greet() {
          echo "Hello, $1"
      }

      greet 大佬
    #+end_src

    #+RESULTS: 7d2cb440-781d-43a7-a796-2956f8fcda90
    : Hello, 大佬

*** 函数递归
    - 递归计算 Fabonacci 数
    - =$(command)= 从 =command= 的标准输出取得结果
    - =return= 给返回值，只能用 =$?= 捕捉或者用于逻辑运算
      - 与 Python 函数完全不同，因为命令成功与失败的判断更重要
    #+NAME: d0255648-313d-4572-b131-3354a78240b1
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      function fib() {
          if [ $1 -le 2 ]; then
              echo $1
          else
              echo $(($(fib $(($1-1))) + $(fib $(($1-2)))))
          fi
      }

      fib 11
    #+end_src      

    #+RESULTS: d0255648-313d-4572-b131-3354a78240b1
    : 144

** =bash= 正则表达式
*** =bash= 内建正则判断
    - 由 =[[ EXPR =~ REGEX ]]= 判断 =EXPR= 是否能被 =REGEX= 匹配。
      - 支持扩展正则表达式
      - 匹配结果由 =BASH_REMATCH= 列表给出
    - 比每次调用 =egrep= 快很多
    #+NAME: 8e1e4763-f8da-47c5-a34d-92b056e44a03    
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      seq 1000 | until ! read line
      do
          if [[ $line =~ ^23+$ ]]; then
              echo ${line}
              echo ${BASH_REMATCH[0]}
          fi
      done
    #+end_src

    #+RESULTS: 8e1e4763-f8da-47c5-a34d-92b056e44a03
    : 23
    : 23
    : 233
    : 233

*** 取得匹配结果
    #+NAME: 53b43e8b-b4e6-4c6f-9ae3-3bc652d968d8
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      while read entry; do
          if [[ $entry =~ ^([^#].*)archive.canonical.com(.*)trusty ]]; then
              echo ${BASH_REMATCH[1]} ${BASH_REMATCH[2]}
          fi
      done < sources.list
    #+end_src

    #+RESULTS: 53b43e8b-b4e6-4c6f-9ae3-3bc652d968d8
    : deb http:// /ubuntu/
    : deb-src http:// /ubuntu/
    : deb http:// /ubuntu/
    : deb-src http:// /ubuntu/
    : deb http:// /ubuntu/
    : deb-src http:// /ubuntu/
    : deb http:// /ubuntu/
    : deb-src http:// /ubuntu/

*** 引用常见问题
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      pattern='\.' # 引号被 bash 处理

      [[ . =~ $pattern ]] # 成功
      [[ . =~ \. ]] # 成功

      [[ . =~ "$pattern" ]] # 失败
      [[ . =~ '\.' ]] # 失败
    #+end_src
    - =\= 同时在 =bash= 和正则语句意为“除去特殊含义”。需要格外注意
    - 引号在变量赋值时使用时，变量的值不含引号。
      - 在 =[[ ]]= 里写引号时，所有字符都没有特殊含义
** 调试
*** =bash= 调试
    - 屏幕输出法 :: 用 =echo=
    - 额外调试信息输出法 :: =set -xv= 开启调试输出
      - =set +xv= 关闭调试输出
      - =bash -xv script.sh= 以调试模式执行脚本
        - =-v= Print shell input lines as they are read.
        - =-x= Print commands and their arguments as they are executed.
          
** 综合
*** 回顾
**** 科学数据处理的原则                                        :B_alertblock:
     :PROPERTIES:
     :BEAMER_env: alertblock
     :END:
     _复现_ _透明_ _一次_ _最佳工具_

**** 版本控制
     Git 与队友分工协作，与明天的自己协作

**** 数据流水线
     GNU Make 管理数据的依赖与转换，实现错误恢复和并行计算

**** 命令环境
     GNU 环境中强大的小工具组合，开发与使用相融合

**** 计算语言
     Python 语法友好，工具丰富，统领 C/C++/Fortran 库
* 第四周第一天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pc
  :EXPORT_BEAMER_HEADER+: \title{关系代数与 SQL}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-08-01 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习
*** 课前准备
    - 安装 SQLite3 和查看器
    - 安装 CSV 查看器
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install sqlite3 sqlitebrowser csvkit

      wget "http://hep.tsinghua.edu.cn/~orv/pd/dataframe-practice-r1.tar.gz"
      tar -xf dataframe-practice-r1.tar.gz
    #+end_src
    - macOS
    #+begin_src bash
      brew install sqlite db-browser-for-sqlite csvkit
    #+end_src
*** 本周提要
   - 第一周 :: 一切工作都是差分
   - 第二周 :: 一切计算都是数组
   - 第三周 :: 一切行为都是命令
     - 程序运行与文件管理：
       1. 外壳 shell: =bash=
       2. 流水线: =make= （函数式编程、描述性编程）
       3. 字符处理：正则表达式 （描述性编程）
   - 第四周 :: *一切数据都是表格*
     - 学习如何有序组织数据，尽一切努力让统计分析和数据洞见更易进行
       - 关系代数
       - 学习新语言 SQL
     - 应用意义
       - 直接应用到分布式 SQL 引擎
     - 1981 年和 2014 年的两届图灵奖工作
     
** 关系代数
*** 引例：表格 vs 数组
    =eid= 指事例编号 event ID ， =ch= 指读数通道 =channel= 。
**** t                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.499
     :END:
    | eid | ch | wave      |
    |-----+----+-----------|
    |   0 |  0 | (0, 2, 3) |
    |   0 |  2 | (0, 0, 1) |
    |   1 |  2 | (3, 2, 0) |
    |   1 |  3 | (0, 3, 1) |
    | ... |    |           |
    - =eid= 的取值可达几百万 \( N_\mathrm{E} \) ， =ch= 的取值是 0 到 29 共 30 个。
    - 表格定义：把坐标 (0, 0)、(0, 2)、(1, 2)、(1, 3) 写在列上
    - 长度略小于 \( N_\mathrm{E} \times 30 \) 的表格
**** a                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :END:

     | ch \ eid | 0         | 1         |
     |----------+-----------+-----------|
     |        0 | (0, 2, 3) | x         |
     |        2 | (0, 0, 1) | (3, 2, 0) |
     |        3 | x         | (0, 3, 1) |

     - 如果行与列的标号不连续，则另行开辟 =eid= 和 =ch= 的数组，建立 0, 2, 3 与标号 0, 1, 2 的对应关系。
     - 形状为 \( (N_\mathrm{E}, 30) \) 的二维数组
*** 概念
    | eid | ch | wave      |
    |-----+----+-----------|
    |   0 |  0 | (0, 2, 3) |
    |   0 |  2 | (0, 0, 1) |
    |   1 |  2 | (3, 2, 0) |
    |   1 |  3 | (0, 3, 1) |
    | ... |    |           |
    
- 一切都是表，可以表达一切数据
  - 未必真实存在，可以是逻辑的表
- 集合运算，交、并、差 \( \cap,  \cup , \setminus \)
  - 集合元素是表格的行。
- 线性运算，笛卡尔积、投影、选取 \( \otimes, \Pi, \sigma \)
  - 表格扩大，列方向与行方向缩小
- 关系运算，连接 \( \bowtie \)
  - 非关系代数基本运算，可由 \( \otimes \sigma \) 组合得到，极常用
- 拓展运算，GroupBy（分组） \( \mathcal{G} \)
  - 非关系代表运算，不可由基本运算实现，极常用

*** 困惑：以代数理论组织数据够图灵奖？

- Edgar F. Codd，1981年图灵奖得主

  Relational database: a practical foundation for productivity.
  
- Michael Stonebraker 2014年图灵奖得主

  For fundamental contributions to the concepts and practices underlying modern database systems.
**** 参考书
     Hellerstein, Joseph M. and Michael Stonebraker. Readings in Database Systems.

*** 反思：如此简明的理论为何影响深远？
  1. 数据组织在物理学家眼里，是一件微不足道的“小事”：如何组织都无所谓，能用就行
  2. “自然”地采用树状结构：一个高能量的粒子产生很多“次数粒子”，次数粒子诱导出光子，一个光子被放大成１千万个电子
  3. 争论：什么样的“树”最好？
     - 身分 vs. 能力：出身星系 vs. 天体种类
     - 身分 vs. 能力：母粒子 vs. 粒子种类
  4. 每个人有自己关注的物理问题，因此争证持续，或者走向分裂
  5. “都是那些个二货坚持用奇怪的数据格式”
  6. 反思时，发现自己在“小事”上花了太多精力，非常空虚
*** 研究这个问题是为了不再研究这个问题

- 按照简明的理论组织数据，从此之后忘掉它。
- 简明的理论有严格的数学体系
- 与正则表达式一样，可以有完美的社会分工
  - 使用者以关系代数的思想和语言描绘出自己要做什么
  - 研发者以天才的程序技巧实现关系代数的基本运算，优化复合运算
*** 工业领域的某些反弹
- 2000年左右，Web 界开始了去“关系数据库”的运动，开发 NoSQL 服务。
  - SQL 是 structured query language，关系数据库的基本语言
  - 关系数据库是以关系代数为基础的数据管理程序，有严格的数据规范
- NoSQL 运动的支持者认为，世界丰富多样，不应该受关系代数的限制。
  - Web 2.0 被作为商业概念炒作，从业人员四处革命
  - 关系代数让一切都成为了表格，大大限制了我们的想象力，剥夺了我们自由设计数据格式的权力
  - 于是大家开浪起来，进行了一轮新的探索，在这个过程中创造了一批卓越的分布式的数据系统
  - Google 的 MapReduce 也在此运动中，改变了整个大数据处理的格局。
- 但是，随着时间的推移，这些 NoSQL 的方案逐渐成熟，慢慢发展出关系代数的各种运算
  - 关系代数系统被重新发明一次，与分布式系统结合起来，成为数据时代的基石
  
** SQL 语言
*** 关系代数的实现
- SQL：关系代数的天然语言，语法简明
  - 描述型的语言，描述把什么样的数据取出来
  - 也可以写数据，但一般是一次写，多次读

- 关系数据库 Relational Database，使用 SQL 语言描述
  - MariaDB (MySQL 的后继)
  - PostgreSQL
  - SQLite

- 统计软件分支，比如 S 语言中的 SAS/SPSS 中的 Dataset 或 DataFrame
  - GNU R 以及对应的 R 语言，是一个 S 语言的后继，其中 DataFrame 是语言的核心
  - Pandas 受 GNU R 的影响，目标是在 Python 的语言环境中实现 DataFrame 及其基本操作

- MapReduce 分布式大数据算法也受到关系代数的影响，一般都会使用关系代数作为平台高级接口
  - Hadoop 生态圈, Spark, etc.
*** SQL 描述性编程：定义清楚“我要什么”。
    - =CREATE= :: 创建表格
    - =INSERT= :: 插入行
    - =SELECT= :: 取得内容

**** SQL 关键字的大写约定
     - 为了醒目地展现 SQLite 的关键字，我们约定它们全大写。
** 基本操作
*** SQL 基本操作
    #+begin_src sqlite :db ra.db :var rel="A" :colnames yes
      CREATE TABLE A(ID integer, name text);
      INSERT INTO A VALUES(1, 'Wang');
      INSERT INTO A VALUES(2, 'Li');
    #+end_src

    #+begin_src sqlite :db ra.db :colnames yes
      SELECT * FROM A;
    #+end_src

    #+RESULTS:
    | ID | name |
    |----+------|
    |  1 | Wang |
    |  2 | Li   |
*** Python 的 SQLite 模块
    - 把 SQL 完整语句内嵌到函数调用中。
    #+NAME: 8b4cbb6d-233b-409b-8f4d-1f003dee7eaa
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import sqlite3

      c = sqlite3.connect("ra-python.db")
      cur = c.cursor()
      cur.execute("CREATE TABLE A(ID integer, name text)")
      cur.execute("INSERT INTO A VALUES (1, 'Wang')")
      cur.execute("INSERT INTO A VALUES (2, 'Li')")
      cur.execute("SELECT * FROM A")
      print(cur.fetchall()) # 读取 SQL 返回值
      c.close() # 关闭
    #+end_src

    #+RESULTS: 8b4cbb6d-233b-409b-8f4d-1f003dee7eaa
    : [(1, 'Wang'), (2, 'Li')]

    - 计算机的本质：把一系列指令交给另一个工具执行。
*** Python 循环减少重复
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import sqlite3

      c = sqlite3.connect("ra-python.db")
      cur = c.cursor()
      cur.execute("CREATE TABLE A(ID integer, name text)")
      for ID, name in ((1, 'Wang'), (2, 'Li')): 
          cur.execute(f"INSERT INTO A VALUES ({ID}, {name})")
      cur.execute("SELECT * FROM A")
      print(cur.fetchall()) # 读取 SQL 返回值
      c.close() # 关闭
    #+end_src
      
** 集合与线性运算
*** 集合操作
- 并 :: =UNION=
- 差 :: =EXCEPT=
- 交 :: =INTERSECT=
  #+begin_src sqlite :db ra.db :colnames yes
  SELECT column_name(s) FROM table_name1
  UNION
  SELECT column_name(s) FROM table_name2;
  #+end_src
- 笛卡尔积 :: =SELECT * FROM A,B=
- 投影 :: =SELECT name FROM A=
- 选择 :: =SELECT name FROM A WHERE ID==1=
*** 再建新的表格
    #+begin_src sqlite :db ra.db :colnames yes
      CREATE TABLE B(ID integer, name text);
      INSERT INTO B VALUES(2, 'Li');
      INSERT INTO B VALUES(3, 'Zhang');
    #+end_src

    #+RESULTS:

    #+begin_src sqlite :db ra.db :colnames yes
      SELECT * FROM B;
    #+end_src

    #+RESULTS:
    | ID | name  |
    |----+-------|
    |  2 | Li    |
    |  3 | Zhang |

*** 并运算
    #+begin_src sqlite :db ra.db :colnames yes
      SELECT * FROM B UNION
      SELECT * FROM A;
    #+end_src

    #+RESULTS:
    | ID | name  |
    |----+-------|
    |  1 | Wang  |
    |  2 | Li    |
    |  3 | Zhang |
**** 交运算
     #+begin_src sqlite :db ra.db :colnames yes
       SELECT * FROM B INTERSECT
       SELECT * FROM A;
     #+end_src

     #+RESULTS:
     | ID | name |
     |----+------|
     |  2 | Li   |
*** 笛卡尔积运算
     #+begin_src sqlite :db ra.db :colnames yes
       SELECT * FROM A, B;
     #+end_src

     #+RESULTS:
     | ID | name | ID | name  |
     |----+------+----+-------|
     |  1 | Wang |  2 | Li    |
     |  1 | Wang |  3 | Zhang |
     |  2 | Li   |  2 | Li    |
     |  2 | Li   |  3 | Zhang |
**** 差运算
     #+begin_src sqlite :db ra.db :colnames yes
       SELECT * FROM A
       EXCEPT
       SELECT * FROM B;
     #+end_src

     #+RESULTS:
     | ID | name |
     |----+------|
     |  1 | Wang |
*** 投影
    #+begin_src sqlite :db ra.db :colnames yes
      SELECT name FROM A;
    #+end_src

    #+RESULTS:
    | name |
    |------|
    | Wang |
    | Li   |
**** 选择：where 代表选择条件
    #+begin_src sqlite :db ra.db :colnames yes
      SELECT * FROM A WHERE ID==1;
    #+end_src

    #+RESULTS:
    | ID | name |
    |----+------|
    |  1 | Wang |

** 连接运算
*** 关系代数的特色
    #+begin_src sqlite :db ra.db :colnames yes
      SELECT * FROM A JOIN B ON A.ID=B.ID;
    #+end_src

    #+RESULTS:
    | ID | name | ID | name |
    |----+------+----+------|
    |  2 | Li   |  2 | Li   |

    - 用笛卡尔积和选择
    #+begin_src sqlite :db ra.db :colnames yes
      SELECT * FROM A, B WHERE A.ID==B.ID;
    #+end_src

    #+RESULTS:
    | ID | name | ID | name |
    |----+------+----+------|
    |  2 | Li   |  2 | Li   |
*** 左连接
    - 左连接，无条件保留左边
    #+begin_src sqlite :db ra.db :colnames yes
      SELECT * FROM A LEFT JOIN B ON A.ID=B.ID;
    #+end_src

    #+RESULTS:
    | ID | name | ID | name |
    |----+------+----+------|
    |  1 | Wang |    |      |
    |  2 | Li   |  2 | Li   |
    - SQLite 不支持右连接
    #+begin_src sqlite :db ra.db :colnames yes
      SELECT * FROM B LEFT JOIN A ON A.ID=B.ID;
    #+end_src

    #+RESULTS:
    | ID | name  | ID | name |
    |----+-------+----+------|
    |  2 | Li    |  2 | Li   |
    |  3 | Zhang |    |      |
** 分组概括
*** GroupBy
    #+begin_src sqlite :db ra.db :colnames yes
      INSERT INTO A VALUES(4, 'Li');
      SELECT * FROM A;
    #+end_src

    #+RESULTS:
    | ID | name |
    |----+------|
    |  1 | Wang |
    |  2 | Li   |
    |  4 | Li   |
    #+begin_src sqlite :db ra.db :colnames yes
      SELECT name,count(*) AS '人数' FROM A GROUP BY name;
    #+end_src

    #+RESULTS:
    | name | 人数 |
    |------+------|
    | Li   |    2 |
    | Wang |    1 |

** 课堂练习
*** 成绩录入
    天才少年爱迪生上课时做了一个梦，梦见自己成为了一门课的助教，协助老师向注册中心系统录成绩。但是少年爱迪生在梦境位面中的超能力减半，无法调用他强大的编程战斗值，所以他找到了你。
*** 查看 CSV
    #+begin_src bash  :results output
csvlook dataframe-practice/students.csv | head
    #+end_src

    #+RESULTS:
    #+begin_example
    | 学号 | 姓名 | 性别 | 班级   |           联系方式 |
    | -- | -- | -- | ---- | -------------- |
    |  1 | AB | 女  | 物理71 | 50,626,922,811 |
    |  2 | AC | 女  | 工物61 |  6,533,879,773 |
    |  3 | AD | 男  | 物理71 | 43,865,400,582 |
    |  4 | AE | 男  | 工物71 | 58,581,462,691 |
    |  5 | AF | 女  | 物理72 | 45,017,508,911 |
    |  6 | AG | 男  | 工物72 | 26,000,243,873 |
    |  7 | AH | 男  | 物理71 |  4,295,424,729 |
    |  8 | AI | 男  | 工物83 | 51,193,285,308 |
    #+end_example

*** SQLite 读入 CSV
    #+begin_src sqlite :db ra.db :colnames yes
      .mode csv
      .import dataframe-practice/students.csv students
      SELECT * FROM students LIMIT 5;
    #+end_src

    #+RESULTS:
    | 学号 | 姓名 | 性别 | 班级   |    联系方式 |
    |------+------+------+--------+-------------|
    |    1 | AB   | 女   | 物理71 | 50626922811 |
    |    2 | AC   | 女   | 工物61 |  6533879773 |
    |    3 | AD   | 男   | 物理71 | 43865400582 |
    |    4 | AE   | 男   | 工物71 | 58581462691 |
    |    5 | AF   | 女   | 物理72 | 45017508911 |

    - 也可直接使用 =dataframe-practice/people.db= 读入数据。

*** 查看已经有的表格
    #+begin_src sqlite :db ra.db :colnames yes
      .tables
    #+end_src

    #+RESULTS:
    | A         B         students |
    |------------------------------|
    - 任务：读入 =scores.csv= =classes.csv=
*** 少年爱迪生想
- 比较物理系和工物系的男女比例
- 算出大家的总评成绩：
  - 小作业权相等，总体占 65% 的成绩
  - 大作业占 30% 的成绩
  - 划分出不同的分数段，给出某分数段同学的手机号
- 画出各班平均小作业成绩的变化曲线
     
*** 物理系和工物系的男女比例
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
SELECT classes.院系, students.性别, count(*) AS 人数
FROM students JOIN classes
ON students.班级 = classes.班级
GROUP BY classes.院系, students.性别;
    #+end_src

    #+RESULTS:
    | 院系 | 性别 | 人数 |
    |------+------+------|
    | 工物 | 女   |    4 |
    | 工物 | 男   |   18 |
    | 物理 | 女   |   10 |
    | 物理 | 男   |   25 |
*** 选出特定成绩段的学生查询手机号
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      SELECT 联系方式,姓名,
      (`curve.fitting`+`gpa.calculator`)/2*0.65 + `大作业`*0.3 AS total
      FROM students JOIN scores ON students.学号 = scores.学号
      WHERE total < 60;
    #+end_src

    #+RESULTS:
    |    联系方式 | 姓名 |  total |
    |-------------+------+--------|
    | 26000243873 | AG   |  22.75 |
    | 11373628062 | AK   |  45.65 |
    | 11391622912 | AM   |  38.35 |
    |  9693622361 | AR   | 55.575 |
    | 73349261755 | AY   | 53.705 |
    | 99263903250 | BE   | 53.945 |
    | 99555170920 | BJ   |  58.66 |
    | 26880267330 | BS   | 36.665 |
    | 77213592969 | BV   |  47.65 |

* 第四周第二天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pd
  :EXPORT_BEAMER_HEADER+: \title{关系代数与 DataFrame}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-08-02 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习与提示
*** 安装软件
    - Pandas: Python 的 R DataFrame 仿制品
      - 缺点：不完全仿制，存在不一致；无全局设计考量，经常改接口。
      - 优点：被 Python 数据圈采纳为标准格式，补充 NumPy 的功能
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
apt install python3-pandas python3-seaborn
    #+end_src
    - macOS
      #+begin_src bash
      pip3 install pandas seaborn
      #+end_src
**** 最佳工具                                                  :B_alertblock:
     :PROPERTIES:
     :BEAMER_env: alertblock
     :END:
     - Dataframe 流派的关系代数系统 全局最佳工具是 GNU R
       - Python 只是小圈子的最佳工具
     - Grammar of graphics 的全局最佳工具是 R ggplot2
       - seaborn 只是眼前的妥协，未来 Python 小圈子的最佳工具可能是 [[https://plotnine.readthedocs.io/en/stable/][plotnine]]

*** 关系代数复习
    - 集合运算：\( \cap,  \cup , \setminus \)
      - SQL =INTERSECT= =UNION= =EXCEPT=
    - 线性运算：\( \otimes, \Pi, \sigma \)
      - SQL =SELECT= =WHERE=
    - 关系运算：连接 \( \bowtie \)
      - SQL =JOIN=
    - 拓展运算：GroupBy（分组） \( \mathcal{G} \)
      - SQL =GROUP BY=
*** [33%]少年爱迪生想
- [X] 比较物理系和工物系的男女比例
- [-] 算出大家的总评成绩：
  - [ ] 小作业权相等，总体占 65% 的成绩
  - [X] 大作业占 30% 的成绩
  - [X] 划分出不同的分数段，给出某分数段同学的手机号
- [ ] 画出各班平均小作业成绩的变化曲线
#+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      SELECT 联系方式,姓名,
      (`curve.fitting`+`gpa.calculator`)/2*0.65 + `大作业`*0.3 AS total
      FROM students JOIN scores ON students.学号 = scores.学号
      WHERE total < 60;
#+end_src
  #+RESULTS:
  |    联系方式 | 姓名 |  total |
  |-------------+------+--------|
  | 26000243873 | AG   |  22.75 |
  | 11373628062 | AK   |  45.65 |
  | 11391622912 | AM   |  38.35 |
  |  9693622361 | AR   | 55.575 |
  | 73349261755 | AY   | 53.705 |
  | 99263903250 | BE   | 53.945 |
  | 99555170920 | BJ   |  58.66 |
  | 26880267330 | BS   | 36.665 |
  | 77213592969 | BV   |  47.65 |

** 长表与宽表
*** 引例：小作业所有加和
**** schema                                                           :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.299
     :END:
    #+begin_src sqlite :db dataframe-practice/people.db :results output
.schema scores
    #+end_src

    #+RESULTS:
    #+begin_example
    CREATE TABLE `scores` (
      `学号` INTEGER,
      `self.intro` INTEGER,
      `a.b` INTEGER,
      `rank.guesser` INTEGER,
      `hdf5` INTEGER,
      `prime` INTEGER,
      `heart.curve` INTEGER,
      `gpa.calculator` REAL,
      `curve.fitting` INTEGER,
      `大作业` REAL
    );
    #+end_example
**** query                                                            :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.7
     :END:
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      SELECT 联系方式,姓名,
      (`self.intro`+`a.b`+`rank.guesser`+hdf5+prime
      +`heart.curve`+`curve.fitting`+`gpa.calculator`)/8*0.65
      + `大作业`*0.3 AS total
      FROM students JOIN scores ON students.学号 = scores.学号
      WHERE total < 60;
    #+end_src

    #+RESULTS:
    |    联系方式 | 姓名 |   total |
    |-------------+------+---------|
    | 26000243873 | AG   |  42.575 |
    | 11391622912 | AM   | 58.0125 |
    - 可以用双引号 ="= 代替斜引号 =`=

*** 太丑了
    - 四周16次作业全都写上吗？
    - 不能写循环吗？
    - 不能自动完成吗，一次原则在哪里？
    - 问题何在？
      - 表格列的对称性。

    #+attr_latex: :height 4cm
    [[./fig/cat_tom.png]]
    
*** 长表
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      SELECT * FROM longscores LIMIT 5
    #+end_src

    #+RESULTS:
    | 学号 | 作业 |  分数 | 大作业 |
    |------+------+-------+--------|
    |    1 |    1 | 100.0 |      0 |
    |    2 |    1 | 100.0 |      0 |
    |    3 |    1 | 100.0 |      0 |
    |    4 |    1 | 100.0 |      0 |
    |    5 |    1 | 100.0 |      0 |

    - “作业”一列给出作业编号
    - “大作业”一列 0 代表非，1 代表是
*** 再计算一次总评
    - 用 =longscores= 分组大大简化
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      SELECT 学号, avg(分数) FROM longscores GROUP BY 学号 LIMIT 5
    #+end_src

    #+RESULTS:
    | 学号 |        avg(分数) |
    |------+------------------|
    |    1 | 104.411111111111 |
    |    2 | 92.3333333333333 |
    |    3 | 94.2222222222222 |
    |    4 | 104.033333333333 |
    |    5 | 99.8333333333333 |
*** 加上权重
    :PROPERTIES:
    :ORDERED:  t
    :END:
    - 0 到 0.65 权重， 1 到 0.3 权重
    - =HAVING= 与 groupby 连用，对 group 进行过滤。
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      SELECT 学号, sum(权重*分数) AS 总评 FROM 
      (SELECT 学号, CASE 大作业
        WHEN 0 THEN 0.65
        WHEN 1 THEN 0.3
        END AS 权重, avg(分数) AS 分数 
        FROM longscores GROUP BY 学号, 大作业)
      GROUP BY 学号
      HAVING 总评 > 105 
    #+end_src

    #+RESULTS:
    | 学号 |      总评 |
    |------+-----------|
    |   49 | 105.16375 |
    |   55 | 105.70625 |

*** 储存起来用于下一步使用
    - =CREATE VIEW= 把中间结果存成虚拟表格
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      CREATE VIEW final_scores AS
      SELECT 学号, sum(权重*分数) AS 总评 FROM 
      (SELECT 学号, CASE 大作业
        WHEN 0 THEN 0.65
        WHEN 1 THEN 0.3
        END AS 权重, avg(分数) AS 分数 
        FROM longscores GROUP BY 学号, 大作业)
      GROUP BY 学号
    #+end_src

    #+RESULTS:

    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
        SELECT * FROM final_scores LIMIT 5
    #+end_src

    #+RESULTS:
    | 学号 |      总评 |
    |------+-----------|
    |    1 | 104.50375 |
    |    2 |  87.20625 |
    |    3 |  94.05625 |
    |    4 |   103.265 |
    |    5 |  98.26875 |
*** 算出大家的总评成绩
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      SELECT students.学号, 总评, 联系方式
      FROM final_scores JOIN students
      ON final_scores.学号 = students.学号
      WHERE 总评 > 105
    #+end_src

    #+RESULTS:
    | 学号 |      总评 |    联系方式 |
    |------+-----------+-------------|
    |   49 | 105.16375 | 81920572715 |
    |   55 | 105.70625 | 24891470639 |
*** 总评成线关联班级
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
SELECT total.班级,院系,姓名,总评,联系方式 FROM classes JOIN
(SELECT 姓名,班级,总评,联系方式 FROM final_score 
JOIN students on final_score.学号 = students.学号 WHERE 总评 < 60) AS total
ON total.班级 = classes.班级
    #+end_src

    #+RESULTS:
    | 班级   | 院系 | 姓名 |    总评 |    联系方式 |
    |--------+------+------+---------+-------------|
    | 工物72 | 工物 | AG   |  42.575 | 26000243873 |
    | 物理71 | 物理 | AM   | 58.0125 | 11391622912 |

*** 成绩按班级计算
- [X] 比较物理系和工物系的男女比例
- [X] 算出大家的总评成绩：
  - [X] 小作业权相等，总体占 65% 的成绩
  - [X] 大作业占 30% 的成绩
  - [X] 划分出不同的分数段，给出某分数段同学的手机号
- [ ] 画出各班平均小作业成绩的变化曲线
*** 取得班级作业平均数据
    #+begin_src sqlite :db dataframe-practice/people.db :colnames yes
      SELECT 班级, 作业, avg(分数) AS 分数
      FROM longscores JOIN students ON longscores.学号 = students.学号
      GROUP BY 班级, 作业 LIMIT 10
    #+end_src

    #+RESULTS:
    | 班级   | 作业 |             分数 |
    |--------+------+------------------|
    | 基科71 |    1 |            100.0 |
    | 基科71 |    2 |            100.0 |
    | 基科71 |    3 |             99.0 |
    | 基科71 |    4 | 66.6666666666667 |
    | 基科71 |    5 | 97.3333333333333 |
    | 基科71 |    6 | 73.3333333333333 |
    | 基科71 |    7 | 100.333333333333 |
    | 基科71 |    8 | 86.6666666666667 |
    | 基科71 |    9 | 110.066666666667 |
    | 基科72 |    1 |            100.0 |
*** 绘图
**** p                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.569
     :END:
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      from matplotlib import pyplot as plt
      import pandas as pd
      import sqlite3

      c = sqlite3.connect("dataframe-practice/people.db")
      class_score = pd.read_sql_query("""
      select 班级, 作业, avg(分数) as 分数
      from longscores join students
      on longscores.学号 = students.学号
      group by 班级, 作业
      """, c)

      one_line = class_score.query("班级 == '基科71'")
      plt.plot(one_line["作业"], one_line["分数"])
      plt.xlabel("作业")
      plt.ylabel("分数")
      <<savefig(figname="img/class_score.pdf")>>
    #+end_src

**** i                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.43
     :END:
    #+attr_latex: :width 5cm
    #+RESULTS:
    [[file:img/class_score.pdf]]
*** 长表与宽表总结
    - 长表，为了恢复列之间的对称性，对计算机系统更友好
    - 宽表，某些时候人类易于理解。
      - 不同的列有不同的属性，例如权重
      - 相同属性的列在重复，违反一次原则

** DataFrame
*** Pandas: Python DataFrame 工具
    #+NAME: a07cce5b-ea67-4e3a-8f91-76b828f112fc
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import pandas as pd
      classes = pd.read_csv("dataframe-practice/classes.csv")
      print(classes)
    #+end_src

    #+RESULTS: a07cce5b-ea67-4e3a-8f91-76b828f112fc
    #+begin_example
          班级  院系
    0    核71  工物
    1   工物61  工物
    2   工物72  工物
    3   基科71  物理
    4   物理72  物理
    5   物理71  物理
    6   工物73  工物
    7   工物83  工物
    8   工物71  工物
    9   工物70  工物
    10  基科72  物理
    #+end_example

*** 集合运算：并
    - \( \cap,  \cup , \setminus \)
    #+NAME: cf243858-2832-42fd-9fe2-b9c8cd77c60e
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      A = pd.DataFrame.from_dict({"ID": (1, 2), "name": ("Wang", "Li")})
      B = pd.DataFrame.from_dict({"ID": (2, 3), "name": ("Li", "Zhang")})
      U = pd.concat((A, B), ignore_index=True)
      print(U)
    #+end_src  

    #+RESULTS: cf243858-2832-42fd-9fe2-b9c8cd77c60e
    :    ID   name
    : 0   1   Wang
    : 1   2     Li
    : 2   2     Li
    : 3   3  Zhang

    #+NAME: 16893dd9-c598-4f80-a29f-e60f3aa5c242
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      U.drop_duplicates()
    #+end_src

    #+RESULTS: 16893dd9-c598-4f80-a29f-e60f3aa5c242
    :    ID   name
    : 0   1   Wang
    : 1   2     Li
    : 3   3  Zhang
*** 集合运算：交
    - 连接可以反过来定义交
    #+NAME: a57f8e32-7c97-42d6-b585-27f754547d8c
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      pd.merge(A, B, how="inner", on=("ID", "name"))
    #+end_src

    #+RESULTS: a57f8e32-7c97-42d6-b585-27f754547d8c
    :    ID name
    : 0   2   Li

    - 差：无此功能。丑陋的做法如下
    #+NAME: 997c7607-a17b-44ba-8e09-c7f55e541f31
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      pd.concat([A, B, B]).drop_duplicates(keep=False)
    #+end_src

    #+RESULTS: 997c7607-a17b-44ba-8e09-c7f55e541f31
    :    ID  name
    : 0   1  Wang

*** 线性运算 \( \otimes \)
    - 连接运算表征
    #+NAME: 30eb578c-773c-450a-a8c1-27f11a93309b
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      pd.merge(A, B, how="cross")
    #+end_src

    #+RESULTS: 30eb578c-773c-450a-a8c1-27f11a93309b
    :    ID_x name_x  ID_y name_y
    : 0     1   Wang     2     Li
    : 1     1   Wang     3  Zhang
    : 2     2     Li     2     Li
    : 3     2     Li     3  Zhang
*** 线性运算 \( \Pi \)
    #+NAME: 04af3b39-585e-4399-ad02-021d03695ff5
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      A[["name", "ID"]]
    #+end_src

    #+RESULTS: 04af3b39-585e-4399-ad02-021d03695ff5
    :    name  ID
    : 0  Wang   1
    : 1    Li   2

**** 选择 \( \sigma \)
     #+NAME: acd56d64-9b4d-4b31-bc9f-3395b4b0fe3d
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       A.loc[1]
     #+end_src

     #+RESULTS: acd56d64-9b4d-4b31-bc9f-3395b4b0fe3d
     : ID       2
     : name    Li
     : Name: 1, dtype: object
*** 条件选择
    #+NAME: e95625c0-7d08-4867-bde1-ce3e2effacf4
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      A.query("ID == 2")
    #+end_src

    #+RESULTS: e95625c0-7d08-4867-bde1-ce3e2effacf4
    :    ID name
    : 1   2   Li

*** 连接运算 \( \bowtie \)
    - Pandas 的核心，集合运算当作连接的变种
    #+NAME: 1c035867-8a72-4081-94ee-7ee271373453
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      pd.merge(A, B, on="name")
    #+end_src

    #+RESULTS: 1c035867-8a72-4081-94ee-7ee271373453
    :    ID_x name  ID_y
    : 0     2   Li     2
**** 左连接
     #+NAME: cb47d4f1-d319-495a-b148-fb58571d4a03
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
       pd.merge(A, B, on="name", how="left")
     #+end_src

     #+RESULTS: cb47d4f1-d319-495a-b148-fb58571d4a03
     :    ID_x  name  ID_y
     : 0     1  Wang   NaN
     : 1     2    Li   2.0
*** Group By \( \mathcal{G} \)
    #+NAME: 441c8035-5ad0-4787-91c6-b5b479e2ec51
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      classes.groupby("院系").count()
    #+end_src

    #+RESULTS: 441c8035-5ad0-4787-91c6-b5b479e2ec51
    :     班级
    : 院系    
    : 工物   7
    : 物理   4

** 关系代数绘图
*** 图形语法 Grammar of Graphics
    - 在表格与图形要素之间建立映射关系
    - 表格对称的同等层次的列，都可以映射到各类图形要素中
      1. x 轴坐标
      2. y 轴坐标
      3. 颜色
      4. 点形状（圈、三角、方块等）
      5. 线形状（实线、虚线、点划线等）
      6. 点的大小
      7. 线的粗细
      8. 透明度
      9. 子图位置
    - 在绘图时，通过调整映射关系来找到最佳的展现方式
**** 参考书
     - Leland Wilkinson, The Grammar of Graphics （沉痛缅怀 Wilkinson 教授）
     - Hadley Wickham, A Layered Grammar of Graphics
*** Seaborn
    - Python 关系代数绘图实现之一，受到 R ggplot 的影响。
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      import seaborn as sns
      sns.lineplot(x="作业", y="分数", hue="班级", data=class_score)
      <<savefig(figname="img/seaborn_line.pdf")>>
    #+end_src
    
    #+attr_latex: :height 5cm
    #+RESULTS:
    [[file:img/seaborn_line.pdf]]

*** 换成散点图 =relplot=
    #+NAME: 8beae5a0-0655-4338-afa5-e7aa45395813
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      sns.relplot(x="班级", y="分数", style="作业", data=class_score)
      <<savefig(figname="img/seaborn_scatter.pdf", width=6, height=4)>>
    #+end_src

    #+attr_latex: :height 5.5cm
    #+RESULTS: 8beae5a0-0655-4338-afa5-e7aa45395813
    [[file:img/seaborn_scatter.pdf]]
*** 把分数按照点的大小来展现
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      sns.relplot(x="班级", y="作业", size="分数", 
                  sizes=(10, 200), data=class_score)
      <<savefig(figname="img/seaborn_point_size.pdf", width=6, height=4)>>
    #+end_src

    #+attr_latex: :height 6cm
    #+RESULTS:
    [[file:img/seaborn_point_size.pdf]]
*** 把作业映射到子图
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      sns.relplot(x="班级", y="分数", col="作业",
                  col_wrap=3, data=class_score)
      <<savefig(figname="img/seaborn_subplots.pdf", width=18, height=10)>>
    #+end_src

    #+attr_latex: :height 6cm
    #+RESULTS:
    [[file:img/seaborn_subplots.pdf]]
*** 换成柱状图
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      sns.catplot(x="班级", y="分数", col="作业", color="gray",
                  kind="bar", col_wrap=3, data=class_score)
      <<savefig(figname="img/seaborn_bar.pdf", width=18, height=10)>>
    #+end_src

    #+attr_latex: :height 6cm
    #+RESULTS:
    [[file:img/seaborn_bar.pdf]]

** 宽表到长表
*** 表格的等价变换
    - =R= 和 =Pandas= DataFrame 可以将长表与宽表相互转换
      - =SQLite= 不具备此功能
    - =melt= 函数
    #+begin_src python :results output :session lecture-plot
      wide_score = pd.read_sql_query("SELECT * from scores", c)
      print(wide_score.head(3))
      long_score = pd.melt(wide_score, id_vars=["学号"], value_vars=wide_score.columns[1:],
                           var_name="作业", value_name="分数")
      print(long_score.head(3))
    #+end_src

    #+RESULTS:
    #+begin_example
       学号  self.intro  a.b  ...  gpa.calculator  curve.fitting    大作业
    0   1         100  100  ...           113.0             78  128.7
    1   2         100  100  ...           108.0             32   90.0
    2   3         100  100  ...            19.0             94  115.0

    [3 rows x 10 columns]
       学号          作业     分数
    0   1  self.intro  100.0
    1   2  self.intro  100.0
    2   3  self.intro  100.0
    #+end_example
*** =melt=
    - =id_vars= 指定作为索引的列
    - =value_vars= 指定作为数值的列
    - =var_name= 指定长表中组变量的列名
    - =value_name= 指定长表中值的列名
*** Pandas 统计班级平均分
    #+begin_src python :results value file :session lecture-plot :exports both :noweb strip-export
      class_credit = pd.merge(students, long_score, on="学号").groupby(
          ["班级", "作业"], as_index=False)["分数"].mean()
      sns.catplot(x="班级", y="分数", col="作业", color="gray",
                  kind="bar", col_wrap=3, data=class_credit)
      <<savefig(figname="img/seaborn_pandas_bar.pdf", width=18, height=10)>>
    #+end_src

    #+attr_latex: :height 5.5cm
    #+RESULTS:
    [[file:img/seaborn_pandas_bar.pdf]]
*** [100%]少年爱迪生想
- [X] 比较物理系和工物系的男女比例
- [X] 算出大家的总评成绩：
  - [X] 小作业权相等，总体占 65% 的成绩
  - [X] 大作业占 30% 的成绩
  - [X] 划分出不同的分数段，给出某分数段同学的手机号
- [X] 画出各班平均小作业成绩的变化曲线

** Pandas 版总评计算
*** 注入加权权重列
    - Pandas 可像字典一样追加列
    #+begin_src python :results output :session lecture-plot :exports both
      long_score["大作业"] = (long_score["作业"] == "大作业")
      long_score["权重"] = list(map(
          lambda x: 0.3 if x else 0.65 / 8, 
          long_score["大作业"]))
    #+end_src

    #+RESULTS:

*** Group By
    - =as_index=False= 避免分组变量当成 =index= 传入
    #+begin_src python :results output :session lecture-plot :exports both :noweb strip-export
      total = long_score.groupby("学号", as_index=True).apply(
          lambda y: sum(y["分数"] * y["权重"])
      )
      print(type(total))
    #+end_src

    #+RESULTS:
    : <class 'pandas.core.series.Series'>
    - 得到一个 Pandas Series ，可与一维数组类比。是 Pandas 列的组成部分。
    #+begin_src python :results value :session lecture-plot :exports both :noweb strip-export
      students["总评"] = total
      students.query("总评 > 105")[["姓名", "总评", "联系方式"]]
    #+end_src

    #+RESULTS:
    :     姓名         总评         联系方式
    : 49  BY  105.16375  57756152377
    : 55  CE  105.70625  86952597230
*** 比较 SQL 与 DataFrame 的区别
    - SQL 是描述性语言，与函数式编程更接近。
      - 生成的表格不能随意改动。改动只是通过创建新表格实现。
    - DataFrame 是动态结构
      - 可以更灵活地更改；
      - 但过于灵活可能带来调试上的麻烦。
    - SQL 可以处理大于内存容量的数据， DataFrame 必须借助 Spark 等大数据平台才能实现。

** 后备资料
*** 关系代数
    - 关系：\( \{(r, s)|r \in R, s \in S\} \)
    - 关系代数：在集合基础上定义关系运算的封闭系统
      - 封闭系统：运算作用于一个或多个关系上来生成一个关系

    - 围绕关系代数设计的关系数据库是存储海量数据的标准
      - 代表：Structure Query Language (SQL) 语言
    - 关系代数的思想具有一般性： 管理、添加和分析数据
**** 直观理解：一切都是表格
     #+latex: {\scriptsize
     | Event | Channel | Time | Weight |
     |-------+---------+------+--------|
     |     0 |       0 |    1 |    1.1 |
     |     0 |       0 |  1.1 |   1.15 |
     |     0 |       2 |  1.2 |    1.3 |
     |     1 |       3 |  0.8 |    0.9 |

     | Event | Channel | Wave          |
     |-------+---------+---------------|
     |     0 |       0 | [0,0.1,...,0] |
     |     0 |       2 | [0,0.2,...,0] |
     #+latex: }

*** 基本动机
    - 关系代数设计师 Todd，图灵奖工作
    - 数据都应该自我描述
      - 即使数据的存储形式变了，对程序进行操作的程序也不应该改变
      - 反例：链表
      - 反倒：随意写成的 Excel 表格
    - 方便扩展到大规模的数据库中

**** 实用价值
    - 引擎优化与应用分工
    - 引擎：自动 out-of-core computing (超出内存的运算)
    - 引擎：自动并行计算

* 第四周第三天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pe
  :EXPORT_BEAMER_HEADER+: \title{关系代数与回归分析}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-08-03 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 复习与提示
*** 软件安装
    - =lm-examples.tar.gz= 线性回归样例集
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      apt install python3-statsmodels python3-patsy python3-sklearn-pandas
      wget http://hep.tsinghua.edu.cn/~orv/pd/lm-examples.tar.gz
      tar -xf lm-examples.tar.gz
    #+end_src
    - macOS
      #+begin_src bash
      pip3 install statsmodels patsy scikit-learn sklearn-pandas
      #+end_src
*** 关系代数工具组
**** g                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.479
     :END:
     #+BEGIN_SRC dot :file relational.pdf
       digraph python {
       rankdir="BT";

       node [shape=box]
       R [label = "关系代数"]
       R -> H
       H [label = "复合数组\nHDF5表格"]
       D -> H[arrowhead=none]
       R -> D
       D [label = "DataFrame\n中型数据"]
       R -> S
       S [label = "SQL\n大型数据"]
       D -> S[arrowhead=none]
       {rank = same; H; S; D;}
       G -> R
       G[label = "绘图\n图形语法"]
       L -> R
       L[label = "推断\n回归分析"]
       }
     #+END_SRC

     
     #+attr_latex: :height 5.5cm
     #+RESULTS:
     [[file:relational.pdf]]
**** i                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.52
     :END:
     - 以关系代数的数据形式为基础：列的对称性
     - 工具设计变得简单、工具使用变得简单
       - 一行代码绘图
       - 一行代码回归
       - 类比：一行命令实现一个功能
       - 一次原则：只输入必要信息
       - 保证数据的透明：更易于理解
     - 人类更能专注于高层次的概念与问题，不被细节湮没
**** 推论：数据分析最佳工具策略
     - 原始数据尽快等价变换成关系代数形式：站在统计学与图形学巨人的肩膀上
** 线性回归
*** 概念
    - 复习：线性回归，最小二乘法
    |   y | X |
    |-----+---|
    |   2 | 1 |
    | 5.5 | 3 |
    | 6.5 | 4 |
    |   9 | 7 |
    - \( y = \beta X + b \)
    - \( (y, X) \) 是关系，组成表格
    
    - 表格 DataFrame 之上自然进行回归分析
*** 例子：书的重量
**** c                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.549
     :END:
    #+NAME: 59d2d3cb-8f4e-475d-bed4-f28c5a1d702a
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      csvlook lm-examples/books.csv
    #+end_src

    #+RESULTS: 59d2d3cb-8f4e-475d-bed4-f28c5a1d702a
    #+begin_example
    /usr/lib/python3.9/site-packages/agate/utils.py:285: UnnamedColumnWarning: Column 0 has no name. Using "a".
    |  a | volume | area | weight | cover |
    | -- | ------ | ---- | ------ | ----- |
    |  1 |    885 |  382 |    800 | hb    |
    |  2 |  1,016 |  468 |    950 | hb    |
    |  3 |  1,125 |  387 |  1,050 | hb    |
    |  4 |    239 |  371 |    350 | hb    |
    |  5 |    701 |  371 |    750 | hb    |
    |  6 |    641 |  367 |    600 | hb    |
    |  7 |  1,228 |  396 |  1,075 | hb    |
    |  8 |    412 |    0 |    250 | pb    |
    |  9 |    953 |    0 |    700 | pb    |
    | 10 |    929 |    0 |    650 | pb    |
    | 11 |  1,492 |    0 |    975 | pb    |
    | 12 |    419 |    0 |    350 | pb    |
    | 13 |  1,010 |    0 |    950 | pb    |
    | 14 |    595 |    0 |    425 | pb    |
    | 15 |  1,034 |    0 |    725 | pb    |
    #+end_example
**** e                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :END:
    - =hb= 代表 hard back ，硬质纸壳封面封底
    - =pb= 代表 paper back ，软纸封面封底
    - =area= 代表封面的面积
    - =volume= 代表书的页数
*** 读入
    #+NAME: 8e0745ac-1f5b-483e-8c05-fc1ff4e81ab4
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import pandas as pd

      books = pd.read_csv("lm-examples/books.csv", index_col=0)
      print(books)
    #+end_src

    #+RESULTS: 8e0745ac-1f5b-483e-8c05-fc1ff4e81ab4
    #+begin_example
        volume  area  weight cover
    1      885   382     800    hb
    2     1016   468     950    hb
    3     1125   387    1050    hb
    4      239   371     350    hb
    5      701   371     750    hb
    6      641   367     600    hb
    7     1228   396    1075    hb
    8      412     0     250    pb
    9      953     0     700    pb
    10     929     0     650    pb
    11    1492     0     975    pb
    12     419     0     350    pb
    13    1010     0     950    pb
    14     595     0     425    pb
    15    1034     0     725    pb
    #+end_example
*** 绘制重量与页数的关系
    #+NAME: b96d82e2-95b9-4ec9-bc90-838f4571cfcc
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
from matplotlib import pyplot as plt
fig, ax = plt.subplots()
fig.set_dpi(100)
books.plot(x="volume", y="weight", kind="scatter", ax=ax)
    #+end_src

    #+RESULTS: b96d82e2-95b9-4ec9-bc90-838f4571cfcc
    #+attr_latex: :height 4cm
    [[file:ein-images/ob-ein-11a07098e008f2af69410173852c04e9.png]]

    - Pandas 提供与 Matplotlib 的集成
*** =statsmodels= 与 =sklearn=
    - 从 SciPy 分离出独立发展，源于同一团队
    - =statsmodels= 偏重统计学
    - =sklearn= 偏重机器学习
    - 受到 R 的影响很深，是 R 的不完全仿制品；
    - 数据的格式是 DataFrame，与关系代数联系紧密。
*** 线性回归
    #+NAME: aca6129a-4e56-40df-b1ec-05b6199c3333
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      import statsmodels.api as sm
      res = sm.OLS(books["weight"], books["volume"]).fit() # 不够直观
      print(res.summary())
    #+end_src

    #+RESULTS: aca6129a-4e56-40df-b1ec-05b6199c3333
    #+begin_example

                                     OLS Regression Results                                
    =======================================================================================
    Dep. Variable:                 weight   R-squared (uncentered):                   0.974
    Model:                            OLS   Adj. R-squared (uncentered):              0.972
    Method:                 Least Squares   F-statistic:                              521.0
    Date:                Wed, 03 Aug 2022   Prob (F-statistic):                    1.78e-12
    Time:                        11:51:59   Log-Likelihood:                         -93.319
    No. Observations:                  15   AIC:                                      188.6
    Df Residuals:                      14   BIC:                                      189.3
    Df Model:                           1                                                  
    Covariance Type:            nonrobust                                                  
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    volume         0.8193      0.036     22.825      0.000       0.742       0.896
    ==============================================================================
    Omnibus:                        1.234   Durbin-Watson:                   0.778
    Prob(Omnibus):                  0.540   Jarque-Bera (JB):                1.043
    Skew:                          -0.501   Prob(JB):                        0.594
    Kurtosis:                       2.185   Cond. No.                         1.00
    ==============================================================================

    Notes:
    [1] R² is computed without centering (uncentered) since the model does not contain a constant.
    [2] Standard Errors assume that the covariance matrix of the errors is correctly specified.

    #+end_example
*** 结果
    \( y = 0.8193 X \)

    - \( y \) : weight
    - \( X \) : volume
    
**** =sm.OLS=
     - statsmodels 的开发团队有很强的生物信息背景 bioinformatics
       - 好处：在方法论上跨学科，有效地检验方法的普适性
       - 坏处：0类学科与Z类学科侧重点不同。

     - endogenous: 生物学概念，内源性 \( y \)
     - exogenous: 生物学概念，外源性 \( X \)
*** 绘图
    #+NAME: b20c38cc-6321-48a6-9869-bdd084de5ff6
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      pred_ols = res.get_prediction()
      iv_l = pred_ols.summary_frame()["obs_ci_lower"]
      iv_u = pred_ols.summary_frame()["obs_ci_upper"]

      fig, ax = plt.subplots(figsize=(8, 6))
      x, y = books["volume"], books["weight"]
      ax.plot(x, y, "o", label="data")
      ax.plot(x, res.fittedvalues, "r--.", label="OLS")
      ax.plot(x, iv_u, "r--")
      ax.plot(x, iv_l, "r--")
      ax.legend(loc="best")
    #+end_src

    #+attr_latex: :height 3cm
    #+RESULTS: b20c38cc-6321-48a6-9869-bdd084de5ff6
    [[file:ein-images/ob-ein-97b2691b51ac12785f078184af776f16.png]]
*** 残差制图
    #+NAME: 84e9b3cb-dcac-4fbc-9c7a-824d1821c3d4
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      print(sm.graphics.influence_plot(res))
    #+end_src
    
    #+attr_latex: :height 4cm
    #+RESULTS: 84e9b3cb-dcac-4fbc-9c7a-824d1821c3d4
    [[file:ein-images/ob-ein-c1134fa1dec81666839a621c216c8a9e.png]]

*** 回归预测
    #+NAME: 4aee0786-b9e4-4c94-823e-93939cffca66
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both :noweb strip-export
      print(sm.graphics.plot_fit(res, "volume", ax=ax))
    #+end_src

    #+attr_latex: :height 4cm
    #+RESULTS: 4aee0786-b9e4-4c94-823e-93939cffca66
    [[file:ein-images/ob-ein-70f1949dcaf6be10a83fb14c3e559f75.png]]

** 探索性分析
*** 探索性分析
     #+BEGIN_SRC dot :file regression.pdf
       digraph regression {

       node [shape=box]
       G[label = "绘图\n图形语法"]
       L -> G[label="直观\n验证"]
       L[label = "推断\n回归分析"]
       G -> L[label="发现\n新趋势"]
       P[label=预测新现象]
       L -> P
       E[label="设计新实验\n整理新数据"]
       P -> E
       E -> G[label="关系代数"]
       }
     #+END_SRC

     #+attr_latex: :height 7cm
     #+RESULTS:
     [[file:regression.pdf]]
*** 填加自变量
- 书的包装有什么影响？画图探索
#+NAME: 29051508-6402-4b5e-8e92-d6088e097c4b
#+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both :noweb strip-export
   import seaborn as sns
   sns.relplot(x="volume", y="weight", hue="cover", data=books)
#+end_src

#+attr_latex: :height 4cm
#+RESULTS: 29051508-6402-4b5e-8e92-d6088e097c4b
[[file:ein-images/ob-ein-ea93266e4bec3fa426fde0e774edafbf.png]]

*** 更直观的回归公式
    #+NAME: e47c6cd8-c536-47bb-a985-578543ecf349
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
import statsmodels.formula.api as smf

res = smf.ols(formula = "weight ~ volume", data=books).fit()
print(res.summary())
    #+end_src

    #+RESULTS: e47c6cd8-c536-47bb-a985-578543ecf349
    #+begin_example
                                OLS Regression Results                            
    ==============================================================================
    Dep. Variable:                 weight   R-squared:                       0.803
    Model:                            OLS   Adj. R-squared:                  0.787
    Method:                 Least Squares   F-statistic:                     52.87
    Date:                Wed, 03 Aug 2022   Prob (F-statistic):           6.26e-06
    Time:                        12:51:17   Log-Likelihood:                -92.508
    No. Observations:                  15   AIC:                             189.0
    Df Residuals:                      13   BIC:                             190.4
    Df Model:                           1                                         
    Covariance Type:            nonrobust                                         
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    Intercept    107.6793     88.378      1.218      0.245     -83.249     298.607
    volume         0.7086      0.097      7.271      0.000       0.498       0.919
    ==============================================================================
    Omnibus:                        6.203   Durbin-Watson:                   1.030
    Prob(Omnibus):                  0.045   Jarque-Bera (JB):                1.566
    Skew:                          -0.154   Prob(JB):                        0.457
    Kurtosis:                       1.447   Cond. No.                     2.50e+03
    ==============================================================================

    Notes:
    [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
    [2] The condition number is large, 2.5e+03. This might indicate that there are
    strong multicollinearity or other numerical problems.

    #+end_example

*** 多线性回归
- 线性回归可以推广到多个变量

**** 也可以包含离散变量
     - 每个离散变量，实际上对应多个自由参数，个数等于离散变量的取值数
     #+NAME: f5d4bb58-78fe-4fa4-86ba-ba4dcdc25041
     #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
print(books[["weight", "volume", "cover"]])
     #+end_src

     #+RESULTS: f5d4bb58-78fe-4fa4-86ba-ba4dcdc25041
     #+begin_example
         weight  volume cover
     1      800     885    hb
     2      950    1016    hb
     3     1050    1125    hb
     4      350     239    hb
     5      750     701    hb
     6      600     641    hb
     7     1075    1228    hb
     8      250     412    pb
     9      700     953    pb
     10     650     929    pb
     11     975    1492    pb
     12     350     419    pb
     13     950    1010    pb
     14     425     595    pb
     15     725    1034    pb
     #+end_example
       
*** 多线性回归
    #+NAME: 05b99dec-ff7c-497f-8ec5-24ece045bb99
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      g_res = smf.ols(formula = "weight ~ volume + cover", data=books).fit()
      print(g_res.summary())
    #+end_src

    #+RESULTS: 05b99dec-ff7c-497f-8ec5-24ece045bb99
    #+begin_example
                                OLS Regression Results                            
    ==============================================================================
    Dep. Variable:                 weight   R-squared:                       0.927
    Model:                            OLS   Adj. R-squared:                  0.915
    Method:                 Least Squares   F-statistic:                     76.73
    Date:                Wed, 03 Aug 2022   Prob (F-statistic):           1.45e-07
    Time:                        12:53:06   Log-Likelihood:                -84.999
    No. Observations:                  15   AIC:                             176.0
    Df Residuals:                      12   BIC:                             178.1
    Df Model:                           2                                         
    Covariance Type:            nonrobust                                         
    ===============================================================================
                      coef    std err          t      P>|t|      [0.025      0.975]
    -------------------------------------------------------------------------------
    Intercept     197.9628     59.193      3.344      0.006      68.993     326.933
    cover[T.pb]  -184.0473     40.494     -4.545      0.001    -272.277     -95.818
    volume          0.7180      0.062     11.669      0.000       0.584       0.852
    ==============================================================================
    Omnibus:                       14.403   Durbin-Watson:                   1.971
    Prob(Omnibus):                  0.001   Jarque-Bera (JB):               11.516
    Skew:                           1.518   Prob(JB):                      0.00316
    Kurtosis:                       6.034   Cond. No.                     2.77e+03
    ==============================================================================

    Notes:
    [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
    [2] The condition number is large, 2.77e+03. This might indicate that there are
    strong multicollinearity or other numerical problems.

    #+end_example
*** 课堂练习
    - 分析：有否必要把 =area= 加入回归？
** 模型矩阵
*** 模型矩阵
- 细致描述变量的依赖关系，扩展公式的表达 patsy \textipa{["patsi]}
#+NAME: b754f1a2-8936-4580-987a-0fabd77623af
#+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
import patsy

y, X = patsy.dmatrices("weight ~ volume", books, return_type='matrix')
print(X)
#+end_src

#+RESULTS: b754f1a2-8936-4580-987a-0fabd77623af
#+begin_example
[[1.000e+00 8.850e+02]
 [1.000e+00 1.016e+03]
 [1.000e+00 1.125e+03]
 [1.000e+00 2.390e+02]
 [1.000e+00 7.010e+02]
 [1.000e+00 6.410e+02]
 [1.000e+00 1.228e+03]
 [1.000e+00 4.120e+02]
 [1.000e+00 9.530e+02]
 [1.000e+00 9.290e+02]
 [1.000e+00 1.492e+03]
 [1.000e+00 4.190e+02]
 [1.000e+00 1.010e+03]
 [1.000e+00 5.950e+02]
 [1.000e+00 1.034e+03]]
#+end_example
*** 双变量回归
    #+NAME: 4928f31d-d117-41b3-90ac-7babcd920bc4
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
y, X = patsy.dmatrices("weight ~ volume + cover", books)
print(X)
    #+end_src

    #+RESULTS: 4928f31d-d117-41b3-90ac-7babcd920bc4
    #+begin_example
    [[1.000e+00 0.000e+00 8.850e+02]
     [1.000e+00 0.000e+00 1.016e+03]
     [1.000e+00 0.000e+00 1.125e+03]
     [1.000e+00 0.000e+00 2.390e+02]
     [1.000e+00 0.000e+00 7.010e+02]
     [1.000e+00 0.000e+00 6.410e+02]
     [1.000e+00 0.000e+00 1.228e+03]
     [1.000e+00 1.000e+00 4.120e+02]
     [1.000e+00 1.000e+00 9.530e+02]
     [1.000e+00 1.000e+00 9.290e+02]
     [1.000e+00 1.000e+00 1.492e+03]
     [1.000e+00 1.000e+00 4.190e+02]
     [1.000e+00 1.000e+00 1.010e+03]
     [1.000e+00 1.000e+00 5.950e+02]
     [1.000e+00 1.000e+00 1.034e+03]]
    #+end_example
*** 去除截距
    #+NAME: ef3d2292-03e7-4029-a949-78ac2d0cab57
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
# 双变量回归
y, X = patsy.dmatrices("weight ~ volume + cover - 1", books)
print(X)
    #+end_src

    #+RESULTS: ef3d2292-03e7-4029-a949-78ac2d0cab57
    #+begin_example
    [[1.000e+00 0.000e+00 8.850e+02]
     [1.000e+00 0.000e+00 1.016e+03]
     [1.000e+00 0.000e+00 1.125e+03]
     [1.000e+00 0.000e+00 2.390e+02]
     [1.000e+00 0.000e+00 7.010e+02]
     [1.000e+00 0.000e+00 6.410e+02]
     [1.000e+00 0.000e+00 1.228e+03]
     [0.000e+00 1.000e+00 4.120e+02]
     [0.000e+00 1.000e+00 9.530e+02]
     [0.000e+00 1.000e+00 9.290e+02]
     [0.000e+00 1.000e+00 1.492e+03]
     [0.000e+00 1.000e+00 4.190e+02]
     [0.000e+00 1.000e+00 1.010e+03]
     [0.000e+00 1.000e+00 5.950e+02]
     [0.000e+00 1.000e+00 1.034e+03]]
    #+end_example
*** 去除截距拟合
    #+NAME: f88eabb2-a4bb-4c6a-818a-f4e67f41d9c3
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
n_res = smf.ols(formula = "weight ~ volume + cover - 1", data=books).fit()
print(n_res.summary())
    #+end_src

    #+RESULTS: f88eabb2-a4bb-4c6a-818a-f4e67f41d9c3
    #+begin_example
                                OLS Regression Results                            
    ==============================================================================
    Dep. Variable:                 weight   R-squared:                       0.927
    Model:                            OLS   Adj. R-squared:                  0.915
    Method:                 Least Squares   F-statistic:                     76.73
    Date:                Wed, 03 Aug 2022   Prob (F-statistic):           1.45e-07
    Time:                        12:55:51   Log-Likelihood:                -84.999
    No. Observations:                  15   AIC:                             176.0
    Df Residuals:                      12   BIC:                             178.1
    Df Model:                           2                                         
    Covariance Type:            nonrobust                                         
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    cover[hb]    197.9628     59.193      3.344      0.006      68.993     326.933
    cover[pb]     13.9156     59.454      0.234      0.819    -115.624     143.455
    volume         0.7180      0.062     11.669      0.000       0.584       0.852
    ==============================================================================
    Omnibus:                       14.403   Durbin-Watson:                   1.971
    Prob(Omnibus):                  0.001   Jarque-Bera (JB):               11.516
    Skew:                           1.518   Prob(JB):                      0.00316
    Kurtosis:                       6.034   Cond. No.                     3.54e+03
    ==============================================================================

    Notes:
    [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
    [2] The condition number is large, 3.54e+03. This might indicate that there are
    strong multicollinearity or other numerical problems.

    #+end_example

*** 最好的模型1 使用 =area=
    #+NAME: 9d4de03b-2d75-4087-bc51-f727a778c1a6
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      area_only_res0 = smf.ols(formula="weight ~ volume + area - 1", data=books).fit()
      print(area_only_res0.summary()) # AIC = 174
    #+end_src

    #+RESULTS: 9d4de03b-2d75-4087-bc51-f727a778c1a6
    #+begin_example
                                     OLS Regression Results                                
    =======================================================================================
    Dep. Variable:                 weight   R-squared (uncentered):                   0.991
    Model:                            OLS   Adj. R-squared (uncentered):              0.990
    Method:                 Least Squares   F-statistic:                              747.9
    Date:                Wed, 03 Aug 2022   Prob (F-statistic):                    3.80e-14
    Time:                        17:21:10   Log-Likelihood:                         -84.987
    No. Observations:                  15   AIC:                                      174.0
    Df Residuals:                      13   BIC:                                      175.4
    Df Model:                           2                                                  
    Covariance Type:            nonrobust                                                  
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    volume         0.7289      0.028     26.344      0.000       0.669       0.789
    area           0.4809      0.093      5.146      0.000       0.279       0.683
    ==============================================================================
    Omnibus:                       14.845   Durbin-Watson:                   1.885
    Prob(Omnibus):                  0.001   Jarque-Bera (JB):               12.177
    Skew:                           1.542   Prob(JB):                      0.00227
    Kurtosis:                       6.157   Cond. No.                         4.53
    ==============================================================================

    Notes:
    [1] R² is computed without centering (uncentered) since the model does not contain a constant.
    [2] Standard Errors assume that the covariance matrix of the errors is correctly specified.

    #+end_example

*** 最好的模型2 调整 cover 使之只产生 =hb= 参数
    #+NAME: 56f40a73-d101-4f67-98d9-1eeece9d7392
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      y, X = patsy.dmatrices("weight ~ volume + cover - 1", books, return_type='matrix')
      cover_hb_res0 = sm.OLS(y, X[:, [0, 2]]).fit()
      print(cover_hb_res0.summary()) # AIC 174.1
    #+end_src

    #+RESULTS: 56f40a73-d101-4f67-98d9-1eeece9d7392
    #+begin_example
                                     OLS Regression Results                                
    =======================================================================================
    Dep. Variable:                 weight   R-squared (uncentered):                   0.991
    Model:                            OLS   Adj. R-squared (uncentered):              0.990
    Method:                 Least Squares   F-statistic:                              743.2
    Date:                Wed, 03 Aug 2022   Prob (F-statistic):                    3.95e-14
    Time:                        17:20:24   Log-Likelihood:                         -85.033
    No. Observations:                  15   AIC:                                      174.1
    Df Residuals:                      13   BIC:                                      175.5
    Df Model:                           2                                                  
    Covariance Type:            nonrobust                                                  
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    var_0        187.3360     36.572      5.122      0.000     108.328     266.344
    var_1          0.7307      0.028     26.522      0.000       0.671       0.790
    ==============================================================================
    Omnibus:                       13.917   Durbin-Watson:                   1.897
    Prob(Omnibus):                  0.001   Jarque-Bera (JB):               11.018
    Skew:                           1.458   Prob(JB):                      0.00405
    Kurtosis:                       6.020   Cond. No.                     1.71e+03
    ==============================================================================

    Notes:
    [1] R² is computed without centering (uncentered) since the model does not contain a constant.
    [2] Standard Errors assume that the covariance matrix of the errors is correctly specified.
    [3] The condition number is large, 1.71e+03. This might indicate that there are
    strong multicollinearity or other numerical problems.

    #+end_example

** 广义线性回归
*** 概念
- 线性回归中，假设了残差服从正态分布
- \(f(E[Y|X]) = \beta X\)
  - \(Y\) 的期望经过连接函数 \(f(y)\) 与 \(X\) 是线性关系
- 可以在保持高效计算的前提下，把这两个条件放宽，可以大大扩展线性模型的适用范围
**** 种类
- 泊松回归
- 二项回归(生存回归)
*** 课堂任务
    - 尝试对 =r10500.h5= 进行泊松回归
    - 辅助文件 =geo.csv= , =pmtdata.csv=
    #+NAME: fcfd86ca-faa7-4801-a8a2-61006de8c54a
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      PE = pd.read_hdf("lm-examples/r10500.h5", "PETruth")
      PEs = PE.groupby(["EventID", "ChannelID"]).count().reset_index()
      PMT = pd.read_csv("lm-examples/pmtdata.csv", header=0, delimiter=" ",
                        names=["ChannelID", "type", "QE"])
      # 不能种类的 PMT ，预期的信号计数是否一致
      type_count = pd.merge(PEs, PMT)
      y, X = patsy.dmatrices("PETime ~ type - 1", type_count)
      pois_res = sm.GLM(y, X, sm.families.Poisson()).fit()
    #+end_src

    #+RESULTS: fcfd86ca-faa7-4801-a8a2-61006de8c54a

*** 泊松回归拟合结果
    #+NAME: dbd4abeb-6129-4213-9bad-b5a5f9387386
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      print(pois_res.summary())
    #+end_src

    #+RESULTS: dbd4abeb-6129-4213-9bad-b5a5f9387386
    #+begin_example
                     Generalized Linear Model Regression Results                  
    ==============================================================================
    Dep. Variable:                 PETime   No. Observations:               549654
    Model:                            GLM   Df Residuals:                   549650
    Model Family:                 Poisson   Df Model:                            3
    Link Function:                    Log   Scale:                          1.0000
    Method:                          IRLS   Log-Likelihood:            -3.9571e+06
    Date:                Wed, 03 Aug 2022   Deviance:                   5.7277e+06
    Time:                        17:12:27   Pearson chi2:                 7.26e+06
    No. Iterations:                     7   Pseudo R-squ. (CS):              1.000
    Covariance Type:            nonrobust                                         
    ====================================================================================
                           coef    std err          z      P>|z|      [0.025      0.975]
    ------------------------------------------------------------------------------------
    type[HZC]            0.3697      0.002    197.609      0.000       0.366       0.373
    type[Hamamatsu]      3.3682      0.001   5738.410      0.000       3.367       3.369
    type[HighQENNVT]     3.3916      0.000   8503.298      0.000       3.391       3.392
    type[NNVT]           3.2986      0.001   3460.998      0.000       3.297       3.300
    ====================================================================================
    #+end_example

** 回归
*** 支持向量机
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      ### SVM regression
      from sklearn.svm import SVR
      from sklearn.pipeline import make_pipeline
      from sklearn.preprocessing import StandardScaler
      regr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))
      regr.fit(X, y)
    #+end_src
*** 决策树
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      ### GBoost
      from sklearn.ensemble import GradientBoostingRegressor
      from sklearn.model_selection import train_test_split
      X_train, X_test, y_train, y_test = train_test_split(
          X, y, random_state=0)
      reg = GradientBoostingRegressor(random_state=0)
      reg.fit(X_train, y_train)
      reg.predict(X_test[1:2])
      reg.score(X_test, y_test)
    #+end_src
*** 神经网络
    #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
      ### 神经网络
      from sklearn.neural_network import MLPRegressor
      regr = MLPRegressor(random_state=1, max_iter=500).fit(X_train, y_train)
      regr.predict(X_test[:2])
      regr.score(X_test, y_test)
    #+end_src
* 第四周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pf
  :EXPORT_BEAMER_HEADER+: \title{现实案例与未来方向}
  :EXPORT_OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-08-04 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_HEADER+: \setbeamertemplate{footline}[frame number]  
  :EXPORT_BEAMER_THEME: Hannover
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 总复习
*** 黑客技能
**** 科学数据处理的原则                                        :B_alertblock:
     :PROPERTIES:
     :BEAMER_env: alertblock
     :END:
     黑客的审美： _复现_ _透明_ _一次_ _最佳工具_

**** 版本控制
     Git 与队友分工协作，与明天的自己协作

     Git 是“搬砖工地安全帽”，无头盔禁止上岗

**** 关系代数
     数据表示成关系，数据的操作表示成关系代数运算

**** 数据格式
     _透明_ CSV, HDF5, JSON, 数据库 SQL
*** 黑客技能（二）
**** 数据流水线
     GNU Make 管理数据的依赖与转换，实现错误恢复和并行计算

     实现数据层次的 Python/R/Bash/Scheme/SQL 多语言融合

**** 正则表达式
     描述字符串的微型语言，数学模型

**** 命令环境
     POSIX 环境中强大的小工具组合，开发与使用相融合
    
**** 计算语言
     Python 语法友好，工具丰富，统领 C/C++/Fortran/R/SQL 库

** 现实世界的大数据方法
*** 永远留在古老的计算环境
    - SuperK 质子衰变和中微子实验，XMASS 暗物质实验
    - 问题
      1. 数据处理技术发展停滞，违反“最佳工具”原则
      2. 新成员需要花精力学习旧技术，人力浪费
    - 解决方案：test-driven development

*** 自制二进制格式
    - KamLAND，JUNO 中微子实验
    - 问题
      1. 除了指定的 C++ 工具库，无法读取中间结果，违反“透明”原则
      2. 新成员必须学习非通用的数据接口和方法，门槛高且无用
      3. 数据格式与库深层绑定，必须同步升级，新库无法读取旧数据
    - 解决方案：使用指定语言，以最小代码开发不透明数据到透明关系数据（例如 HDF5）的转换器
      - 数据格式转换器比函数跨语言调用更可靠，有效解耦合
      - 如 Python 调用 C++ 和 R 容易出现内存管理问题。

*** 自制二进制格式（二）
    - SuperK 中微子实验的 Zebra 格式
    - 问题
      1. 格式已经被上游团队遗弃，除了指定的 Fortran 77 工具库，无法读取原始数据，违反“透明”原则
      2. 无法升级，必须维护旧计算环境才能运行 g77-3.4 （2004 年版本）
    - 解决方案：使用新 Fortran 语言研发 Zebra 到 HDF5 的转换器

*** 自制 Python 驱动的批量处理流水线
    - 症状问题
      1. 使用 Python 调用大量 shell 命令，程序可读性差，违反“最佳工具”原则
         #+begin_src ein-python :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture-python.ipynb :exports both
           for name in args.name:
             if name not in productions:
               print('Unknown production: ' + name)
               continue
             for script in productions[name]:
               parg = arguments + ' --name %s ' % name
               print('python %s %s' % (script, parg))
               os.system('python %s %s' % (script, parg))
         #+end_src
      2. 流水线验证 flag 文件是否存在来确定是否成功执行，误判多，难以 debug
    - 解决方案：使用 GNU Make 构建流水线
      - =make= 默认使用 =/bin/sh= 执行命令。 =SHELL=/bin/sh=
      - 把 =SHELL= 换成提交任务给超级计算机集群的脚本
        #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
          SHELL=lsf
          export MAKE_TARGET=$@
          export MAKE_SOURCE=$^
        #+end_src
*** =make= 对接集群的脚本
    #+begin_src ein-bash :results output :session https://dpcg.g.airelinux.org/user/xubd/lecture.ipynb :exports both
      #!/home/jinping/gentoo/bin/bash -e
      # Platform LSF wrapper to be used as GNU Make shell.

      # GNU Make convention for the first argument.
      [[ ${1} = '-c' ]] && shift

      for j in ${MAKE_SOURCE}; do
          [[ -z $(bjobs -J ${j}) ]] && continue
          DEP+=" && done(${j})" # 把 make 中的依赖关系传递给调度系统
      done

      cat << EOF > ${MAKE_TARGET}.sh
      #!/home/jinping/gentoo/bin/bash
      $@
      EOF

      chmod +x ${MAKE_TARGET}.sh

      bsub -q normal"${DEP}" -J ${MAKE_TARGET} -o ${MAKE_TARGET}.log ${MAKE_TARGET}.sh
    #+end_src
** 计算历史
*** 计算历史：大型机
    #+Attr_LaTeX: :height 0.7\textheight
    [[./fig/main-frame.jpg]]

    - 一台大型计算机，用户通过终端 (Terminal) 连接
*** 计算历史：个人计算机
    - 1981年

    #+Attr_LaTeX: :height 0.7\textheight
    [[./fig/ibm-pc.jpg]]
*** 计算历史：个人计算机组成集群
    - 1990s 个人计算机组成集群 "beowulf"

      #+Attr_LaTeX: :height 0.65\textheight
      [[./fig/computer-cluster.jpg]]

*** 高性能计算与超级计算机
    #+attr_latex: :height 6cm
    [[./fig/supercomputer.jpg]]

    - 更大的计算机集群，优化节点间的通信，共享存储。
    - 软件环境如何配置？
** 软件分发与环境整合
*** 概念
     #+BEGIN_SRC dot :file distribution.pdf
       digraph distribution {

       node [shape=box]
       U0[label = "上游作者\nSeaborn"]
       U1[label = "上游作者\nNumPy"]
       U2[label = "上游作者\nmake"]
       U3[label = "上游作者\nSQLite"]
       U1 -> D1
       U2 -> D1
       U3 -> D1
       D1[label = "环境整合\nDebian\nArch\nUbuntu\nGentoo\nConda"]
       U1 -> D2
       U0 -> D2
       D2[label = "语言管理\npip\n"]
       D1 -> S
       D2 -> S
       S[label = "用户环境"]
       }
     #+END_SRC

     #+attr_latex: :height 6cm
     #+RESULTS:
     [[file:distribution.pdf]]

     - =pip= 没有整合测试，只适合早期试验个别最新 Python 软件，长期维护性差。
     - 整体生产方案对应多种软件的稳定版本，经过应跨语言整合测试。
*** 环境整合分发方案
    - 第三方测试整合提供环境，防止被某上游垄断并偷藏私货
      - Malicious PyPI package opens backdoors on Windows, Linux, and Macs
        #+begin_example
        Allows a remote attacker to gain unauthorized access to the application.
        #+end_example
      - =pip= 的软件没有经过第三方测试验证，使用意味者相信上游软件作者。
      - 环境整合方案会有负责安全、兼容和性能的团队，有大量同样环境的用户反馈问题。
    - Debian/Arch/Gentoo 志愿者形态与 Ubuntu/Conda 公司免费形态
      - 志愿者形态的开发团队没有利益关系，人们由于共同的兴趣走到一起。
        - 无人能强制整个项目的走向，集体决策。
      - 公司免费形态利用免费服务吸引用户，构建潜在的客户池或者暗藏广告潜移默化改造用户。
        - 产品服务于公司的盈利或扩大影响的战略，代码由雇工产生。
**** 不推荐用作科学计算和数据分析
      - Ubuntu 的源代码 95% 从 Debian （合法）复制，外加公司定制
      - Conda 的依赖关系的计算效率极低，但在公司层面调动外宣经费公关推广
*** 只有普通用户权限
    - 安装和升级软件需要系统管理员权限，具体体现为在 =apt= 前加 =sudo= 。
    - 课题组共享的服务器、超算中心的登录节点无权限怎么办？用户态软件管理

    |               | 成熟的     | 去中心     | 海量软件   | 超算中心   | 续本达                |
    |               | 管理工具   | 研发       | +物理学  | 采用       | 召集                  |
    |---------------+------------+------------+------------+------------+-----------------------|
    | Gentoo Prefix | \checkmark | \checkmark | \checkmark | \checkmark | \checkmark \checkmark |
    | nix/guix     | \checkmark | \checkmark | \checkmark |            |                       |
    | Spack         | \checkmark |            |            | \checkmark |                       |
    | conda / mamba |            |            |            |            |                       |
**** 参考
     #+latex: {\scriptsize
     Benda Xu, G. Amadio, F.Grffen, and M. Haubenwallner. “Gentoo Prefix as a Physics Software Manager.” EPJ Web of Conferences 245 (2020): 05036.
     #+latex: }
*** 推荐：软件管理与环境配置
    #+latex: {\Huge
    - 自己的机器用 Debian
    - 别人的机器用 Gentoo Prefix
    #+latex: }
** 讲义
*** 建设状况
    - https://git.tsinghua.edu.cn/physics-data/lecture
**** c                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.55
     :END:
    #+begin_src bash :results output
head -q -n1 lecture/l*.org
    #+end_src  

    #+RESULTS:
    #+begin_example
    ,#+TITLE: 第一讲 实验物理的大数据方法总论 DONE
    ,#+TITLE: 第二讲 Python基础 DONE
    ,#+TITLE: 第三讲 复合类型与函数 DONE
    ,#+TITLE: 第四讲 Python 模块 DONE
    ,#+TITLE: 第五讲 数组 DONE
    ,#+Title: 第六讲 数据格式 DONE
    ,#+Title: 第七讲 数据绘图 TODO
    ,#+Title: 第八讲 蒙特卡罗方法与大作业 TODO
    ,#+Title: 第九讲 GNU 命令行 TODO
    ,#+Title: 第十讲 GNU Make 数据生产线 TODO
    ,#+Title: 第十一讲 正则表达式 TODO
    ,#+Title: 第十二讲 bash 脚本 TODO
    ,#+Title: 第十三讲 关系代数 TODO
    ,#+Title: 第十四讲 DataFrame 表格数据结构 TODO
    ,#+Title: 第十五讲 关系代数与回归分析 TODO
    ,#+Title: 第十六讲 现实案例与未来方向 TODO
    #+end_example
**** e                                                                :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.45
     :END:
     - 给讲义仓库提 issue 和 merge request ，可获得伍分。
** 下一步学习
*** 数据时代的物理技能
    [[./out/Data_Science_VD-migrate.pdf]]
*** 概率是逻辑的扩展 -- Cox 定理
    - Laplace: probability theory is nothing but common sense reduced to calculations.
    - R. T. Cox, E. T. Jaynes，两位对统计学有重大贡献的物理学家
    - Logical interpretation of probability
      1. Divisibility and comparability -- The plausibility of a
         proposition is a real number and is dependent on information
         we have related to the proposition.
      2. Common sense -- Plausibilities should vary sensibly with the
         assessment of plausibilities in the model.
      3. Consistency -- If the plausibility of a proposition can be
         derived in many ways, all the results must be equal.
    - 概率论的唯一性：
      Any system for plausible reasoning that satisfies certain
      qualitative requirements intended to ensure consistency with
      classical deductive logic and correspondence with commonsense
      reasoning is isomorphic to probability theory.

      #+latex: {\scriptsize
      参考：Van Horn, K.S., 2003. Constructing a logic of plausible
      inference: a guide to Cox’s theorem. International Journal of
      Approximate Reasoning 34, 3–24.
      #+latex: }

*** 以本课程为起点
    - 函数式编程：一切都是函数
      - 无状态，从而容易从错误中恢复
    - MapReduce：分布式大数据系统的开始
      - 在之上建立了关系代数：
      - Apache Hive，SparkQL，etc.
**** 竞赛
    - JUNO 大作业 \to Ghost Hunter 2022 中微子数据分析排位赛
      - 概率统计分析及量测技术课赛结合
    - GRID 大作业 \to 2022 天格联盟邀请赛
*** 技术问题：TUNA 协会
    - 清华大学学生开源软件与网络技术协会
    - TUNA 主页 https://tuna.moe/
    - TUNA 技术群，黑客（广义）技术问题探讨
*** 致谢
    #+attr_beamer: :overlay <+->
    - 顾问 :: 宁传刚教授、曾鸣教授、郑鈜壬
    - 助教 :: 学长学姐们
      - 张卓婧、陈晟祺、陈嘉杰、刘晓义、王宇逸、刘一芃、于明杨、高一川、张爱强、刘学伟、武益阳
    - 小助教 :: 苟诗涵、晏越、陈泽洲、吴限来、赵一飞、吴震鹏
    - 克服困难上课的同学们 :: 谢谢！
** 答疑
*** C 盘已满，把 WSL 移动到其它盘
    1. =wsl -l --all -v=

        列出所有的 WSL 环境，确定要升级环境的名称
    2. =wsl --export debian e:\\wsl-20220804.tar=

        备份当前环境到 =E:= 盘
    3. =wsl --unregister debian=

        注销 WSL 环境
    4. =wsl --import debian d:\\debian e:\\wsl-20220804.tar=

        导入刚备份的环境到 =D:= 盘
    
    5. =debian config --default-user heroxbd=

        导入后默认用户会变成 root，这一步把默认用户修改回来（把 heroxbd 改回自己的 WSL 内用户名）
*** 如何升级 WSL 中的操作系统
    1. =wsl --export Ubuntu-20.04 e:\\wsl-20220804.tar=

       备份已有 Ubuntu 环境到 =E:= 盘
    2. 把 Ubuntu 20.04 升级到 Debian 11
       - 修改 APT 源
       - =apt update=
       - =apt full-upgrade=
**** 参考资料： Ubuntu 14.04 升级到 Debian 10
     #+latex: {\scriptsize
     http://hep.tsinghua.edu.cn/~orv/distfiles/20201102-Ubuntu_Debian10.mp4
     #+latex: }
* 2020 第四周第四天
  :PROPERTIES:
  :EXPORT_FILE_NAME: pf
  :EXPORT_BEAMER_HEADER+: \title{面向未来}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-09-10 清华线上
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 大作业网站
   https://dc.applysquare.com/

   - 如果算力不够，请向教学团队求助
   - 联系物理系和工物系学生科协

** 技能集合
   #+Attr_LaTeX: :height 0.65\textheight
   [[./fig/Data_Science_VD.png]]

   - 数据时代需要 *专业知识* 、 *数理统计* 和 *黑客技术* 等多方面技能。
** 黑客技能
*** 科学数据处理的原则 :B_alertblock:
    :PROPERTIES:
    :BEAMER_env: alertblock
    :END:
    黑客的审美： _复现_ _透明_ _一次_ _最佳工具_

*** 版本控制
    Git 与队友分工协作，与明天的自己协作

    Git 是“搬砖工地安全帽”，无头盔禁止上岗

*** 关系代数
    数据表示成关系，数据的操作表示成关系代数运算

*** 数据格式
    _透明_ CSV, HDF5, JSON, 数据库 SQL

** 黑客技能（二）
*** 数据流水线
    GNU Make 管理数据的依赖与转换，实现错误恢复和并行计算

    实现数据层次的 Python/R/Bash/Scheme/SQL 多语言融合

*** 正则表达式
    描述字符串的微型语言，数学模型

*** 命令环境
    POSIX 环境中强大的小工具组合，开发与使用相融合
    
*** 计算语言
    Python 语法友好，工具丰富，统领 C/C++/Fortran/R/SQL 库

** 以本课程为起点
   - 函数式编程：一切都是函数
     - 无状态，从而容易从错误中恢复
   - MapReduce：分布式大数据系统的开始
     - 在之上建立了关系代数：
     - Apache Hive，SparkQL，etc.
   - 信号处理：《信号与系统》课程们
   - 统计学习与机器学习
     - “深度学习”是商业概念，即多层神经网络加大数据训练
     - 黑客技术基础，为统计学习与机器学习提供了基本环境
     - 基本接口都是 =fit(y, X)=
       - sklearn, xgboost, etc.
** 计算历史：大型机
   [[./fig/main-frame.jpg]]

   - 一台大型计算机，用户通过终端 (Terminal) 连接
** 计算历史：个人计算机
   - 1981年

   [[./fig/ibm-pc.jpg]]
** 计算历史：个人计算机组成集群
   - 1990s 个人计算机组成集群 "beowulf"

     #+Attr_LaTeX: :height 0.65\textheight
     [[./fig/computer-cluster.jpg]]

** 高性能计算与超级计算机
   [[./fig/supercomputer.jpg]]

   - 更大的计算机集群，优化节点间的通信，共享存储。

** 虚拟机与云计算
   - 虚拟机：软件模拟计算机
   - 云计算：开放平台，自动生成虚拟机

** 技术问题：TUNA 协会
   - 清华大学学生开源软件与网络技术协会
   - TUNA 主页 https://tuna.moe/

   - TUNA 技术群，黑客（广义）技术问题探讨

** 中微子 NUS Seminar
   - 9月11日下午1点，新水301与 zoom 621 219 8453

     答疑现场+远程

   - The Saga of Neutrino Oscillation

** 教学团队
   #+attr_beamer: :overlay <+->
   - 教师续本达 :: 对，我就是那个最菜的。
   - 助教 :: 他们是最强的：
     - 郑鈜壬 :: 请叫我红人，星际玩家，我的 bug 全都是 feature。
     - 陈嘉杰 :: 嘿嘿嘿，这不够好玩，为什么不讲 Rust。
     - 陈晟祺 :: 我是 +Harry Chen+ 蛤蜊橙，bug 小王子，不信你试试。
     - 刘学伟 :: 哇，这也太强了吧，但是我早已搞定，呵呵。
     - 张卓婧 :: 卓卓什么资料都有，卓卓什么都会。
     - 翁俊 :: 这也太简单了吧，你套个公式不就算出来了。
     - 少年爱迪生 :: 学长们作业做得开心吗？不要问我谁是迪生，问[[https://cloud.tsinghua.edu.cn/d/ca4dc48637e4432b88f0/][这里]]。
** 教学团队
   #+attr_beamer: :overlay <+->
   - 快乐的学长 :: 暗中观察受不了的时候就会说话。
     - 高一川 :: 我会七十二般变化，高二川、高三川、大一川、大二川、大三川、大四川、研一川
     - 付祈安 :: 我见到学弟学妹就会触发 _付钱_ 的被动技能
     - 刘晓义 :: 喵喵跑得快
   - 小助教 :: 来自同学中间
     - 李子鸣、陈烁天、尹嘉恒、王宇昂、徐大成、孙鑫礼
     - 孙嘉祎、陶泓耕、胡鸿源、王雨晴、孙泽昌
** 致谢
   - 顾问 :: 毛淑德教授、郝镇齐博士、冯骅教授、翟荟教授
     - 阮东教授、陈少敏教授
* meta
  - [ ] 讲义 working-in-progress，Git 练习 / 加分
  - [ ] faq site / 加分
  - [ ] 提问的智慧 / 黑客的精神

* 总结
** 海天盛筵
   8月份，教学团队享用了一顿海天盛筵，故而有这个名字，只是可惜没有拍照。我很喜欢这个词，我觉得上课的过程真是一场享受，用这个词描绘再好不过了。我希望能把其中的敏感引申义去掉，把这个词从废青们那里夺回来。

   从 2019 年小学期上过课到现在，我几乎每次和朋友的闲谈都会无意中谈起小学期上课的感觉。这好比一个刚生了娃的母亲，三句话之内必提起自己的孩子一样，我好像入戏太深了。

   感谢助教呕心沥血的付出，感谢同学们在课上课下与我热情地互动，讨论和吐槽，帮助和鼓舞我完成了一个我和前辈们无法想象的高强度课程。到了最后一周，我已经没有了力气在课内休息时走到同学中间和大家聊天，只是默默坐在窗子旁边，静静看着大家还在对课上的内容进行着分享和讨论。那一天，我在课间倚着窗台望着洒在树梢的斜阳，听着教室里同样细细簌簌的讨论声音，不禁感叹我定会很快怀念并迷恋这种感觉。果然，结课之后，我还是会经常想起那时内心的宁静的感觉。

** 备课，焦虑并欢乐着
   开始我觉得授课的强度将是不可想象的：每天4节课，每周4天，从零开始设计课程，没有参考，想想都会觉得自己会累得飞起来，找不到东南西北。所以一开始的设想是，提前把讲义写完，这样能让自己整个七月份压力相对小一点。故而我想6月份 Ghost Hunter 决赛之后，就好好备课吧。然而我真的应了戈亮总结的青年教师第一定律：永远希望开课前备足课，但是永远无法达到。到了6月底，我还是没有把讲义写好，只是有一个细化的大纲，眼看着同学们都已经开始开心地选小学期课程了，我真的想穿越回去把自己捏死。

   不过这期间也没有完全闲着，我参考了一门 Charles Russell Severance 的 Python for Everyone 的课程，一门苏勇的《Linux 入门基础》，一门南京大学张莉的《用 Python 玩转数据》。希望把听课时做的笔记变成我的讲义。可是最后发现笔记是记了不少，但是与我想要讲授的内容重叠并不多。此外，最重要的事，是请到了蛤蜊、杰哥和爱强做我的助教。似乎有个谣传说小学期是不设助教的，我也没有求证。但是我很清楚这门课如果没有助教，会被我祸害到什么程度。可是到了月底快开课时，我还是很焦虑，毕竟第一次课要讲什么都还没有想清楚。

   第一次开会是2019年6月24日，教学团队以及所有对课程感兴趣的同学都到了，有郑煦韬、龙翔云（讨论大作业设计）、杰哥、付主席、刘喵喵、张爱强、唐如麟、一川。我还从校外赶回来光荣地迟到了。会上，同学们给我的压力比教学委员会还大。一个焦点是，为什么要设计这么难的大作业，而且还要每周一个大作业，占大多数分数。大家本来开心上小学期水水更开心，我压了这么大的担子，同学们会起义的。我说如果难，我们可以降低难度，但是还是要模拟科研的场景，为同学们大三进入科研训练做好准备。大家争论不休，最后各方达成一致采用唐如麟的大作业方案：同学只需要做一个大作业，占30%，分成两个阶段，第一阶段是生成，第二阶段是分析。这样，同学有充分的时间深刻理解大作业所描述的物理实验场景和内部机制，而且也可以放弃做大作业以70%的小作业成绩低空水过。事实证明这个方案设计得非常巧妙，我真的幸运在开课之前组织了这一场讨论。

   第二个焦点是讲义要不要详细写，我知道自己的德性，看起来是万难写出来的。于是我狡辩说：“我还是列一条主线，直接讲，作为实践性课程，真的那么需要讲义吗？”一川和付主席异口同声道：“你觉得同学们会听课吗？过去会的听了课还是会，不会的听了课还是不会，完全没有用啊！你还不如厚道一点，贴出个讲义，大家至少还能参考着写作业。”我也急了：“那还要我开课做甚么！我把参考书一指定，写一点学习材料，大家都快活，把课取消算了。”大家齐声道：“当然要开课啊！不然怎么拿学分，怎么完成培养方案。”接着有同学说：“我觉得教编程的课都没什么用，看语言定义就能高效完成的事，为什么还要讲一个月课。”我在争论中，陷入了无限的自我怀疑之中，再想想我自己也是自学的，同学们的讨论真是给我进行了一场长达几小时的灵魂拷问，让我死去活来。在这个信息爆炸的时代，学习资料极大丰富，还要课堂做什么？还要老师和大家面对面上课做什么？不回答这个问题，就真的没办法开课。这使我更加压抑，如同泰山压顶一般，过了好多天，我才勉强有了一个回答：我只讲前人没有讲过的或者以某种方式表述过的内容，一切网上有的资料我都以参考资料给出。但是如果我只讲新内容，我的专业水平够吗？这也是我回答不了的，最幸运的是，我得到了蛤蜊、杰哥、喵喵等计算机系科班同学的帮助，还有宇翔和主席的内容建议，他们保证了我讲授的内容不至于出现根本错误。

   最后，我在付主席的挟持下，写出了第一周细化的大纲。会上付主席一直保持批判的态度，说的最多的是三句话：“你这样做会坑死助教的”，“你这样做会坑死同学的”，“心疼助教心疼同学”。我被拍得怀疑人生，所以当付主席说“那么我们来把每天讲什么定下来吧！”我非常振奋地照做了，大家七嘴八舌，总算把第一周和后面要讲的内容定了下来。半夜，我拖着疲惫的身躯，揣着对教学的怀疑，翻来覆去睡不着。唯一让我感到一丝欣慰的，就是一张写着第一周详细教学计划的纸。


   到了马上开课的时候，爱强、蛤蜊、杰哥、一川和我又开了个会，确定了小作业的形式为 GitHub Classroom，这样可以保证大家即使忘了课上学了什么，至少通过作业题入门了 Git，也算是我的最低目标了。作业给分为黑盒 80%，白盒 20%。小作业不使用 Online Judge，大作业第二阶段借用竞赛平台实行课赛结合。这次会和前一次的风格完全不同，课程准备进行得非常顺利。我突然觉得面对迷茫，无论从生活跳到哲学，还是从哲学跳到生活，只要切换了模式，都可以对自己起到稳定的作用。

   开课的那一天，好多人潜到了最后一排来棒场，看我的开场白。从前来听课的大佬们的反馈来看，效果蛮不错的。我才舒了一口气，看来我已经进入了教学的激跃状态。

** 小学期奇遇记
   不论如何，每天四学时，每周四天的教学强度都是很难扛得住的。我和老教授们交流时，大家都觉得第一次开课就这么高的强度，真是比登天还难。于是最初的设计是上一堂课，练习一堂课，相当于我每天只讲两学时，让同学们在课堂上就把作业都做完了，大家都很开心。然而现实非常不一样，课上大家都很放松，和我的互动很多，大家像在一起谈心一样就上完了四节课。实际上，讲授和练习没有分开，融为一体了，这是我始料未及的局面。同学们驱动了上课的形态，比我预先设定的更好。这让我非常开心，也非常自豪。

   课程预备会上顾问们对我提出的最大质疑“课备好了吗？”真的应验了。我首先备了三天的课，但是课程进展得太快，我的备课速度根本追不上讲课，最后变成了“敏捷备课”。“敏捷备课”看起来很高大上，实际上是助教和顾问们黑我的。在软件工程中“敏捷开发”的意思是把工作流程变成一个 pipeline，没有阶段性准备，一直都在生产(上课)一直都在开发(备课)，边生产边开发，开发出来的东西马上投入生产。现备课现上课，这在课堂上是要出教学事故的，因此除了最开始的三天，后面我一直都是如履薄冰。在那一个月中，我连做梦都能梦见助教们围着我说“敏捷备课”“教学事故警告”，神经高度紧张。好在一年以来，我自己学习了大量类似的课程，做了很多笔记，一些“教学定势”留在了脑海里。同时，在 TUNA 协会的金枪鱼之夜活动 (tunight) 中，技术分享的风格非常适合技术实践类的小学期课程，给了我巨大的启发。最重要的是，同学们的互动和快速反馈，为课程的内容做出了巨大贡献，让课堂时间更有针对性，弥补了我备课上的严重不足。所以我每天的生活状态是，上午在焦虑中度过，总是觉得下午的课准备得太少。下午，开始上课，我就神奇地进入了宠辱偕忘的状态，不知不觉就完成了课程。而且，我觉得自己遇到一个很难的教学挑战，反而抛弃了心中的完美主义执念，不对自己要求太高，彻底放飞了自我。如果一次上课准备的内容太少，三节课讲完了四节课的内容，没问题，直接放学就好了。如果我课上给大家要展示的效果没实现，翻车了，没问题，告诉大家这就是技术不同于科学之处，翻车和调试就是日常，老司机也会翻车。大家七嘴八舌打乱我原有的教学设计，没问题，同学们对一个问题感兴趣，我们就深入讨论下去，把疑问搞透。于是在这一个月里，我最焦虑的是每天晚上，最忙的是每天上午，最开心的是每天下午。

   论欢快的课堂气氛，一位奇才同学功不可没。我第一天走进教室，奇才就跟我打招呼说“学长，我是特地为了来支持您工作选的您的课，顺便鄙视一下 XXX 同学，他作为您的直系校友竟然在关键时刻叛逃了”，我觉得有趣，以为只是玩笑。但是后面的课程里，奇才简直成了课程的主角。在课上，她非常积极地思考，心直口快地提问题，把我没有讲到的知识点都彻底覆盖了一遍。这让我这个“敏捷备课”的不合格教师在课堂现场实现了迅速迭代，迅速弥补了知识的盲点。她的提问还激励了其他同学积极提问和讨论，原来大家都怕自己的问题太幼稚不敢说话——这是当前教育环境不争的事实——但是看到奇才的问题都那么基础，大家也就没有了心理负担，经常还能大范围讨论起来。我觉得我作为一名教师，上课最幸福的时刻莫过于被同学们打断，我静静地站在一旁，看着同学们就我刚才讲的话题自发地讨论，那种感觉，真是太美好了。大家知道，这样做其实是有风险的，许多人是不太喜欢经常接老师话头并打断老师思路的同学的，所以奇才同学确实是在支持我的工作。令人惊叹的是，奇才生成了一种傻白甜的形象，浑然天成地活跃了课堂气氛，引出了更大范围同学的讨论和参与。为什么说是“生成”的傻白甜，而不是真傻白甜呢？因为到了大作业的第二阶段，奇才露出了她学霸的凶恶原形，硬生生用双眼看了大作业中的几万张图片，总体出近十条经验公式，烧10个G的手机流量，屠了大作业的积分榜。我也在反思，几万张图片是不是罔称“大数据”，2020年的大作业得从一百万起步。线上听课的同学和朋友们不止一次问我，在课上一直提问的同学到底是不是我的托，但是我自己也不知道啊。我知道的是，在改革开放初期，我们辽源人确实是这样闻名全国的。

   我都已经把课上成了“敏捷备课”，一个月以来没有任何精力做备课和上课以外的事，甚至是作业的设计和批改都没有精力顾及。学校并没有为小学期设助教岗位。可以想见，如果只是我一个人承担这些任务，必然是一直捉襟见肘，必然是顶不住的。事实上，我一人在教学团队中的工作和发挥的作用甚至不到一半，剩下的一大半都是助教同学完成了。我真是非常幸运有蛤蜊、杰哥、爱强的全程鼎力相助，还有一川、宗煜、镇齐和喵喵从各个方面的支持，不然这门课会变成样子简直不堪设想。为什么这样说呢？课程的内容决定了它是任务驱动的，大作业贯穿整个课程。这相当于一场集训，如果不把所学内容马上应用到实践上，纸上谈兵就不会有任何意义。从这个角度来讲，这门课的作业是比较课堂讲授更重要的，甚至说讲授完全是为了作业服务都不为过。这也是我完全没有要求出勤的原因，即使学生不来上课把作业完成，也是可以拿 A+ 的。大作业的设计思路沿用了唐如麟的方案，第一阶段生成，第二阶段分析，思路清晰，同学们非常好理解。但实际操作起来需要消耗大量心血。在生成阶段，需要准备详细的物理学背景说明。有许多知识点，是我的盲区，我发现自己确实力不从心。镇齐和宗煜友情出场和文档准备，爱强配合镇齐完成了衔接工作，把作业设计得非常有科学意义和严谨性同时又非常有趣。从某位同学的评价中，“这是我做过的最 Cool 的大作业”，可见一斑。而另一份课赛结合的大作业也是凝聚了科协同学们的心血，整整 用了一年的时间筹备才锤炼出来。这不仅包括文档，还有第二阶段大作业的竞赛平台，它们给同学们以非常新的作业体验，可以看到大家做作业的过程都很开心。蛤蜊是整个大作业的汇总者和质检员，文档、数据最后都由他来把关发布，所以几次突击，他都是最后一位睡下的。作业的批改需要花的精力更多，因为每一位同学都有独特的解法，是一个很烧脑的过程，这里杰哥为课程特地开发的批作业工具与蛤蜊写的网络学堂 learn-helper 一起发挥了有力的支撑，把批作业过程中的重复劳动都自动完成了，让大家专注于本质。大作业的工作量还是很大，爱强、宗煜、蛤蜊、一川和杰哥都上了，一连批改了一个多星期才完成。

   我也鼓励同学们自己提出大作业，有两位同学尝试，但是最后没有能够设计完全。是这次的一个遗憾，今后如何让同学们做自己大作业，值得深入地探究。

   不用提大作业，小作业中更是体现了几位助教是多么用心。为了增强作业的趣味性，蛤蜊带头按照 OI 竞赛和 ACM 竞赛的出题风格，给每个作业都加了一段童话故事。不仅如此，童话故事们还是连载的，故事的主角芃芃秒天秒地，一个未成年人就已经开启了开挂的人生，在通往人生淫家的路上飞奔。芃芃的故事影响力太大，连物理系科协的伟大内容建设运动“维饥百渴”都采用了与芃芃相关的名字。更刺激的是，芃芃还从童话世界走进现实，每天都混进课堂暗中观察，不时露出邪恶的得意的微笑，给本来欢快的课堂平添了几份魔幻现实的色调。除去小作业的魔幻部分，它们的任务设计都紧扣课程内容，甚至对课程内容作出了指引。几位助教一直在观察着大家的反馈，及时调整了小作业的难度，给同学们提供了贴心的反馈。杰哥的自动批作业工具表现出色，许多作业只要设计好，基本上是一键出分。在杰哥自己的主页上，他把这个工具打出了最高的趣味性，令我深感欣慰。蛤蜊的 learn-helper 也在批作业的过程中，加入了助教和老师的功能，格外好用。而蛤蜊的最得意之作，GPA calculator，是我们在月夜下躺在紫操上，伙同宇翔和主席，喝着快乐水咬着坏人的哈尔滨红肠想出来的。也是在在那个夜晚，宇翔和主席的几点鼓励和肯定，与助教们的“药丸”、“教学事故预定”、“敏捷备课”等担心奇妙地中和了，在我自我怀疑的关头，给了我信心。作业的提交完全通过 Git 进行，这是我的最低要求。当代的科研项目中，团队协作是最基本的要求，Git 正是代码和论文协作的神器。即使学生从课堂上什么都没有学到，在一个月作业的潜移默化中，学会使用 Git，理解版本控制也是值得的。使用 Git 的另一个深远的影响是，它大大提高了作业抄袭和伪造的成本，为良好的学风建设发挥了不可磨灭的作用，在第一年就彻底逆转了物理系小学期祖传作业的陋习。出人意料的是，这一副产品得到了已经毕业的系友们的高度评价。

   令我最为开心的是，即使我没有要求出勤，即使我课程在暑假小学期，大家来上课的热情都非常之高。第一天到最后一天，我没有看到显著的人数变化。而从最后一天的匿名问卷的回收结果来看，除了一名同学提前去实践请假、一名同学电脑损坏缺席、一名同学申请网上上课，所有同学都出席了。真是太令我振奋了。一些同学的水平确实已经不必上课，但是他们以小助教的形式帮助周围的同伴，课上课下和大家一起讨论，对整个教学的效果也做出了不可替代的贡献。令我惊讶的是，这门课还有校外的同学和几位博士生来旁听，有不少朋友在线旁听，好不热闹。

   在课程的匿名问卷统计中，大多数同学都给了课程很高的评价，但也有同学提出了批评。其中一个批评是课的难度太低了，没有挑战性。这一点很中肯，从同学们最后的得分来看，确实有点简单。解决方法很直接，加大大作业难度，甚至引入学术界的开放问题。还有的批评是课程难度太高了，上课云里雾里，跟不上。解决方法我也想好了，把2019年的课程录像整理好供同学们课下观看，并根据录像提取出讲义，可以解决课上教材过多过繁的问题，让学着吃力的同学能在复习中得到支持。还有的同学看穿了我的“敏捷备课”，委婉地劝我要注意身体，不要临时抱佛脚彻夜备课。第二年，有了课程视频和讲义，情况会好不少。有同学不适应小作业中自动评分的规则，觉得不近人情，我跟同学们讲了其中的原因是在科研的场景中的输入输出标准要很严格，不然会返工耗费大量精力，同学们支持了这个观点。

   课上也有暂时学习有困难的同学。一位同学的完美主义情怀比较强，在学习里遇到巨大困难。实践课程的风格与物理课不一样，许多时候在没有搞清原理之前也得先迈出第一步，之后再回过头来领悟。所以这位同学就一直在原地打转，无法行动起来。我非常理解这种状态，因为我本科时也是这样的学习态度。我和他有了几次长谈，连他自己都觉得他在给自己不写作业找理由，我还是可以理解那种无法行动时的痛苦。最后，我给了他一个外部条件：在我的办公室里做作业。这样做是有争议的，一个大学生，不能想小学生一样被监督着写作业。但是我相信，在完美主义者中，有了一个最初行动的种子才可以继续行动下去。如果我恰好能提供这个种子，就是我的荣幸了。

   还有一位同学有了极大的困难，生活中受家长的管束比较多。他已经修满学分，但还是来自愿选课。上课期间他的电脑坏了，也就自然没有办法做作业和学习，他没有求助，只是默默等着电脑修好，顺便看点课程相关的书，打打手机游戏。我也想在办公室监督他把作业做了。他表现出非常强的求知欲，令我有些奇怪对问题这么感兴趣的同学为什么无法上课无法写作业。反思起来，我并没有理解这位同学的思维方式，他好像会自然无视各种 deadline 在自己的世界里探索，电脑坏了，只不过是推迟一下这种探索。然而当他慢慢恢复进度时，他父亲给我打电话，要求他假期快点回家。回家之后，他被家长带去串了几天亲戚，也就松懈下来。到了开学，他依然没有写完作业，而且他已经不回应我的电话、信息和邮件了。在和辅导员与班主任沟通之后，我也想过实在不行就挂了这位同学。然而录成绩的最后一天，我还是想试试，就请了一川去宿舍找他，他不在，舍友说他的手机确实坏了。晚上11点，就在我即将放弃准备睡觉的时候，这位同学借舍友的手机给我打了电话。我兴奋地起床和他约到了办公室，他的电脑上还在查找如何解决手机接不到电话的 bug。我给他讲了大作业的目标，他越来越起劲，一个任务一个任务地完成，让我很是感动。最后到了凌晨4点多我快顶不住的时候，他把大作业的基本要求做了出来。我们伴着熹微的晨光各自回到宿舍，我才长舒了一口气。

   记得尚仁成老师在基科二十年的发言中，并没有像其他老师那样如数家珍地讲他世界各地的学生都多么优秀，而是讲了几位在本科阶段遇到很大困难的同学，讲了他如何帮助这些同学走出心理的怪圈，讲了院系和学校可以为暂时掉队的同学们做点什么。我的印象非常深刻。我眼睁睁看着我的舍友和隔壁的好同学们无助退学或肄业的过程，我对大学阶段的这种无法上课完成学业的状态有着切肤之痛和刻骨的感受。此时，作为一名教师，我可以做的事比十年前更多了，这是我的幸运。

   大家可能已经发现了，这样一门课，我和它的感情非同一般。那么它是从哪里来的呢？这可就说来话长了。

** 缘起基科二十年
   我是基科2005级的学生，当年大二小学期的课程是 Windows MFC C++ 编程。上课时我没有太理解培养计划中的用意，直到2009年我毕业时才从阮老师那里了解到，设置计算机类课程是为了加强同学们在物理研究中使用计算机的能力。后来我一直和科协的学弟们保持有联系，听到了科协的一些技术大牛对大二小学期的看法和希望。当时朦胧觉得或许有朝一日我可以假期回学校开个学习小组，带着大家学习一点数据分析的新技术。

   时间快进到2018年的基科二十年庆祝纪念活动和学术交流会。一次和阮老师在王刚的办公室里闲聊，正好说到暑假小学期。阮老师说从十多年的毕业生座谈中，许多同学希望能在计算机课程和物理课程之间，加一门课帮助大家把两者联系起来。我说是啊，从我跟师弟师妹们的交流来看，大家在把编程技能迁移到物理研究实践中时普遍遇到很多困难。实际上同学开始进入研究时，要么是自己摸索，要么是接受学长指导，一不留神会掉坑，或者在赶时间的过程中图省事养成一些不良习惯。阮老师说确实很苦恼，原来是 Windows 下的 C++，后面他发现物理研究中使用 Linux 系统很多，就在培养方案中换成了 Linux 下的 C++。可是计算机系的老师会从自身的学科要求出发，不会照顾物理系同学，物理系的老师又比较难支撑整个计算机类课程。我抚掌道，我本科时代不务正业，在科协玩了不少计算机类的奇怪东西，神奇的是，它们现在正好都对应着商界工业界造出的云计算、大数据的概念，而且我在粒子物理实验中，恰好把这些曾经歪门斜道的屠龙之技发挥到了极致。如果有大二同学想做实验物理，我倒是一直有组织一个讨论班的想法。阮老师笑道：“对啊，你赶快入职吧，今年暑假马上就开一门课。”

   我打了个机灵，锅从天降，任重而道远啊。我说既然如此，我愿意试试，只是现在开始准备估计很难来得及啊。好在后来阮老师联系了教务部门询问开课事宜，得知最早开课也是2019年的暑假。我才长出了一口气，不然自己肯定上课挂白菜了。

   这事我越想越美，越想越激动，就直接写了一个课程大纲推到了 [[https://github.com/heroxbd/physics-data/blob/master/pd.org][Github]] 上 。我为何如此振奋呢？仔细想来主要有四点：

   其一，这个课程的内容，代表我作为一名以物理为主业的人，十几年以来探索出的一条计算机技术的整体方案。从前，我没有在物理系的培养方案中习得如何用编程帮助我做研究，为了寻找好的方法，我甚至在本科阶段花的精力超过了我学习物理。而和我一起研究这些技能的系科协学弟们都发现自己更热爱计算机，转行做CS研究或（年薪百万的）程序员，只有我还在留在物理界抱着自行研发的技术自娱自乐。我也曾经试着给同课题组的同学们介绍一些当代的高级计算机技术，大家都不是很适应，觉得为了工具改变习惯太不值得了。因此最终我还是一名独行者，我早年一直在怀疑自己探索这些是否值得，直到最近才坦然了：管它有用没用，我高兴就好，没用就当作业余爱好嘛。通过开课来把这些技能教给我的学弟学妹，让我感到特别兴奋。大二的同学们正好没有既有程序风格惯性，更乐于接受新技术。我自己也可以从同学的反馈中验证十年前来一直让我感到人格分裂的难题：我在物理研究中所玩的，看似很专业实际三脚猫的计算机技能，到底是独门绝技还是自娱自乐，全靠我的学弟学妹们是否授受来评判了。

   其二，这件事情是受阮老师的委托，受各个年级系友的委托。我应当仁不让，把担子挑起来，不论如何也应把同学们的在物理和计算机之间建一架桥，削除数物大类学生对计算机的神秘感和畏惧，溶解“我只对物理感兴趣，不学别的”和“学计算机？不就是修电脑吗？”的物理系式误区。

   其三，我正在组建中微子实验的研究团队，工物系的同学有很多了解的渠道，我也希望能吸引到物理系的同学。本来在清华中微子物理这样的基础物理学研究在工物系就是历史路径依赖的，我希望我的研究能被物理系的同学了解。一门以大规模实验数据分析为主线的课程，正好代表了我研究工作的日常，对大二同学进入实验室之前，肯定会发挥非常切实的体验作用。想到今后在我的组里，会有工物系和物理系的同学一起研究讨论，大家大类分流之后再聚到一起，也是非常令人激动的。

   其四，一门四学分的小学期课，实在是太适合我了！作为教研系列青年教师，每年的教学任务是64学时，即4学分。以一个月的奋斗，换取一年自由身，学期中开会访学都不会受到上课的限制，还有余力帮助同事代课，简直无法想象有比这个更美好的事情了。目前青椒的考核重点还是科研，但是教学的工作量必须与科研相等，这对刚起步的教师有非常大的压力。部分院系给出了入职几年以内允许不达到教学工作量的优惠政策，正好从侧面反映了这个事实。这样一门课会让我一下子进入非常稳定的教学状态和格局。

   这四点，任何一点单独拿出来，都足够我欢喜雀跃地去达成，何况有四点！所以我高兴得一下子就把课程大纲想出来了，之后很快就落实在书面上。

** 开课路漫漫
   实际开课的过程还是很扣人心弦的，大概有5个时间点。

   第一个节点让恢复理性。我很有兴趣地把开课计划和陈老师讲了。陈老师比较担心课程缺乏特色，因为工物系已经有粒子物理的数据分析研究生课程了。我说可以把重心放在当代计算机科学技术发展的新工具上，陈老师表达了我并非科班出身，是否能讲得专业的顾虑。这让我心里的热锅冷静了下来，仔细思考我的课除了满足我的需求和院系培养方案的需要之外，会给同学带来什么。于是在多方征求意见的同时，我自己也和自己进行了一场旷日持久的大辩论：到底有开课的必要吗，我开计算机为主的课是不是不务正业？

   第二个时间点上，我被注入了一轮兴奋剂。2018年11月我十分不务正业地与冬波、振齐、欣彤和卓卓组队打了一场计算机系组织的论文作者去重的比赛。本来我是来体验一下竞赛的，以更好地准备之后的 Ghost Hunter 中微子数据分析排位赛。比赛准备时，欣彤提出了数据格式的规定，我按照这个规定使用 =Makefile= 把整个复杂的处理流程都串了起来。本来我心里没底，比较担心大家是否能接受 =Makefile= 这样鬼畜的上古语法，没想到大家非常开心地使用了。这让我无比振奋！因为我们虽然号称是基科战队，但是完全是五种人类。诚然，这也从侧面反映了基科的多元性。我是物理系大凝聚态传统下的另类，再加上对计算机的洁癖，代表小众的物理审美。冬波是去文科世界使用数据进行跨界打劫的理科学者，他用严谨的数学和物理思维对不确定的世界进行建模讲故事，自成一派为数据工程学，这次竞赛正是他的主场。镇齐代表物理系的主流，既有强大的直觉又有深刻的思想，做实验一丝不苟，使用计算机模式是对师兄的（祖传）代码进行改进，渴望学习新技术但为精力所限。欣彤在机器学习和大数据领域研究，代表当代数据处理的尖端，建模、拟合、调参更如入无人之境，已有成熟的数据处理流水线。卓卓代表应用数学和统计学习，进入所有学科的后花园，对一切新事物具有如饥似渴的学习热情。这样一个采样，基本上覆盖了物理系的同学的所有可能的形态，样本甚至神奇地囊括了团委、学生会和科协，大家竟然一致认为 Git 加 Makefile 的工作流程太科学太强大太神奇了。我对工物系的同学并不担心对我未来的课的接受程度，工物系的同学们已经有学习工具软件的课程，反而物理系的同学的偏好我确实心里没底。这一经历对我的触动有多么深刻和强大，它一下子消解了我对开课意义本身的怀疑。

   于是我又行动起来，把几个月前写的大纲放在了饥渴乐园征求意见。大家很开心，七嘴八舌提建议。这期间得到了唐如麟、史冬波、孙慧辰、吕铭、付祈安、魏胜禹、郑鑫宇、陆思锐、王泉、陈思维、代一、鲍亦澄的多角度评论和指点。在大家的热烈讨论中，很多方案和设计都保留在了最后，比如课程名，课程录像，Git/Makefile 主线，GitHub Classroom，大作业的风格等等。这一稿被拍得最多的是：太难了，给学弟学妹们留条活路吧！还有课程不要变成 Installation party。同学们也奔走相告，大纲被传到各个年级群里，引发了各种争论。我也不断修改着课程的设计，融合集体的智慧。霍师兄也正有此意，正在筹备到大学开天体物理数据类的硬课，我们围绕大纲交换了不少看法。这时，箭已在弦畜势待发，我的担心变成了这门课得能满足行政审批的要求，按时开课。

   到了新课申请的季节，我先和阮老师讨论了一次。我拿着大纲先卖了个关子没有给阮老师看，请阮老师谈对课程的期待。阮老师说，要让同学们在物理研究中熟练使用计算机，为大三开始 seminar 进入科研训练打好基础。我拿出了大纲，教学目标竟然和阮老师说得一模一样！讨论非常顺利，阮老师在物理系教学委员会上提议进行了讨论，课程获得通过，物理系向工物系发出教学任务书。教学委员会的一个反馈是，取名为《实验物理的大数据方法》是否太大，何不按课程内容取名为《Python 数据分析入门》。我的回答是课程专注于讲授当代的计算机技术和工具，此时 Python 最结合进行数据分析，但未来可能被其它更好的语言取代，课程的侧重点不应在 Python。

   在工物系，我依旧没有把握，因为系里所开新课较多，驳回率偏高。陈老师帮我分析了课程设计的主题，指出教学委员会评估的开课必要性时的考查点。我对课程在在工物系培养方案中的地位进行了重点阐述，对国内外和其它院系开设的类似课程进行了深入调研。在教学委员会上，开课受到的质疑在于使用4学分学习软件的必要性：理工科学生，通过阅读文档和说明书，就可以快速上手一件工具，有必要用正式的课程来达到目的吗？这个质疑一针见血，也是我与自己辩论的焦点。我举了两个例子，讲述了在实际工作中，同学们的数据分析工作上手很难，缺乏系统性和良好的习惯，会浪费时间或者弱化科研成果。总体上，我还是得到了委员会比较多的支持。系里的老教授还跟我讲暑假要来听我的课，和我一起分析最新物理实验的公开数据，这给了我莫大的鼓励。工物系大二小学期已经安排得很满，高老师最终建议了完美的解决方案：把课程分成两部分，各两学分，工物系同学选第一门课，物理系同学选两门课，两系的同学统一给分。

   接下来我在两系教务办公室穿梭了多次，在（小）陈老师和葛老师的帮助下，最终完成了开课手续。

** 结语
   我很幸运能得到工物和物理教学委员会的认可和支持，也很幸运有这么多同学与我合作最终把课程开了起来。我还非常感谢关心这门课并不断出谋划策的系友们。此时，我可以欣慰地讲，我最初的四个愿望，都达成了。作为我教学生涯的开始，这门课的点点滴滴，都将被我铭记。
* 2020 凝聚态讨论会
  :PROPERTIES:
  :EXPORT_FILE_NAME: wproject
  :EXPORT_BEAMER_HEADER+: \title{实验物理的大数据方法：大作业介绍}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2020-08-11 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: seahorse
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 实验物理的大数据方法
   - 工程物理系(2学分)和物理系(2+2学分)的限选课
   - 大二与大三之间的暑假小学期进行

     \pause
   - 以实验物理为主题，学习大数据方法的基础
     1. 理解数据的科学精神，从一开始养成良好的科研习惯
     2. 掌握典型工具 Git, Python 和常用命令行工具
     3. 培养针对具体场景选择合适的工具的品位
** 大作业
   - 从实际的科研场景中抽象出相对独立的核心子问题，供同学们探索
   - 第一阶段：生成——基于物理规律模拟实验观测。
   - 第二阶段：分析——从实验观测反推物理规律。

     数据分析平台自动打分，实时更新排名。

** 大作业实时排名
   #+Attr_LaTeX: :height 0.8\textheight
   [[./isoenergy.png]]

** 大作业选题
   - 2019 年粒子物理方向：中微子探测器的光电子信号识别
     - 2020 年：中微子探测器的 \alpha/\beta 粒子鉴别
       \pause
   - 2019 年天体物理方向：射电干涉阵测量天体在天球的位置
     - 2020 年：（讨论中）天体分类问题
       \pause
   - 2019 年凝聚态物理方向：扫描隧道显微镜求二维金属等能面
     - 2020 年：讨论中

* 素材
  #+begin_example
  9月28日下午，清华大学本科教育教学审核评估专家组意见交流会在主楼接待厅举行。教育部审核评估专家组组长丁烈云院士等9位专家组成员，教育部高等教育教学评估中心主任范唯、副主任李智，清华大学党委书记陈旭、校长邱勇等校领导班子成员出席会议。会议由教育部审核评估专家组副组长李志义主持。
　　陈旭首先代表学校对各位专家来校参加审核评估表示欢迎和感谢。陈旭表示，这次评估是教育部在教育强国战略背景下启动实施的新一轮审核评估，是深化新时代教育评价、教育督导改革的重要举措，意义重大。作为全国首家高校接受新一轮本科教育教学审核评估，这是教育部和专家组对清华的高度重视、充分信任，清华大学深知责任重大，必须配合好、完成好这次评估工作。评估工作能够切实帮助我们查找问题和不足，提升本科教育水平，是对学校本科教育教学工作和一流大学建设的一次全面体检。这次评估有助于推动学校进一步实现内涵式高质量发展，落实中央要求，找准发力点。从学校长远发展来看，这次评估也是对学校发展进入新阶段、迈入世界一流大学前列的有力促进。
　　陈旭指出，对专家组提出的真知灼见、意见建议，我们一定诚恳接受、认真改进，对专家和各位领导带来的宝贵经验、创新做法，我们一定积极借鉴、虚心学习、互学互促。学校党委要进一步强化责任担当，深刻领悟“旗帜”“标杆”含义，高标准落实立德树人根本任务，深化教育综合改革，厚植师生家国情怀，着力培养社会主义建设者和接班人，切实履行好为党育人、为国育才的光荣使命。
　　作为首家接受此轮本科教育教学审核评估的高校，清华大学高度重视、认真完成了自我评估和相关准备工作，召开多场研讨会深入总结本科人才培养的经验和不足，研讨面向未来的人才培养目标和本科教育教学组织模式。本次评估中，专家组以多种形式对清华本科教学情况进行了全面深入的考察，对清华本科教学工作有了深入了解，对本科教学工作中存在的问题形成了基本看法。书院制培养模式的改革探索，写作与沟通课程的建设成效，受到了专家们的普遍关注和充分肯定。
　　丁烈云代表评估专家组与清华大学交流了审核评估总体情况。根据教育部评估中心的安排，本次评估以线上线下相结合的方式开展。线上评估自4月27日启动，22名专家（含1名学生观察员）参加，通过在线访谈、师生座谈、听课看课，调阅培养方案、试卷、毕业论文等方式深入考察。在春季学期在线评估基础上，专家组9位成员和1位来自兄弟学校的学生观察员于9月27日-28日入校评估，开展广泛调研，交流考察感受，对清华大学本科教学工作形成了集体意见。
　　丁烈云代表审核评估专家组对清华大学本科教学工作提出四点看法：
　　第一，以立德树人为根本任务，以服务国家为最高追求，坚守为党育人、为国育才的崇高使命。学校把立德树人成效作为检验学校一切工作的根本标准，把服务中华民族伟大复兴作为重要使命。在“三位一体”的教育理念和人才培养模式中，把“价值塑造”放在首位；开设“新生导引课”，为大学生扣好第一粒扣子；把思想政治教育元素融入课程教学的各环节，形成课程思政特色；提质增效深化课程改革，不断创新人才培养模式，为广大学生提供优质教育资源；持续深入推进全员全过程全方位育人，支持学生的全面发展等，都体现了学校立德树人中心地位突出，社会主义办学方向明确，为国家培养了一批批德智体美劳全面发展的社会主义建设者和接班人。
　　第二，坚持“以学生学习与发展成效为核心的教育质量观”，坚守“课比天大”“卓越教学”的教学质量文化传统，质量保障体系健全有效。学校推动“以教为主”向“以学为主”转变，注重发挥教师和学生在质量保障体系中的主体作用。完善学分绩（GPA）方案，体现学生成长性评价；将“教师投入”和“学生收获”作为课程教学评价体系的关键指标；建立“教学档案袋”，多维度记录教师教学过程、教学成效和教师成长；特别是面对疫情挑战，率先开展全体系、成建制、严格按照教学计划时间表进行在线教学，并进行教学质量保障性听课。这些新举措和新成效切实体现了“教书育人是教师的第一学术责任”的深刻内涵，成为不断进行自我超越的内生动力，推动教育教学质量不断提升。
　　第三，注重价值引领，实现通专融合，在创新人才培养上不断出成果出示范。学校在领导重视、师资投入、资源配置等多方面，都充分体现了“以本为本”。把价值塑造视为根本，提升思政课教学水平，强化各类课程的育人功能，二者同向同行，卓有成效。学校坚定不移地推进和深化教育教学改革，形成了以通识教育为基础、通专融合的本科教学体系。书院制人才培养模式和贯穿全学程的大类培养，使人才培养体系发生了格局性变化。通过学习发展、心理健康、职业发展、全球胜任力等的指导和培养，全方位支持学生发展。
　　第四，大胆创新本科教育组织模式，勇于在变局中开新局，不断实现新跨越。2014年，清华率先启动综合改革，确立了“三位一体，通专融合，以学为主，多样成长”教育教学改革的总体思路，经过七年持续深入的教育教学改革攻坚战，学校在教育理念、育人实践等方面积累了丰富的经验，为推动我国高等教育理念创新、实践创新、制度创新发挥了先行先试的作用。
　　专家组一致认为：清华大学以立德树人为根本任务，提出“一流的本科教育是一流大学的底色。”学校树立价值塑造、能力培养、知识传授“三位一体”的教育理念和人才培养模式，深入推进本科教育教学改革，精心谋划，大胆实施，蹄疾步稳，成效显著。清华的本科教育给学生打上了深刻的清华烙印，让他们在永不褪色的底色上成就绚烂的人生。清华大学在我国高校本科教育教学改革中充分发挥了出经验、出示范的重要作用，是当之无愧的中国高等教育的一面旗帜。清华的实践让我们坚信，新时代中国的高等教育完全有能力培养出第一流的创新人才。
　　会上，专家组各位成员和学生观察员突出问题导向，本着帮助学校发现问题、实现发展的目的，逐一进行了个人意见交流。在对清华大学本科教学工作予以充分肯定的同时，专家组成员围绕思想政治教育、课程体系优化、教学质量保障体系建设、劳动教育体系设计、书院制建设、创新能力培养、医学教育、学生多样化培养等方面提出了意见建议，并希望清华大学作为高等教育的一面旗帜，在本科教育教学中进一步打造“升级版”的清华范式和清华方案。
　　交流会上，邱勇代表学校再次向各位专家的辛勤付出及对清华本科教育教学工作提出的中肯意见建议表示感谢。邱勇说，面向高校开展本科教育教学审核评估是全面落实中央教育评价改革要求，引导高校坚定正确办学方向、抓实人才培养质量“最后一公里”的重要举措。在教育部高等教育教学评估中心的安排下，评估专家组全体专家以习近平总书记关于教育的重要论述为根本遵循，用心用情创新评估方式方法，通过线上线下相结合等多种方式，既全面、深刻、具体地了解和把握清华本科教育教学情况，又大幅减轻受评高校的评估负担，特别是对学校自2017年上一轮评估以来教育教学改革的一系列举措给予了充分肯定，并对清华未来的本科教育发展提出了宝贵的意见和建议，为推动清华进一步深化改革、提升本科教育教学质量提供了强大助力。
　　邱勇表示，2017年以来，清华大学在深化实施综合改革的进程中，着重推进本科教育教学改革，同时充分发挥本科评估“以评促建”的作用，通过召开第25次教育工作讨论会，在培养方案、课程体系、实践教学、师资建设、评价体系、国际交流合作等方面推出40项行动计划，将“三位一体”培养模式上升为教育理念；通过组织学风建设年活动及召开学风建设大会、研究生教育改革发展大会、第18次科研工作讨论会，系统总结反思人才培养中存在的问题。清华人始终坚持使命驱动与问题导向，不断强化“教书育人是教师的第一学术责任”，并以实际行动践行价值塑造、能力培养、知识传授“三位一体”教育理念。
　　邱勇表示，今年4月19日，习近平总书记来校考察时发表重要讲话，对清华大学的育人传统和办学特色给予高度肯定。总书记指出，110年来，清华大学深深扎根中国大地，培育了爱国奉献、追求卓越的光荣传统，形成了又红又专、全面发展的教书育人特色，为国家、为民族、为人民培养了大批可堪大任的杰出英才。总书记强调，建设一流大学，关键是要不断提高人才培养质量。要想国家之所想、急国家之所急、应国家之所需，抓住全面提高人才培养能力这个重点，坚持把立德树人作为根本任务，着力培养担当民族复兴大任的时代新人。教师是教育工作的中坚力量，要成为“大先生”，做学生为学、为事、为人的示范，促进学生成长为全面发展的人。总书记的重要讲话精神为学校深化本科教育教学改革、坚定“中国教育是能够培养出大师来的”信心提供了重要理论基础与强大精神动力。
　　邱勇指出，清华大学刚刚迎来110周年校庆，站在新的历史起点上，我们要继续加强理论研究与模式探索，推动育人理念不断创新；要着力提升整体办学水平，为高质量人才培养提供全方位保障；要大力加强师资队伍建设，只有一流的师资才能保证一流大学本科教育的底色。面向新的征程，清华大学将始终坚持党对学校工作的全面领导，坚决贯彻落实党的教育方针，坚持社会主义办学方向；将进一步加强制度建设和文化建设，不断提升学校治理体系与治理能力现代化水平；将持续深化改革，着力提升改革的系统性、整体性、协同性，坚决走内涵式高质量发展道路；通过制定实施“2030高层次人才培养方案”“2030创新行动计划”和“2030全球战略”等中长期战略规划，真正发挥“旗帜”“标杆”的责任担当，在出人才、出成果、出经验、出示范方面发挥引领作用，努力开拓中国特色世界一流大学建设的崭新局面。
　　范唯代表教育部评估中心对专家组成员的付出表示感谢。她充分肯定了清华大学率先参与新一轮本科教育教学审核评估的使命担当，并围绕三个关键词谈了考察感受：一是从容，清华有从容的气质，舍得为本科教育下力气花功夫，投入精力和资源，从制度设计层面考虑本科人才培养，脚踏实地地推进各项工作；二是醇香，这次审核评估是一次难得的交流活动，专家组成员有不同的学术背景和经验认识，能够从不同角度观察清华办学，提出宝贵意见，评估的过程有着醇香的味道，值得慢慢品味；三是初心，评估中心的初心是希望用审核评估的方式帮助学校改进提升，助力学校改革和“双一流”建设。范唯最后表示，希望清华以评估结果为参照，进一步提高办学水平，祝愿清华未来越办越好，把中国特色社会主义一流大学建设的旗帜越举越高。
　　清华大学各单位主要负责人，学校教学委员会委员，学校教学督导组成员，学校学生工作指导委员会委员，各院系主管教学工作副院长（副系主任）、各院系主管学生工作副书记参加会议。
  #+end_example

* 2021吐槽
之所以没有写成“反思”，是因为这篇日志是一则阴暗的吐槽。吐完继续吃饭，切勿对号入座，切勿转载。

《实验物理的大数据方法》在 2019 年开课，完成了初步的摸索，老师和学生的体验都不错。因为课第一次开，没有人知道给分怎么样，来上课的学生都是有想法，大多是要提升计算机使用品位的学生。上课颇有一种“坐而论道”的教学相长的享受。

2020年只能线上教学，有近10人并不认同课程传递的“复现”、“一次"，"透明"，"最佳工具"等原则和价值，反复针对平时作业中的扣分申诉，讨论中我感觉到申诉者并不在乎什么原则，只是“老子一向最牛B，谁他妈敢扣老子的作业分，谁他妈有病”的心态。有学生为了把自己从 B+ 申诉到 A- 寻找各种可能的点申诉，有学生算出了自己稳拿 A-，直接躺平放弃继续上课和作业。我看了几位能闹能精打细算的学生的总评成绩，发现他们大都是年级前几名，不禁倒吸一口凉气，这些学生是代表清华学风的。杨斌说学生上课像刷副本做任务打怪，讲投入产出比，讲学分绩的最优化函数，这种学习失去了灵魂。这个问题非常严重。

但是看到连原本十拿九稳的推研都卷成一片血海，我能说同学位不应该刷绩点吗？不能。但我是有精神洁癖的，我不想让我的课成为水刷4.0的工具。

2021年，我觉得2020年教学体验差的原因是，虽然大多数学生在努力学习，但是闹得最欢的想刷绩点的学生主导了讨论氛围。因此我作了最终被证明实践证明是错误的决定：提升课程难度，严格查重，留下想讨论科学、技术的学生，劝退刷绩点的打怪者。

这个决定的 2B 之处在于，本来有更好的办法，如记 P/F，或者把课容量限制到 30，拐弯抹角地做是没有意义的。拐弯抹角的结果是，因为作业难，反复针对作业扣分申诉者变得更多。

这个决定最令我痛心之处在于：有想学习认真来上课的学生因为作业做不完，只能在上课时做作业了，许多想发展数据处理能力的学生因为经历了作业的摧残，反而因此折损了兴趣。

年级的大佬们是这样计算的：本大佬已经独步江湖了，一个月都他妈不用来上课，稳稳拿4.0。但是现实的剧本变成了，我本来想躺出4.0，但你却让我花了整整六个星期时间肝出了4.0，老师你他妈不讲武德！我他妈六个星期能做多少事情，能看多少论文，能发多少论文，能上多少门研究生课，能做多少实验，结果你他妈让我六个星期都没学物理，你打着物理的旗号让我写程序折磨我，我按计算器就够了为什么让我学这些傻B玩意，你他妈就是批着物理系系友外皮的计算机系内奸，你他妈就是物理系的罪人，祝你明年关门！ 如履薄冰地上完了课，大佬没有学习课程传递的价值，使用他高中摸索出的技能完成大数据的任务。这门课对他的收效甚微，确实是没法达到打副本刷怪的投入产出比。

我对不起大佬们。我觉得我们一起在不适当的时间做了不适当的事，我很内疚，我的课成为了大佬封神路上的无意义支线任务。

这门课应该是给谁开的呢？我觉得大部分学生是这门课的受众，但我要道歉的是，对不起，我本应更关注大家的学习跟大家论道，但是我没有把控住自己，精力被按闹分配了。
* 2020 学生
   尊敬的续老师：

   我是清华大学物理系的毕业生陈奕儒，现在在天文系做助研一年，我在2020夏季学期参加了您实验物理的大数据方法课程的学习，之前的学号是2018012238，由于现在在申请2023年的研究生或博士项目，想请您写封推荐信。

   因为当时的学生很多，我想您应该已经对我没有什么印象了（为了让您更熟悉一点，我将CV也附到邮件中），而我在这门课上的成绩也仅为B+，确实算不上您的优秀学生。但您的这门课确实对我帮助极大，您在那么短的时间内能帮我训练学习了如此多种的编程语言和技巧，很多内容在我之后的研究工作中也经常用到。对我帮助最大的是您最后的大作业环节——对造父变星光度的分析，我承认当时我们组最后的分析结果并不算好，但这是我第一次对天文方向研究的尝试，虽然不算成功但确实积累了一些天文方向研究的经验。也通过这次大作业，我和天文系的毛淑德和许丹丹老师进行了交流，最后也在许老师的组里一直学习如何做天文研究。可以说是您的这门课程开启了我的天文研究之路，我也非常希望能将在您这门课上的经历写在CV上作为我研究经历的开始，所以也非常希望您能愿意为我写一封推荐信。我承认自己能力有限，当时对计算机的了解也不够多，所以当时您这门课上的成绩也不算好，但我在这门课上确实认真学习了很多东西，也积极地和老师同学助教进行了交流，虽然成绩不佳，但收获真的很大。

   非常感激您这门课对我的帮助，也祝您新学期顺利。
   陈奕儒

   P.S.如果您有其他想了解的内容，请随时联系我。
* Github Classroom
  My first series of lectures started in 2019.  It was prepared
  together with Github Classroom.  These were the first time I
  establish and teach a complete course. I have rapport with Github
  Classroom and want it to be better.


  We have met glitches of Github Actions during the summer of 2021,
  when the Github development team did a series of quick iteration in
  features.  I want to join the advisory board to keep the impact of
  agile software development on Classroom to a minimum.  Here is our
  wishlist from real experience with Github Action and Classroom:

  Special judge feature in Github Action. 
* 教改项目中期检查
  :PROPERTIES:
  :EXPORT_FILE_NAME: midterm
  :EXPORT_BEAMER_HEADER+: \title[实验物理的大数据方法：讲义教辅]{《实验物理的大数据方法》研究型实践课程讲义与辅助资源建设 \\ \small{ZY01​\_03 本科教材及教学资源立项建设}}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-09-01 清华
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 课程简介与改革背景
   《实验物理的大数据方法》系列课程面向 *工物系* 、 *物理系* 、 *未央
   书院* 、 *致理书院* 的大二年级学生，在夏季学期集中训练学生的大数据
   分析。
   - 把 _原理讲授_ 和 _动手实践_ 相结合
   - 把 _基本程序设计能力_ 与 _前沿学术问题_ 相结合
   - 把 _物理学科学目标_ 与 _数据处理工程技术_ 相结合
*** 参考书繁多，内容庞杂 \to 亟需面向清华学生的讲义和教辅资料
   1. Python 基础：《Think Python 2e》；
   2. Python 数值计算：《Scipy Lecture Notes》；
   3. 命令行数据处理：《Data Science at Command Line》；
   4. 关系代数大数据组织：《Data Manipulation at Scale: Systems and Algorithms》。
** 项目进展：课程录像
   - 制作完成第一批 +带字幕+ 的课程录像；
     - [[http://hep.tsinghua.edu.cn/~orv/teaching/video.html][2019年]]、[[http://hep.tsinghua.edu.cn/~berrysoft/bdeph2021/][2021年]]、[[http://hep.tsinghua.edu.cn/~berrysoft/bdeph2022/][2022年]]课程录像，制作水平和质量逐年提升。
   - 经过研判，把精力集中在提升音频录制效果和清晰吐字上，不再制作字幕。
*** t                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.33
    :END:
   #+attr_latex: :height 2.8cm
   [[./img/video-2019.png]]
*** b                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.66
    :END:
   #+attr_latex: :height 2.8cm
   [[./img/video-2021.png]]
*** i                                                       :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
    - 结合浏览器插件无限调节播放速度，成为学生预习和复习的重要资料
    - 成为高能物理暑期训练营的参考资料
** 项目进展：辅助资源网站
   - [[https://physics-data.meow.plus/faq/][教学辅助网站]] 于 2021 年开课前上线
     - 内容已逾4万字，配有大量参考资源链接
   - 尽可能替代群聊答疑，积淀群体智慧。收到上课学生的贡献(GitLab Merge Request)。
*** t                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
     #+attr_latex: :height 5cm
     [[./img/faq-web.png]]
*** i                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
     #+attr_latex: :height 5cm
     [[./img/gitlab-MR.png]]
** 项目进展：讲义
   - [[http://hep.tsinghua.edu.cn/~berrysoft/bdeph2022/lectures/l0.html][草稿]]近 19 万字，完成度 60%。在 2022 年试验使用。
   - 课件约 26 万字，完成度 100%。

*** t                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
     #+attr_latex: :height 4cm
     [[./img/notes-1.png]]
*** i                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
     #+attr_latex: :height 4cm
     [[./img/notes-2.png]]
      
** [75%] 进度总结
   - [X] 制作课程录像
   - [X] 建立和维护教学资源网站
   - [-] 讲义
     - [X] 第一周 Python 基础
     - [X] 第二周 Python 数值计算
     - [-] 第三周 命令行数据处理
     - [-] 第四周 关系代数大数据组织
   - [X] 完善美化课件
*** 讲义工作计划
    - 把课件与讲义融合，消除重复内容以提升质量。
    - 10月进行校对。
*** 填表                                                    :B_ignoreheading:
**** 项目进展情况
     完成了三轮课程录像制作，教辅资源网站建设完成，讲义撰写进度 60%。
**** 已取得的阶段性成果
     教辅资源网站建设完成， https://physics-data.meow.plus/faq/ 。课程录像和讲义草稿在 http://hep.tsinghua.edu.cn/~berrysoft/bdeph2022/ 。
**** 下一阶段计划
     把课件与讲义融合，消除重复内容以提升质量。10月开始校对。
**** 经费执行情况说明
     预算5万元。已支出4.9万元，包括设备费10797.8元，资料费 302.2 元，劳务费 37900 元。

* 工物系交流
  :PROPERTIES:
  :EXPORT_FILE_NAME: book
  :EXPORT_BEAMER_HEADER+: \title[实验物理的大数据方法：讲义]{《实验物理的大数据方法》研究型实践课程讲义}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2022-09-08 工物系
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{近物所}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 课程简介
   《实验物理的大数据方法》系列课程面向 *工物系* 、 *物理系* 、 *未央
   书院* 、 *致理书院* 的大二年级学生，在夏季学期集中训练学生的大数据
   分析。
   - 把 _原理讲授_ 和 _动手实践_ 相结合
   - 把 _基本程序设计能力_ 与 _前沿学术问题_ 相结合
   - 把 _物理学科学目标_ 与 _数据处理工程技术_ 相结合
   - 起始部分 "ZY01​_03 本科教材及教学资源立项建设" 教改项目支持，2022年结题
*** 大作业体现课程目标
    - 天体物理、粒子物理、原子分子物理、凝聚态物理

** 参考书繁多，内容庞杂
   1. Python 基础：《Think Python 2e》；
   2. Python 数值计算：《Scipy Lecture Notes》；
   3. 命令行数据处理：《Data Science at Command Line》；
   4. 关系代数大数据组织：《Data Manipulation at Scale: Systems and Algorithms》。
*** 亟需面向清华学生的讲义
    - 同类课程：
      UC Berkeley Data Science and Bayesian Statistics for Physical Sciences
      - https://phy151-ucb.github.io/seljak-phy151-fall-2018/
      - 无教材，10本参考书。
      #+attr_latex: :height 2cm
      [[./fig/literature.png]]
    - 国内无同类课程。
      - 讲义草稿和课程录像由国科大的同事用在学生暑期训练营。

** 相关进展：课程录像
   - 制作完成第一批 +带字幕+ 的课程录像；
     - [[http://hep.tsinghua.edu.cn/~orv/teaching/video.html][2019年]]、[[http://hep.tsinghua.edu.cn/~berrysoft/bdeph2021/][2021年]]、[[http://hep.tsinghua.edu.cn/~berrysoft/bdeph2022/][2022年]]课程录像，制作水平和质量逐年提升。
   - 经过研判，把精力集中在提升音频录制效果和清晰吐字上，不再制作字幕。
*** t                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.33
    :END:
   #+attr_latex: :height 2.8cm
   [[./img/video-2019.png]]
*** b                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.66
    :END:
   #+attr_latex: :height 2.8cm
   [[./img/video-2021.png]]
*** i                                                       :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
    - 结合浏览器插件无限调节播放速度，成为学生预习和复习的重要资料
*** 讲义撰写策略
    回看4年的授课录像，回味课堂气氛写作。
** 相关进展：讲义
   - [[http://hep.tsinghua.edu.cn/~berrysoft/bdeph2022/lectures/l0.html][草稿]]近 19 万字，完成度 60%。在 2022 年试验使用。
   - 课件约 26 万字，完成度 100%。

*** t                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
     #+attr_latex: :height 4cm
     [[./img/notes-1.png]]
*** i                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
     #+attr_latex: :height 4cm
     [[./img/notes-2.png]]
      
** [66%] 进度总结
   - [X] 制作课程录像
   - [-] 讲义
     - [X] 第一周 Python 基础
     - [X] 第二周 Python 数值计算
     - [-] 第三周 命令行数据处理
     - [-] 第四周 关系代数大数据组织
   - [X] 完善美化课件
*** 讲义工作计划
    - 把课件与讲义融合，消除重复内容以提升质量。
    - 10月进行校对。
*** 十四五长远规划
    - 在中文版成型出版之后，撰写英文版。

* 工物系汇报
  :PROPERTIES:
  :EXPORT_FILE_NAME: exp
  :EXPORT_BEAMER_HEADER+: \title[实验物理的大数据方法]{《实验物理的大数据方法》实验内容汇报}
  :EXPORT_OPTIONS: H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t author:nil
  :EXPORT_OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  :EXPORT_DATE: 2023-06-20 刘卿楼
  :EXPORT_BEAMER_HEADER+: \author{续本达}
  :EXPORT_BEAMER_HEADER+: \institute[清华工物]{清华大学 工程物理系}
  :EXPORT_BEAMER_THEME: Boadilla
  :EXPORT_BEAMER_COLOR_THEME: MedStarColors
  :EXPORT_BEAMER_FONT_THEME: professionalfonts
  :END:
** 课程简介
   《实验物理的大数据方法》系列课程面向 *工物系* 、 *物理系* 、 *未央
   书院* 、 *致理书院* 的大二年级学生，在夏季学期集中训练学生的大数据
   分析。
   - 把 _原理讲授_ 和 _动手实践_ 相结合
   - 把 _基本程序设计能力_ 与 _前沿学术问题_ 相结合
   - 4 学分，分成两个 2 学分课程：1号课程 ~80人，2号课程 ~40人
#+beamer: \pause
*** l                                                                 :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
**** 实验内容：上机实际操作
   1. Python 基础
   2. Python 数值计算
   3. 命令行数据处理
   4. 关系代数大数据组织
*** r                                                                 :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
**** 学生在自建环境中练习

#+begin_example
    seq -s, -w 00 49 | sed 's/9,/9\n/g'
#+end_example

    #+begin_example
    00,01,02,03,04,05,06,07,08,09
    10,11,12,13,14,15,16,17,18,19
    20,21,22,23,24,25,26,27,28,29
    30,31,32,33,34,35,36,37,38,39
    40,41,42,43,44,45,46,47,48,49
    #+end_example

** 授课效果
   - 制作完成第一批 +带字幕+ 的课程录像；
     - [[http://hep.tsinghua.edu.cn/~orv/teaching/video.html][2019年]]、[[http://hep.tsinghua.edu.cn/~berrysoft/bdeph2021/][2021年]]、[[http://hep.tsinghua.edu.cn/~berrysoft/bdeph2022/][2022年]]课程录像，制作水平和质量逐年提升。
   - 口碑慢慢在学生中建立：“很难但很有用”，“认真学习收获很大，开启了全新的模式”
     #+beamer: \pause
     + 开始有数学、能动、机械、环境和化学方向学生选课
     + 致理书院班主任：“（学长）每年都劝退（学弟），每年都劝不住……然后劝不住的学完开始劝退下一届”
#+beamer: \pause
*** t                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.33
    :END:
   #+attr_latex: :height 2.8cm
   [[./img/video-2019.png]]
*** b                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.66
    :END:
   #+attr_latex: :height 2.8cm
   [[./img/video-2021.png]]
*** i                                                       :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
    - 学生的正面反馈：“毕业后最重的技能”，“上过最醋的课”，“学习到全套技能”
    - 负面反馈：“有些‘fly bitch’，作业难到破防”，“学完之后不想在实验物理领域发展了”
      + “上完课已耗尽精力，还要做一个月的大作业，假期等于没有”
** 辅助资源网站
   - [[https://physics-data.meow.plus/faq/][教学辅助网站]] 于 2021 年上线
     - 内容已逾4万字，配有大量参考资源链接
   - 尽可能替代群聊答疑，积淀群体智慧。收到上课学生的贡献(GitLab Merge Request)。
*** t                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
     #+attr_latex: :height 5cm
     [[./img/faq-web.png]]
*** i                                                                 :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
     #+attr_latex: :height 5cm
     [[./img/gitlab-MR.png]]
** 实验条件
- 学生自备计算机
#+beamer: \pause
- 大作业用额外机时由工物系学生科创计算平台 (=cat=) 提供
  + 由系学生科协管理和分配
  + 与天格计划共用
- 有学生自费购买云计算写大作业，应引导学生使用系设平台
  + 有扩充学生科创计算平台（~10万元）的意愿
*** 大作业三选一，可自订
|           | 粒子与核物理             | 天体物理      | 凝聚态与原子分子物理   |
|-----------+--------------------------+---------------+------------------------|
|      2019 | PMT 波形分析             | TOLA 微波干涉 | 二维准粒子成像         |
|      2020 | \(\alpha/\beta\)粒子鉴别 | 造父变星      | 二维准粒子成像         |
|      2021 | 大型液闪探测器光学       | 天格 GRB 定位 | 光电子能谱测量         |
|      2022 | 大型液闪探测器光学       | 天格 GRB 定位 | 光电子能谱测量         |
| 2023 待定 | MeV 伽马的能量沉积       | 原行星盘演化  | 二维拓扑材料的光电效应 |
** 助教队伍
*** l                                                                 :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.35
:END:
- 职责：出作业题，批作业，答疑等
  + 从科研项目中，出大作业选题
- 来源：历届优秀学生、计算系有教学理想的学生、课题组学生
  + 自觉、积极、有热情
- 困难：自行发放“勤工助学”，缺乏校设助教的荣誉
*** r                                                                 :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.65
:END:
**** 2022 年助教队伍
   - 王宇逸 :: 物理系本科毕业，工物系博士生
   - 刘晓义 :: 计算机系本科生，物理系后援
   - 张卓婧 :: 物理系本科毕业，工业工程统计中心博士生
   - 陈晟祺 :: 计算机系本科毕业、博士生
   - 陈嘉杰 :: 计算机系本科毕业、博士生
   - 高一川 :: 工物系本科毕业，计算机系硕士生
   - 刘学伟 :: 工物系本科毕业、博士生
   - 刘一芃 :: 计算机系本科毕业、交叉信息学院博士生
   - 张爱强 :: 工物系本科毕业、博士生
   - 武益阳 :: 物理系本科毕业，工物系博士生
   - 于明杨 :: 物理系本科生，2021年 A+

** 反思
*** 应尽快撰写完成课程讲义，完成教学改革项目
   - [X] 制作课程录像
   - [X] 建立和维护教学资源网站，鼓励其它高校与社会人士自学
   - [-] 讲义
     - [X] 第一周 Python 基础
     - [X] 第二周 Python 数值计算
     - [-] 第三周 命令行数据处理
     - [-] 第四周 关系代数大数据组织
   - [X] 完善美化课件
*** 进一步完成内容融合
- 将作业命题内容更多地与我系研究工作相结合。
